
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  000020c2  00002156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800100  00800100  000021f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004773  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017cb  00000000  00000000  00006db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000282e  00000000  00000000  00008582  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d0  00000000  00000000  0000adb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014dc  00000000  00000000  0000b580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002134  00000000  00000000  0000ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000eb90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	26 01       	movw	r4, r12
      56:	94 00       	.word	0x0094	; ????
      58:	9a 00       	.word	0x009a	; ????
      5a:	f3 00       	.word	0x00f3	; ????
      5c:	fd 00       	.word	0x00fd	; ????
      5e:	07 01       	movw	r0, r14
      60:	13 01       	movw	r2, r6
      62:	1d 01       	movw	r2, r26

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 ec       	ldi	r30, 0xC2	; 194
      78:	f0 e2       	ldi	r31, 0x20	; 32
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a4 32       	cpi	r26, 0x24	; 36
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 1f 06 	call	0xc3e	; 0xc3e <main>
      9a:	0c 94 5f 10 	jmp	0x20be	; 0x20be <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <app_init>:
Uchar8_t u8_g_startFlag = 0;
Uchar8_t u8_g_stopFlag = 0;

void app_init()
{
	ultrasonic_vInit();
      a2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <ultrasonic_vInit>
	LCD_Init();
      a6:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_Init>
	PUSH_BTN_intialize();
      aa:	0e 94 88 05 	call	0xb10	; 0xb10 <PUSH_BTN_intialize>
	TIMER_TMR2NormalModeInit(ENABLED);
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 36 0c 	call	0x186c	; 0x186c <TIMER_TMR2NormalModeInit>
	KEYPAD_init();
      b4:	0e 94 b6 02 	call	0x56c	; 0x56c <KEYPAD_init>
	DCM_motorInit(ST_g_carMotors);
      b8:	81 e6       	ldi	r24, 0x61	; 97
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 c7 04 	call	0x98e	; 0x98e <DCM_motorInit>
      c0:	08 95       	ret

000000c2 <app_main>:
}

void app_main()
{
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
	keyState = KEYPAD_getButton();
      ca:	0e 94 dd 02 	call	0x5ba	; 0x5ba <KEYPAD_getButton>
      ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <keyState>
	if(keyState == KEY_1 && u8_g_startFlag==0)
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	49 f4       	brne	.+18     	; 0xe8 <app_main+0x26>
      d6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
      da:	91 11       	cpse	r25, r1
      dc:	05 c0       	rjmp	.+10     	; 0xe8 <app_main+0x26>
	{
	
	     state = SET_DEFAULT_ROTATION;
      de:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
		 u8_g_startFlag = 1;
      e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
      e6:	13 c0       	rjmp	.+38     	; 0x10e <app_main+0x4c>
	}
	else if(keyState == KEY_2 && u8_g_startFlag == 1)
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	41 f4       	brne	.+16     	; 0xfc <app_main+0x3a>
      ec:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
      f0:	91 30       	cpi	r25, 0x01	; 1
      f2:	21 f4       	brne	.+8      	; 0xfc <app_main+0x3a>
	{ 
		state = STOP;
      f4:	87 e0       	ldi	r24, 0x07	; 7
      f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
      fa:	09 c0       	rjmp	.+18     	; 0x10e <app_main+0x4c>
	}
	
	else if(keyState == KEY_1 && u8_g_startFlag == 1)
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	39 f4       	brne	.+14     	; 0x10e <app_main+0x4c>
     100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	19 f4       	brne	.+6      	; 0x10e <app_main+0x4c>
	{
		state = CAR_SCANING;
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
	}
	
	
	switch(state)
     10e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <state>
     112:	8e 2f       	mov	r24, r30
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	88 30       	cpi	r24, 0x08	; 8
     118:	91 05       	cpc	r25, r1
     11a:	08 f0       	brcs	.+2      	; 0x11e <app_main+0x5c>
     11c:	a7 c0       	rjmp	.+334    	; 0x26c <app_main+0x1aa>
     11e:	fc 01       	movw	r30, r24
     120:	e6 5d       	subi	r30, 0xD6	; 214
     122:	ff 4f       	sbci	r31, 0xFF	; 255
     124:	0c 94 45 10 	jmp	0x208a	; 0x208a <__tablejump2__>
	{
		case SET_DEFAULT_ROTATION :
		{
			setDefaultRotation();
     128:	0e 94 3b 01 	call	0x276	; 0x276 <setDefaultRotation>
			state = CAR_SCANING;
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
     132:	9c c0       	rjmp	.+312    	; 0x26c <app_main+0x1aa>
		}
		case CAR_SCANING :
		{
			
			ultrasonic_vGetDistance(&obstcaleDistance);
     134:	85 e0       	ldi	r24, 0x05	; 5
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ultrasonic_vGetDistance>
			if(obstcaleDistance > 70)
     13c:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <obstcaleDistance>
     140:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <obstcaleDistance+0x1>
     144:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <obstcaleDistance+0x2>
     148:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <obstcaleDistance+0x3>
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	4c e8       	ldi	r20, 0x8C	; 140
     152:	52 e4       	ldi	r21, 0x42	; 66
     154:	c7 01       	movw	r24, r14
     156:	b6 01       	movw	r22, r12
     158:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__gesf2>
     15c:	18 16       	cp	r1, r24
     15e:	24 f4       	brge	.+8      	; 0x168 <app_main+0xa6>
			{
				state = MORE_THAN_70_CM;
     160:	83 e0       	ldi	r24, 0x03	; 3
     162:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
     166:	82 c0       	rjmp	.+260    	; 0x26c <app_main+0x1aa>
			}
			else if(obstcaleDistance <= 70 && obstcaleDistance > 30)
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	4c e8       	ldi	r20, 0x8C	; 140
     16e:	52 e4       	ldi	r21, 0x42	; 66
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__cmpsf2>
     178:	18 16       	cp	r1, r24
     17a:	74 f0       	brlt	.+28     	; 0x198 <app_main+0xd6>
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 ef       	ldi	r20, 0xF0	; 240
     182:	51 e4       	ldi	r21, 0x41	; 65
     184:	c7 01       	movw	r24, r14
     186:	b6 01       	movw	r22, r12
     188:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__gesf2>
     18c:	18 16       	cp	r1, r24
     18e:	24 f4       	brge	.+8      	; 0x198 <app_main+0xd6>
			{
				state = MORE_THAN_30_CM;
     190:	84 e0       	ldi	r24, 0x04	; 4
     192:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
     196:	6a c0       	rjmp	.+212    	; 0x26c <app_main+0x1aa>
			}
			else if(obstcaleDistance <= 30 && obstcaleDistance > 20)
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 ef       	ldi	r20, 0xF0	; 240
     19e:	51 e4       	ldi	r21, 0x41	; 65
     1a0:	c7 01       	movw	r24, r14
     1a2:	b6 01       	movw	r22, r12
     1a4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__cmpsf2>
     1a8:	18 16       	cp	r1, r24
     1aa:	74 f0       	brlt	.+28     	; 0x1c8 <app_main+0x106>
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 ea       	ldi	r20, 0xA0	; 160
     1b2:	51 e4       	ldi	r21, 0x41	; 65
     1b4:	c7 01       	movw	r24, r14
     1b6:	b6 01       	movw	r22, r12
     1b8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__gesf2>
     1bc:	18 16       	cp	r1, r24
     1be:	24 f4       	brge	.+8      	; 0x1c8 <app_main+0x106>
			{
				state = MORE_THAN_20_CM;
     1c0:	85 e0       	ldi	r24, 0x05	; 5
     1c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
     1c6:	52 c0       	rjmp	.+164    	; 0x26c <app_main+0x1aa>
			}
			else if(obstcaleDistance < 20)
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 ea       	ldi	r20, 0xA0	; 160
     1ce:	51 e4       	ldi	r21, 0x41	; 65
     1d0:	c7 01       	movw	r24, r14
     1d2:	b6 01       	movw	r22, r12
     1d4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__cmpsf2>
     1d8:	88 23       	and	r24, r24
     1da:	0c f0       	brlt	.+2      	; 0x1de <app_main+0x11c>
     1dc:	47 c0       	rjmp	.+142    	; 0x26c <app_main+0x1aa>
			{
				state = LESS_THAN_20_CM;
     1de:	86 e0       	ldi	r24, 0x06	; 6
     1e0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
     1e4:	43 c0       	rjmp	.+134    	; 0x26c <app_main+0x1aa>
			
			break;
		}
		case MORE_THAN_70_CM :
		{
			lessThan20Flag = 0;
     1e6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <lessThan20Flag>
			moreThan30Flag = 0;
     1ea:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <moreThan30Flag>
			obstcaleMoreThan70();
     1ee:	0e 94 01 02 	call	0x402	; 0x402 <obstcaleMoreThan70>
			state = CAR_SCANING;
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
     1f8:	39 c0       	rjmp	.+114    	; 0x26c <app_main+0x1aa>
		}
		case MORE_THAN_30_CM:
		{
			moreThan70Flag = 0;
     1fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <moreThan70Flag>
			lessThan20Flag = 0;
     1fe:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <lessThan20Flag>
			obstcaleMoreThan30();
     202:	0e 94 33 02 	call	0x466	; 0x466 <obstcaleMoreThan30>
			state = CAR_SCANING;
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
     20c:	2f c0       	rjmp	.+94     	; 0x26c <app_main+0x1aa>
		}
		
		case MORE_THAN_20_CM:
		{
			moreThan70Flag = 0;
     20e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <moreThan70Flag>
			lessThan20Flag = 0;
     212:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <lessThan20Flag>
			moreThan30Flag = 0;
     216:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <moreThan30Flag>
			obstcaleMoreThan20();
     21a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <obstcaleMoreThan20>
			state = CAR_SCANING;
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
     224:	23 c0       	rjmp	.+70     	; 0x26c <app_main+0x1aa>
		}
		
		
		case LESS_THAN_20_CM:
		{
			moreThan30Flag = 0;
     226:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <moreThan30Flag>
			moreThan70Flag = 0;
     22a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <moreThan70Flag>
			obstcaleLessThan20();
     22e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <obstcaleLessThan20>
			state = CAR_SCANING;
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
     238:	19 c0       	rjmp	.+50     	; 0x26c <app_main+0x1aa>
		}
		
		
		case STOP:
		{
			moreThan70Flag = 0;
     23a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <moreThan70Flag>
			lessThan20Flag = 0;
     23e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <lessThan20Flag>
			moreThan30Flag = 0;
     242:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <moreThan30Flag>
			Car_Stop();
     246:	0e 94 ab 02 	call	0x556	; 0x556 <Car_Stop>
			break;
     24a:	10 c0       	rjmp	.+32     	; 0x26c <app_main+0x1aa>
		}
		
		case STATE_IDLE:
		{
			LCD_SetCursor(0,0);
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
			LCD_WriteString((Uchar8_t*)"Press Key 1");
     254:	85 e7       	ldi	r24, 0x75	; 117
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
			LCD_SetCursor(1,0);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
			LCD_WriteString((Uchar8_t*)"to start");
     264:	81 e8       	ldi	r24, 0x81	; 129
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
			break;
		}
	}
	
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	08 95       	ret

00000276 <setDefaultRotation>:



void setDefaultRotation()
{
	LCD_Clear();
     276:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_Clear>
	LCD_SetCursor(0,0);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
     282:	8a e8       	ldi	r24, 0x8A	; 138
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	LCD_SetCursor(1,0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Right");
     292:	88 e9       	ldi	r24, 0x98	; 152
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	TMR_intDelay_ms(5000);
     29a:	88 e8       	ldi	r24, 0x88	; 136
     29c:	93 e1       	ldi	r25, 0x13	; 19
     29e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <TMR_intDelay_ms>
	
	while(u8_g_timeOut != 1)
     2a2:	31 c0       	rjmp	.+98     	; 0x306 <setDefaultRotation+0x90>
	{
		PUSH_BTN_read_state(0,&rotationBtnState);
     2a4:	69 e0       	ldi	r22, 0x09	; 9
     2a6:	71 e0       	ldi	r23, 0x01	; 1
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 8d 05 	call	0xb1a	; 0xb1a <PUSH_BTN_read_state>
		if(rotationBtnState == PUSH_BTN_STATE_RELEASED)
     2ae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rotationBtnState>
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	41 f5       	brne	.+80     	; 0x306 <setDefaultRotation+0x90>
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <setDefaultRotation+0x4c>
		{
			while(rotationBtnState == PUSH_BTN_STATE_RELEASED)
			{
				PUSH_BTN_read_state(0,&rotationBtnState);
     2b8:	69 e0       	ldi	r22, 0x09	; 9
     2ba:	71 e0       	ldi	r23, 0x01	; 1
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 8d 05 	call	0xb1a	; 0xb1a <PUSH_BTN_read_state>
	while(u8_g_timeOut != 1)
	{
		PUSH_BTN_read_state(0,&rotationBtnState);
		if(rotationBtnState == PUSH_BTN_STATE_RELEASED)
		{
			while(rotationBtnState == PUSH_BTN_STATE_RELEASED)
     2c2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rotationBtnState>
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	b9 f3       	breq	.-18     	; 0x2b8 <setDefaultRotation+0x42>
			{
				PUSH_BTN_read_state(0,&rotationBtnState);
			}
			if(rotationFlag == 0)
     2ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rotationFlag>
     2ce:	81 11       	cpse	r24, r1
     2d0:	0d c0       	rjmp	.+26     	; 0x2ec <setDefaultRotation+0x76>
			{
				rotationFlag = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rotationFlag>
				rotation = ROTATION_L;
     2d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Left ");
     2e2:	8e e9       	ldi	r24, 0x9E	; 158
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
     2ea:	0d c0       	rjmp	.+26     	; 0x306 <setDefaultRotation+0x90>
				
			}
			else if(rotationFlag == 1)
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	59 f4       	brne	.+22     	; 0x306 <setDefaultRotation+0x90>
			{
				rotationFlag = 0;
     2f0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rotationFlag>
				rotation = ROTATION_R;
     2f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Right ");
     2fe:	84 ea       	ldi	r24, 0xA4	; 164
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
	LCD_SetCursor(1,0);
	LCD_WriteString((Uchar8_t*)"Right");
	TMR_intDelay_ms(5000);
	
	while(u8_g_timeOut != 1)
     306:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_timeOut>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	59 f6       	brne	.-106    	; 0x2a4 <setDefaultRotation+0x2e>
				LCD_SetCursor(1,0);
				LCD_WriteString((Uchar8_t*)"Right ");
			}
		}
	}
	u8_g_timeOut = 0;
     30e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u8_g_timeOut>
	TMR_intDelay_ms(2000);
     312:	80 ed       	ldi	r24, 0xD0	; 208
     314:	97 e0       	ldi	r25, 0x07	; 7
     316:	0e 94 ba 0c 	call	0x1974	; 0x1974 <TMR_intDelay_ms>
	while(u8_g_timeOut !=1);
     31a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_timeOut>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	e1 f7       	brne	.-8      	; 0x31a <setDefaultRotation+0xa4>
	LCD_Clear();
     322:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_Clear>
	u8_g_timeOut = 0;
     326:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u8_g_timeOut>
     32a:	08 95       	ret

0000032c <LCD_update>:
	}
	
	
}
void LCD_update(EN_speed en_a_speed,EN_direction en_a_direction,float64_t f64_a_distance)
{
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	d8 2f       	mov	r29, r24
     33a:	c6 2f       	mov	r28, r22
     33c:	69 01       	movw	r12, r18
     33e:	7a 01       	movw	r14, r20
	
	
	LCD_SetCursor(0,0);
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Speed:");
     348:	8b ea       	ldi	r24, 0xAB	; 171
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
    LCD_SetCursor(0,7);
     350:	67 e0       	ldi	r22, 0x07	; 7
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	if(en_a_speed == SPEED_0 )
     358:	d1 11       	cpse	r29, r1
     35a:	05 c0       	rjmp	.+10     	; 0x366 <LCD_update+0x3a>
	{
		LCD_WriteString((Uchar8_t*)"00% ");
     35c:	82 eb       	ldi	r24, 0xB2	; 178
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
     364:	0b c0       	rjmp	.+22     	; 0x37c <LCD_update+0x50>
	}
	else if (en_a_speed == SPEED_30)
     366:	d1 30       	cpi	r29, 0x01	; 1
     368:	29 f4       	brne	.+10     	; 0x374 <LCD_update+0x48>
	{
		LCD_WriteString((Uchar8_t*)"30% ");
     36a:	87 eb       	ldi	r24, 0xB7	; 183
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
     372:	04 c0       	rjmp	.+8      	; 0x37c <LCD_update+0x50>
	}
	else 
	{
		LCD_WriteString((Uchar8_t*)"50% ");
     374:	8c eb       	ldi	r24, 0xBC	; 188
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	}
	LCD_SetCursor(0,11);
     37c:	6b e0       	ldi	r22, 0x0B	; 11
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dir:");
     384:	81 ec       	ldi	r24, 0xC1	; 193
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	LCD_SetCursor(0,15);
     38c:	6f e0       	ldi	r22, 0x0F	; 15
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	if(en_a_direction == DIRECTION_F)
     394:	c1 11       	cpse	r28, r1
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <LCD_update+0x76>
	{
		LCD_WriteString((Uchar8_t*)"F");
     398:	86 ec       	ldi	r24, 0xC6	; 198
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
     3a0:	12 c0       	rjmp	.+36     	; 0x3c6 <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_B)
     3a2:	c1 30       	cpi	r28, 0x01	; 1
     3a4:	29 f4       	brne	.+10     	; 0x3b0 <LCD_update+0x84>
	{
		LCD_WriteString((Uchar8_t*)"B");
     3a6:	88 ec       	ldi	r24, 0xC8	; 200
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
     3ae:	0b c0       	rjmp	.+22     	; 0x3c6 <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_R)
     3b0:	c2 30       	cpi	r28, 0x02	; 2
     3b2:	29 f4       	brne	.+10     	; 0x3be <LCD_update+0x92>
	{
		LCD_WriteString((Uchar8_t*)"R");
     3b4:	8a ec       	ldi	r24, 0xCA	; 202
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <LCD_update+0x9a>
	}
    else
	{
		LCD_WriteString((Uchar8_t*)"S");
     3be:	8c ec       	ldi	r24, 0xCC	; 204
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	}
	
	LCD_SetCursor(1,0);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dist:");
     3ce:	8e ec       	ldi	r24, 0xCE	; 206
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	LCD_SetCursor(1,5);
     3d6:	65 e0       	ldi	r22, 0x05	; 5
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	LCD_WriteNumber(f64_a_distance);
     3de:	c7 01       	movw	r24, r14
     3e0:	b6 01       	movw	r22, r12
     3e2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__fixsfsi>
     3e6:	cb 01       	movw	r24, r22
     3e8:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_WriteNumber>
	LCD_WriteString((Uchar8_t*)" Cm");
     3ec:	84 ed       	ldi	r24, 0xD4	; 212
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
	
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	08 95       	ret

00000402 <obstcaleMoreThan70>:
}



void obstcaleMoreThan70()
{
     402:	cf 93       	push	r28
	
	
	if(moreThan70Flag == 0)
     404:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <moreThan70Flag>
     408:	81 11       	cpse	r24, r1
     40a:	0f c0       	rjmp	.+30     	; 0x42a <obstcaleMoreThan70+0x28>
	{
		moreThan70Flag = 1;
     40c:	c1 e0       	ldi	r28, 0x01	; 1
     40e:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <moreThan70Flag>
		DCM_MoveForward(30);
     412:	8e e1       	ldi	r24, 0x1E	; 30
     414:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DCM_MoveForward>
		speed = SPEED_30;
     418:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <speed>
		direction = DIRECTION_F;
     41c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <direction>
		TMR_intDelay_ms(5000);
     420:	88 e8       	ldi	r24, 0x88	; 136
     422:	93 e1       	ldi	r25, 0x13	; 19
     424:	0e 94 ba 0c 	call	0x1974	; 0x1974 <TMR_intDelay_ms>
     428:	0e c0       	rjmp	.+28     	; 0x446 <obstcaleMoreThan70+0x44>
		
	}
	else if(moreThan70Flag == 1 && u8_g_timeOut == 1)
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	61 f4       	brne	.+24     	; 0x446 <obstcaleMoreThan70+0x44>
     42e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_timeOut>
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	41 f4       	brne	.+16     	; 0x446 <obstcaleMoreThan70+0x44>
	{
		
		DCM_MoveForward(50);
     436:	82 e3       	ldi	r24, 0x32	; 50
     438:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DCM_MoveForward>
		speed = SPEED_50;
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <speed>
		u8_g_timeOut =0;
     442:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u8_g_timeOut>
	}
 
    LCD_update(speed,direction,obstcaleDistance);
     446:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <obstcaleDistance>
     44a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <obstcaleDistance+0x1>
     44e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <obstcaleDistance+0x2>
     452:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <obstcaleDistance+0x3>
     456:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <direction>
     45a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <speed>
     45e:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_update>
}
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <obstcaleMoreThan30>:

void obstcaleMoreThan30()
{
	if(moreThan30Flag == 0 )
     466:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <moreThan30Flag>
     46a:	81 11       	cpse	r24, r1
     46c:	0a c0       	rjmp	.+20     	; 0x482 <obstcaleMoreThan30+0x1c>
	{
		DCM_MoveForward(30);
     46e:	8e e1       	ldi	r24, 0x1E	; 30
     470:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DCM_MoveForward>
		speed = SPEED_30;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <speed>
		direction = DIRECTION_F;
     47a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <direction>
		moreThan30Flag = 1;
     47e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <moreThan30Flag>
	}
	LCD_update(speed,direction,obstcaleDistance);
     482:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <obstcaleDistance>
     486:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <obstcaleDistance+0x1>
     48a:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <obstcaleDistance+0x2>
     48e:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <obstcaleDistance+0x3>
     492:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <direction>
     496:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <speed>
     49a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_update>
     49e:	08 95       	ret

000004a0 <obstcaleMoreThan20>:
}


void obstcaleMoreThan20()
{
	DCM_vdStopDCM();
     4a0:	0e 94 04 05 	call	0xa08	; 0xa08 <DCM_vdStopDCM>
	LCD_update(SPEED_0,DIRECTION_S,obstcaleDistance);
     4a4:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <obstcaleDistance>
     4a8:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <obstcaleDistance+0x1>
     4ac:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <obstcaleDistance+0x2>
     4b0:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <obstcaleDistance+0x3>
     4b4:	63 e0       	ldi	r22, 0x03	; 3
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_update>
	TMR_intDelay_ms(1000);
     4bc:	88 ee       	ldi	r24, 0xE8	; 232
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <TMR_intDelay_ms>
	while(u8_g_timeOut == 0 );
     4c4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_timeOut>
     4c8:	88 23       	and	r24, r24
     4ca:	e1 f3       	breq	.-8      	; 0x4c4 <obstcaleMoreThan20+0x24>
	u8_g_timeOut = 0;
     4cc:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u8_g_timeOut>
	
	//rotation
	LCD_update(SPEED_50,DIRECTION_R,obstcaleDistance);
     4d0:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <obstcaleDistance>
     4d4:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <obstcaleDistance+0x1>
     4d8:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <obstcaleDistance+0x2>
     4dc:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <obstcaleDistance+0x3>
     4e0:	62 e0       	ldi	r22, 0x02	; 2
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_update>
	DCM_rotateDCM(rotation,50);	
     4e8:	62 e3       	ldi	r22, 0x32	; 50
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4f0:	0e 94 18 05 	call	0xa30	; 0xa30 <DCM_rotateDCM>
     4f4:	08 95       	ret

000004f6 <obstcaleLessThan20>:
}

void obstcaleLessThan20()
{
	if(lessThan20Flag == 0 )
     4f6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lessThan20Flag>
     4fa:	81 11       	cpse	r24, r1
     4fc:	1c c0       	rjmp	.+56     	; 0x536 <obstcaleLessThan20+0x40>
	{
		DCM_vdStopDCM();
     4fe:	0e 94 04 05 	call	0xa08	; 0xa08 <DCM_vdStopDCM>
		LCD_update(SPEED_0,DIRECTION_S,obstcaleDistance);
     502:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <obstcaleDistance>
     506:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <obstcaleDistance+0x1>
     50a:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <obstcaleDistance+0x2>
     50e:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <obstcaleDistance+0x3>
     512:	63 e0       	ldi	r22, 0x03	; 3
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_update>
		TMR_intDelay_ms(1000);
     51a:	88 ee       	ldi	r24, 0xE8	; 232
     51c:	93 e0       	ldi	r25, 0x03	; 3
     51e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <TMR_intDelay_ms>
		while(u8_g_timeOut == 0 );
     522:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_timeOut>
     526:	88 23       	and	r24, r24
     528:	e1 f3       	breq	.-8      	; 0x522 <obstcaleLessThan20+0x2c>
		u8_g_timeOut = 0;
     52a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u8_g_timeOut>
		lessThan20Flag = 1;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <lessThan20Flag>
     534:	08 95       	ret
	}
	
	else {
		LCD_update(SPEED_30,DIRECTION_B,obstcaleDistance);
     536:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <obstcaleDistance>
     53a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <obstcaleDistance+0x1>
     53e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <obstcaleDistance+0x2>
     542:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <obstcaleDistance+0x3>
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_update>
		DCM_MoveBackward(30);
     54e:	8e e1       	ldi	r24, 0x1E	; 30
     550:	0e 94 6b 05 	call	0xad6	; 0xad6 <DCM_MoveBackward>
     554:	08 95       	ret

00000556 <Car_Stop>:
}


void Car_Stop()
{
	DCM_vdStopDCM();
     556:	0e 94 04 05 	call	0xa08	; 0xa08 <DCM_vdStopDCM>
	LCD_SetCursor(0,0);
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"ROBOT STOPED");
     562:	88 ed       	ldi	r24, 0xD8	; 216
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteString>
     56a:	08 95       	ret

0000056c <KEYPAD_init>:
Description : Initializes Rows as Output and Cols as input and put high logic on each pin
Args        : Void
return      : Void
*/
void KEYPAD_init(void)
{
     56c:	cf 93       	push	r28
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     56e:	c0 e0       	ldi	r28, 0x00	; 0
     570:	0e c0       	rjmp	.+28     	; 0x58e <KEYPAD_init+0x22>
		///* set current row pin direction as output */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],OUTPUT);
		///* set current row pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
     572:	8c 2f       	mov	r24, r28
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9c 01       	movw	r18, r24
     578:	22 0f       	add	r18, r18
     57a:	33 1f       	adc	r19, r19
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	82 0f       	add	r24, r18
     582:	93 1f       	adc	r25, r19
     584:	81 51       	subi	r24, 0x11	; 17
     586:	9f 4f       	sbci	r25, 0xFF	; 255
     588:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_Initpin>
{
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     58c:	cf 5f       	subi	r28, 0xFF	; 255
     58e:	cc 23       	and	r28, r28
     590:	81 f3       	breq	.-32     	; 0x572 <KEYPAD_init+0x6>
     592:	c0 e0       	ldi	r28, 0x00	; 0
     594:	0e c0       	rjmp	.+28     	; 0x5b2 <KEYPAD_init+0x46>
	{
		///* set current col pin direction as input */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
     596:	8c 2f       	mov	r24, r28
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9c 01       	movw	r18, r24
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	82 0f       	add	r24, r18
     5a6:	93 1f       	adc	r25, r19
     5a8:	8b 51       	subi	r24, 0x1B	; 27
     5aa:	9f 4f       	sbci	r25, 0xFF	; 255
     5ac:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_Initpin>
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
	}
	
	/* loop from 0 to number of cols defined in config file*/
	for(u8_loc_colsCounter=0;u8_loc_colsCounter<NUMBER_OF_COLS;u8_loc_colsCounter++)
     5b0:	cf 5f       	subi	r28, 0xFF	; 255
     5b2:	c2 30       	cpi	r28, 0x02	; 2
     5b4:	80 f3       	brcs	.-32     	; 0x596 <KEYPAD_init+0x2a>
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
	}
}
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <KEYPAD_getButton>:
             
Args        : Void
return      : EN_KEYPADKEYS enum holds all possible keys
*/
EN_KEYPAD_KEYS KEYPAD_getButton()
{
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	1f 92       	push	r1
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* initialize pinValue variable to holds pin state*/
	Uchar8_t pinValue = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	89 83       	std	Y+1, r24	; 0x01
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	57 c0       	rjmp	.+174    	; 0x686 <KEYPAD_getButton+0xcc>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
     5d8:	e0 2e       	mov	r14, r16
     5da:	f1 2c       	mov	r15, r1
     5dc:	f7 01       	movw	r30, r14
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	ee 0d       	add	r30, r14
     5e8:	ff 1d       	adc	r31, r15
     5ea:	eb 51       	subi	r30, 0x1B	; 27
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	63 85       	ldd	r22, Z+11	; 0x0b
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	34 c0       	rjmp	.+104    	; 0x664 <KEYPAD_getButton+0xaa>
		{
			/* Get value of current col pin*/
			//DIO_s8GETPinVal (st_keypad_conf.u8_arr_cols[u8_loc_colsCounter] , &pinValue); 
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     5fc:	c1 2e       	mov	r12, r17
     5fe:	d1 2c       	mov	r13, r1
     600:	f6 01       	movw	r30, r12
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	ec 0d       	add	r30, r12
     60c:	fd 1d       	adc	r31, r13
     60e:	eb 51       	subi	r30, 0x1B	; 27
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	ae 01       	movw	r20, r28
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	5f 4f       	sbci	r21, 0xFF	; 255
     618:	61 81       	ldd	r22, Z+1	; 0x01
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	0e 94 95 06 	call	0xd2a	; 0xd2a <DIO_read>
			/* check if pressed*/
			if(pinValue == 0) 
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	81 11       	cpse	r24, r1
     624:	1e c0       	rjmp	.+60     	; 0x662 <KEYPAD_getButton+0xa8>
     626:	10 c0       	rjmp	.+32     	; 0x648 <KEYPAD_getButton+0x8e>
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     628:	f6 01       	movw	r30, r12
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	ee 0f       	add	r30, r30
     630:	ff 1f       	adc	r31, r31
     632:	ec 0d       	add	r30, r12
     634:	fd 1d       	adc	r31, r13
     636:	eb 51       	subi	r30, 0x1B	; 27
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	ae 01       	movw	r20, r28
     63c:	4f 5f       	subi	r20, 0xFF	; 255
     63e:	5f 4f       	sbci	r21, 0xFF	; 255
     640:	61 81       	ldd	r22, Z+1	; 0x01
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 95 06 	call	0xd2a	; 0xd2a <DIO_read>
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
			/* check if pressed*/
			if(pinValue == 0) 
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	88 23       	and	r24, r24
     64c:	69 f3       	breq	.-38     	; 0x628 <KEYPAD_getButton+0x6e>
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
				}
				
				/* return current [row][col] position from config array */
				return st_keypad_conf.u8_arr_keys[u8_loc_rowsCounter][u8_loc_colsCounter];
     64e:	c7 01       	movw	r24, r14
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	8b 51       	subi	r24, 0x1B	; 27
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	fc 01       	movw	r30, r24
     65a:	ec 0d       	add	r30, r12
     65c:	fd 1d       	adc	r31, r13
     65e:	87 85       	ldd	r24, Z+15	; 0x0f
     660:	16 c0       	rjmp	.+44     	; 0x68e <KEYPAD_getButton+0xd4>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     662:	1f 5f       	subi	r17, 0xFF	; 255
     664:	12 30       	cpi	r17, 0x02	; 2
     666:	50 f2       	brcs	.-108    	; 0x5fc <KEYPAD_getButton+0x42>
			}
		}
		
		/* write logic high on current row pin */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
     668:	f7 01       	movw	r30, r14
     66a:	ee 0f       	add	r30, r30
     66c:	ff 1f       	adc	r31, r31
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	ee 0d       	add	r30, r14
     674:	ff 1d       	adc	r31, r15
     676:	eb 51       	subi	r30, 0x1B	; 27
     678:	ff 4f       	sbci	r31, 0xFF	; 255
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	63 85       	ldd	r22, Z+11	; 0x0b
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	/* initialize pinValue variable to holds pin state*/
	Uchar8_t pinValue = 1;
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     684:	0f 5f       	subi	r16, 0xFF	; 255
     686:	00 23       	and	r16, r16
     688:	09 f4       	brne	.+2      	; 0x68c <KEYPAD_getButton+0xd2>
     68a:	a6 cf       	rjmp	.-180    	; 0x5d8 <KEYPAD_getButton+0x1e>
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
	}
	
	/* if nothing pressed */
	return KEY_NOTHING;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	08 95       	ret

000006a2 <WriteIns>:

#elif LCD_MODE ==_4_BIT


static void WriteIns(Uchar8_t ins)
{
     6a2:	cf 93       	push	r28
     6a4:	c8 2f       	mov	r28, r24
	DIO_writepinn(RS,LOW);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D7,GET_BIT(ins,P7));
     6ae:	6c 2f       	mov	r22, r28
     6b0:	66 1f       	adc	r22, r22
     6b2:	66 27       	eor	r22, r22
     6b4:	66 1f       	adc	r22, r22
     6b6:	87 e0       	ldi	r24, 0x07	; 7
     6b8:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(ins,P6));
     6bc:	c6 fb       	bst	r28, 6
     6be:	66 27       	eor	r22, r22
     6c0:	60 f9       	bld	r22, 0
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(ins,P5));
     6c8:	c5 fb       	bst	r28, 5
     6ca:	66 27       	eor	r22, r22
     6cc:	60 f9       	bld	r22, 0
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(ins,P4));
     6d4:	c4 fb       	bst	r28, 4
     6d6:	66 27       	eor	r22, r22
     6d8:	60 f9       	bld	r22, 0
     6da:	84 e0       	ldi	r24, 0x04	; 4
     6dc:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(EN,HIGH);
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e8:	89 ef       	ldi	r24, 0xF9	; 249
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <WriteIns+0x4a>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <WriteIns+0x50>
     6f2:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
     6fc:	89 ef       	ldi	r24, 0xF9	; 249
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <WriteIns+0x5e>
     704:	00 c0       	rjmp	.+0      	; 0x706 <WriteIns+0x64>
     706:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(D7,GET_BIT(ins,P3));
     708:	c3 fb       	bst	r28, 3
     70a:	66 27       	eor	r22, r22
     70c:	60 f9       	bld	r22, 0
     70e:	87 e0       	ldi	r24, 0x07	; 7
     710:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(ins,P2));
     714:	c2 fb       	bst	r28, 2
     716:	66 27       	eor	r22, r22
     718:	60 f9       	bld	r22, 0
     71a:	86 e0       	ldi	r24, 0x06	; 6
     71c:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(ins,P1));
     720:	c1 fb       	bst	r28, 1
     722:	66 27       	eor	r22, r22
     724:	60 f9       	bld	r22, 0
     726:	85 e0       	ldi	r24, 0x05	; 5
     728:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(ins,P0));
     72c:	6c 2f       	mov	r22, r28
     72e:	61 70       	andi	r22, 0x01	; 1
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(EN,HIGH);
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
     73e:	89 ef       	ldi	r24, 0xF9	; 249
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <WriteIns+0xa0>
     746:	00 c0       	rjmp	.+0      	; 0x748 <WriteIns+0xa6>
     748:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
     752:	89 ef       	ldi	r24, 0xF9	; 249
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <WriteIns+0xb4>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <WriteIns+0xba>
     75c:	00 00       	nop
	_delay_ms(1);
}
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <WriteData>:
static void WriteData(Uchar8_t data)
{
     762:	cf 93       	push	r28
     764:	c8 2f       	mov	r28, r24
	
	DIO_writepinn(RS,HIGH);
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D7,GET_BIT(data,P7));
     76e:	6c 2f       	mov	r22, r28
     770:	66 1f       	adc	r22, r22
     772:	66 27       	eor	r22, r22
     774:	66 1f       	adc	r22, r22
     776:	87 e0       	ldi	r24, 0x07	; 7
     778:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(data,P6));
     77c:	c6 fb       	bst	r28, 6
     77e:	66 27       	eor	r22, r22
     780:	60 f9       	bld	r22, 0
     782:	86 e0       	ldi	r24, 0x06	; 6
     784:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(data,P5));
     788:	c5 fb       	bst	r28, 5
     78a:	66 27       	eor	r22, r22
     78c:	60 f9       	bld	r22, 0
     78e:	85 e0       	ldi	r24, 0x05	; 5
     790:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(data,P4));
     794:	c4 fb       	bst	r28, 4
     796:	66 27       	eor	r22, r22
     798:	60 f9       	bld	r22, 0
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>

	DIO_writepinn(EN,HIGH);
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
     7a8:	89 ef       	ldi	r24, 0xF9	; 249
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <WriteData+0x4a>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <WriteData+0x50>
     7b2:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
     7bc:	89 ef       	ldi	r24, 0xF9	; 249
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <WriteData+0x5e>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <WriteData+0x64>
     7c6:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(D7,GET_BIT(data,P3));
     7c8:	c3 fb       	bst	r28, 3
     7ca:	66 27       	eor	r22, r22
     7cc:	60 f9       	bld	r22, 0
     7ce:	87 e0       	ldi	r24, 0x07	; 7
     7d0:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(data,P2));
     7d4:	c2 fb       	bst	r28, 2
     7d6:	66 27       	eor	r22, r22
     7d8:	60 f9       	bld	r22, 0
     7da:	86 e0       	ldi	r24, 0x06	; 6
     7dc:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(data,P1));
     7e0:	c1 fb       	bst	r28, 1
     7e2:	66 27       	eor	r22, r22
     7e4:	60 f9       	bld	r22, 0
     7e6:	85 e0       	ldi	r24, 0x05	; 5
     7e8:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(data,P0));
     7ec:	6c 2f       	mov	r22, r28
     7ee:	61 70       	andi	r22, 0x01	; 1
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
	DIO_writepinn(EN,HIGH);
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
     7fe:	89 ef       	ldi	r24, 0xF9	; 249
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
     812:	89 ef       	ldi	r24, 0xF9	; 249
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81c:	00 00       	nop
	_delay_ms(1);
}
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <LCD_WriteChar>:
#endif

//should be send address in ddram befor this function
void LCD_WriteChar(Uchar8_t ch)
{
	WriteData(ch);
     822:	0e 94 b1 03 	call	0x762	; 0x762 <WriteData>
     826:	08 95       	ret

00000828 <LCD_WriteString>:
}
void LCD_WriteString(Uchar8_t*str)
{
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	8c 01       	movw	r16, r24
	Uchar8_t i;
	for (i=0;str[i];i++)
     830:	c0 e0       	ldi	r28, 0x00	; 0
     832:	03 c0       	rjmp	.+6      	; 0x83a <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
     834:	0e 94 11 04 	call	0x822	; 0x822 <LCD_WriteChar>
	WriteData(ch);
}
void LCD_WriteString(Uchar8_t*str)
{
	Uchar8_t i;
	for (i=0;str[i];i++)
     838:	cf 5f       	subi	r28, 0xFF	; 255
     83a:	f8 01       	movw	r30, r16
     83c:	ec 0f       	add	r30, r28
     83e:	f1 1d       	adc	r31, r1
     840:	80 81       	ld	r24, Z
     842:	81 11       	cpse	r24, r1
     844:	f7 cf       	rjmp	.-18     	; 0x834 <LCD_WriteString+0xc>
	{
		LCD_WriteChar(str[i]);
	}
	
}
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <LCD_SetCursor>:
void LCD_SetCursor(Uchar8_t line,Uchar8_t cell)
{
	if (line==0)
     84e:	81 11       	cpse	r24, r1
     850:	05 c0       	rjmp	.+10     	; 0x85c <LCD_SetCursor+0xe>
	{
		WriteIns(0x80|cell);
     852:	86 2f       	mov	r24, r22
     854:	80 68       	ori	r24, 0x80	; 128
     856:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
     85a:	08 95       	ret
	}
	else if (line ==1)
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	21 f4       	brne	.+8      	; 0x868 <__stack+0x9>
	{
		WriteIns(0x80+0x40+cell);
     860:	80 ec       	ldi	r24, 0xC0	; 192
     862:	86 0f       	add	r24, r22
     864:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
     868:	08 95       	ret

0000086a <LCD_Clear>:
	}
	
}
void LCD_Clear(void)
{
	WriteIns(CLR_INS);
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
     870:	89 ef       	ldi	r24, 0xF9	; 249
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <LCD_Clear+0xa>
     878:	00 c0       	rjmp	.+0      	; 0x87a <LCD_Clear+0x10>
     87a:	00 00       	nop
     87c:	08 95       	ret

0000087e <LCD_WriteNumber>:
	_delay_ms(1);
}


void LCD_WriteNumber(Sint32_t num)
{
     87e:	ef 92       	push	r14
     880:	ff 92       	push	r15
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	2a 97       	sbiw	r28, 0x0a	; 10
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	7c 01       	movw	r14, r24
	Uchar8_t str[10],i=0,j;
	if (num==0)
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	21 f4       	brne	.+8      	; 0x8a6 <LCD_WriteNumber+0x28>
	{
		LCD_WriteChar('0');
     89e:	80 e3       	ldi	r24, 0x30	; 48
     8a0:	0e 94 11 04 	call	0x822	; 0x822 <LCD_WriteChar>
     8a4:	2d c0       	rjmp	.+90     	; 0x900 <LCD_WriteNumber+0x82>
		return;
	}
	if (num<0)
     8a6:	99 23       	and	r25, r25
     8a8:	34 f4       	brge	.+12     	; 0x8b6 <LCD_WriteNumber+0x38>
	{
		num=num*(-1);
     8aa:	f1 94       	neg	r15
     8ac:	e1 94       	neg	r14
     8ae:	f1 08       	sbc	r15, r1
		LCD_WriteChar('-');
     8b0:	8d e2       	ldi	r24, 0x2D	; 45
     8b2:	0e 94 11 04 	call	0x822	; 0x822 <LCD_WriteChar>
	_delay_ms(1);
}


void LCD_WriteNumber(Sint32_t num)
{
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	10 c0       	rjmp	.+32     	; 0x8da <LCD_WriteNumber+0x5c>
		LCD_WriteChar('-');
	}
	
	while(num)
	{
		str[i]=num%10 +'0';
     8ba:	c7 01       	movw	r24, r14
     8bc:	6a e0       	ldi	r22, 0x0A	; 10
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	0e 94 31 10 	call	0x2062	; 0x2062 <__divmodhi4>
     8c4:	e1 e0       	ldi	r30, 0x01	; 1
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	ec 0f       	add	r30, r28
     8ca:	fd 1f       	adc	r31, r29
     8cc:	e1 0f       	add	r30, r17
     8ce:	f1 1d       	adc	r31, r1
     8d0:	80 5d       	subi	r24, 0xD0	; 208
     8d2:	80 83       	st	Z, r24
		i++;
     8d4:	1f 5f       	subi	r17, 0xFF	; 255
		num=num/10;
     8d6:	e6 2e       	mov	r14, r22
     8d8:	f7 2e       	mov	r15, r23
	{
		num=num*(-1);
		LCD_WriteChar('-');
	}
	
	while(num)
     8da:	e1 14       	cp	r14, r1
     8dc:	f1 04       	cpc	r15, r1
     8de:	69 f7       	brne	.-38     	; 0x8ba <LCD_WriteNumber+0x3c>
     8e0:	0d c0       	rjmp	.+26     	; 0x8fc <LCD_WriteNumber+0x7e>
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
	{
		LCD_WriteChar(str[j-1]);
     8e2:	e1 2f       	mov	r30, r17
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	8c 0f       	add	r24, r28
     8ee:	9d 1f       	adc	r25, r29
     8f0:	e8 0f       	add	r30, r24
     8f2:	f9 1f       	adc	r31, r25
     8f4:	80 81       	ld	r24, Z
     8f6:	0e 94 11 04 	call	0x822	; 0x822 <LCD_WriteChar>
	{
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
     8fa:	11 50       	subi	r17, 0x01	; 1
     8fc:	11 11       	cpse	r17, r1
     8fe:	f1 cf       	rjmp	.-30     	; 0x8e2 <LCD_WriteNumber+0x64>
	{
		LCD_WriteChar(str[j-1]);
	}

}
     900:	2a 96       	adiw	r28, 0x0a	; 10
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	08 95       	ret

00000918 <LCD_PinsInit>:
void LCD_PinsInit ()
{
	DIO_initpinn(RS,OUTPUT);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
	DIO_initpinn(EN,OUTPUT);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
	DIO_initpinn(RW,OUTPUT);
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
	DIO_initpinn(D4,OUTPUT);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
	DIO_initpinn(D5,OUTPUT);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	85 e0       	ldi	r24, 0x05	; 5
     93c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
	DIO_initpinn(D6,OUTPUT);
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
	DIO_initpinn(D7,OUTPUT);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	87 e0       	ldi	r24, 0x07	; 7
     94c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
     950:	08 95       	ret

00000952 <LCD_Init>:



void LCD_Init(void)
{
	LCD_PinsInit();
     952:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_PinsInit>
     956:	87 ea       	ldi	r24, 0xA7	; 167
     958:	91 e6       	ldi	r25, 0x61	; 97
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <LCD_Init+0x8>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <LCD_Init+0xe>
     960:	00 00       	nop
	_delay_ms(100);
	WriteIns(0x02);
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
	WriteIns(0x28);//5*7 2 lines
     968:	88 e2       	ldi	r24, 0x28	; 40
     96a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
	WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
     96e:	8c e0       	ldi	r24, 0x0C	; 12
     970:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
	WriteIns(0x01);//clear screen
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
     97a:	89 ef       	ldi	r24, 0xF9	; 249
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <LCD_Init+0x2c>
     982:	00 c0       	rjmp	.+0      	; 0x984 <LCD_Init+0x32>
     984:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);// increment DDRAM address, no shift
     986:	86 e0       	ldi	r24, 0x06	; 6
     988:	0e 94 51 03 	call	0x6a2	; 0x6a2 <WriteIns>
     98c:	08 95       	ret

0000098e <DCM_motorInit>:
}

/****************************************************************************************************************************************/
void DCM_updateStopFlag(void)
{
	DCM_g_stopFlag = TRUE;
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	b9 f4       	brne	.+46     	; 0x9ca <DCM_motorInit+0x3c>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	1b c0       	rjmp	.+54     	; 0x9d6 <DCM_motorInit+0x48>
     9a0:	c1 2f       	mov	r28, r17
     9a2:	d0 e0       	ldi	r29, 0x00	; 0
     9a4:	ce 01       	movw	r24, r28
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	c8 0f       	add	r28, r24
     9ac:	d9 1f       	adc	r29, r25
     9ae:	ce 0d       	add	r28, r14
     9b0:	df 1d       	adc	r29, r15
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	6a 81       	ldd	r22, Y+2	; 0x02
     9b6:	88 81       	ld	r24, Y
     9b8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_InitDCM>
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	6a 81       	ldd	r22, Y+2	; 0x02
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_InitDCM>
     9c6:	1f 5f       	subi	r17, 0xFF	; 255
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <DCM_motorInit+0x40>
     9ca:	7c 01       	movw	r14, r24
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	12 30       	cpi	r17, 0x02	; 2
     9d0:	38 f3       	brcs	.-50     	; 0x9a0 <DCM_motorInit+0x12>
     9d2:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <TIMER0_initPWM>
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	08 95       	ret

000009e2 <DCM_changeDCMDirection>:
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	79 f0       	breq	.+30     	; 0xa04 <DCM_changeDCMDirection+0x22>
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	fb 01       	movw	r30, r22
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	6e 0f       	add	r22, r30
     9f0:	7f 1f       	adc	r23, r31
     9f2:	fc 01       	movw	r30, r24
     9f4:	e6 0f       	add	r30, r22
     9f6:	f7 1f       	adc	r31, r23
     9f8:	60 81       	ld	r22, Z
     9fa:	82 81       	ldd	r24, Z+2	; 0x02
     9fc:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_toggle>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	08 95       	ret
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	08 95       	ret

00000a08 <DCM_vdStopDCM>:
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
     a12:	41 e0       	ldi	r20, 0x01	; 1
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
     a1c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <TIMER0_stop>
     a20:	08 95       	ret

00000a22 <DCM_u8SetDutyCycleOfPWM>:
     a22:	85 36       	cpi	r24, 0x65	; 101
     a24:	10 f0       	brcs	.+4      	; 0xa2a <DCM_u8SetDutyCycleOfPWM+0x8>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	08 95       	ret
     a2a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <TIMER0_setPwm>
     a2e:	08 95       	ret

00000a30 <DCM_rotateDCM>:
/****************************************************************************************************************************************/
/* you need to specify which motor you want to rotate*/
EN_DCM_ERROR_T DCM_rotateDCM(EN_DCM_MOTORSIDE DCM_l_motorNumber, u16 DCM_a_rotateSpeed)
{
	
	if(DCM_l_motorNumber == MOTOR_RIGHT)
     a30:	81 11       	cpse	r24, r1
     a32:	1a c0       	rjmp	.+52     	; 0xa68 <DCM_rotateDCM+0x38>
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	81 e6       	ldi	r24, 0x61	; 97
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DCM_changeDCMDirection>
		// High delay to see it on simulation
		TMR_intDelay_ms(4000);
     a3e:	80 ea       	ldi	r24, 0xA0	; 160
     a40:	9f e0       	ldi	r25, 0x0F	; 15
     a42:	0e 94 ba 0c 	call	0x1974	; 0x1974 <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     a46:	82 e3       	ldi	r24, 0x32	; 50
     a48:	0e 94 11 05 	call	0xa22	; 0xa22 <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     a4c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_timeOut>
     a50:	88 23       	and	r24, r24
     a52:	e1 f3       	breq	.-8      	; 0xa4c <DCM_rotateDCM+0x1c>
		TIMER0_stop();
     a54:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <TIMER0_stop>
		u8_g_timeOut = 0;
     a58:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);	
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	81 e6       	ldi	r24, 0x61	; 97
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DCM_changeDCMDirection>
     a66:	08 95       	ret
	}
	else
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	81 e6       	ldi	r24, 0x61	; 97
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DCM_changeDCMDirection>
		TMR_intDelay_ms(620);
     a72:	8c e6       	ldi	r24, 0x6C	; 108
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	0e 94 ba 0c 	call	0x1974	; 0x1974 <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     a7a:	82 e3       	ldi	r24, 0x32	; 50
     a7c:	0e 94 11 05 	call	0xa22	; 0xa22 <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     a80:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_timeOut>
     a84:	88 23       	and	r24, r24
     a86:	e1 f3       	breq	.-8      	; 0xa80 <DCM_rotateDCM+0x50>
		TIMER0_stop();
     a88:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <TIMER0_stop>
		u8_g_timeOut = 0;
     a8c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);		
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	81 e6       	ldi	r24, 0x61	; 97
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DCM_changeDCMDirection>
	}

}
     a9a:	08 95       	ret

00000a9c <DCM_MoveForward>:

/****************************************************************************************************************************************/

void DCM_MoveForward(u8 u8_a_speed)
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     aa0:	0e 94 11 05 	call	0xa22	; 0xa22 <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_HIGH);
     aa4:	c1 e6       	ldi	r28, 0x61	; 97
     aa6:	d0 e0       	ldi	r29, 0x00	; 0
     aa8:	68 81       	ld	r22, Y
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	8a 81       	ldd	r24, Y+2	; 0x02
     aae:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_LOW);
     ab2:	69 81       	ldd	r22, Y+1	; 0x01
     ab4:	41 e0       	ldi	r20, 0x01	; 1
     ab6:	8a 81       	ldd	r24, Y+2	; 0x02
     ab8:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_HIGH);
     abc:	6b 81       	ldd	r22, Y+3	; 0x03
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	8d 81       	ldd	r24, Y+5	; 0x05
     ac2:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_LOW);
     ac6:	6c 81       	ldd	r22, Y+4	; 0x04
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	8d 81       	ldd	r24, Y+5	; 0x05
     acc:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <DCM_MoveBackward>:


void DCM_MoveBackward(u8 u8_a_speed)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     ada:	0e 94 11 05 	call	0xa22	; 0xa22 <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_LOW);
     ade:	c1 e6       	ldi	r28, 0x61	; 97
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
     ae2:	68 81       	ld	r22, Y
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_HIGH);
     aec:	69 81       	ldd	r22, Y+1	; 0x01
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	8a 81       	ldd	r24, Y+2	; 0x02
     af2:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_LOW);
     af6:	6b 81       	ldd	r22, Y+3	; 0x03
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_HIGH);
     b00:	6c 81       	ldd	r22, Y+4	; 0x04
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	8d 81       	ldd	r24, Y+5	; 0x05
     b06:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <PUSH_BTN_intialize>:

extern const ST_PUSH_BTN_t A_pbConfig[NUMBER_OF_PUSH_BUTTONS];

void PUSH_BTN_intialize()
{
	DIO_initpinn(PINC4,INPULL);
     b10:	62 e0       	ldi	r22, 0x02	; 2
     b12:	84 e1       	ldi	r24, 0x14	; 20
     b14:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
     b18:	08 95       	ret

00000b1a <PUSH_BTN_read_state>:
}

void PUSH_BTN_read_state(Uchar8_t btnNumber, EN_PUSH_BTN_state_t *btn_state)
{
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	1f 92       	push	r1
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	7b 01       	movw	r14, r22

		en_dio_value_t pin_logic_status = DIO_LOW;
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	99 83       	std	Y+1, r25	; 0x01
		DIO_read(A_pbConfig[btnNumber].PUSH_BTN_pin.dio_port,A_pbConfig[btnNumber].PUSH_BTN_pin.dio_pin,&pin_logic_status);
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	8c 01       	movw	r16, r24
     b36:	00 0f       	add	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	00 0f       	add	r16, r16
     b3c:	11 1f       	adc	r17, r17
     b3e:	00 0f       	add	r16, r16
     b40:	11 1f       	adc	r17, r17
     b42:	08 1b       	sub	r16, r24
     b44:	19 0b       	sbc	r17, r25
     b46:	0a 50       	subi	r16, 0x0A	; 10
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	ae 01       	movw	r20, r28
     b4c:	4f 5f       	subi	r20, 0xFF	; 255
     b4e:	5f 4f       	sbci	r21, 0xFF	; 255
     b50:	f8 01       	movw	r30, r16
     b52:	61 81       	ldd	r22, Z+1	; 0x01
     b54:	80 81       	ld	r24, Z
     b56:	0e 94 95 06 	call	0xd2a	; 0xd2a <DIO_read>
		
		if(PUSH_BTN_PULL_UP == A_pbConfig[btnNumber].PUSH_BTN_connection)
     b5a:	f8 01       	movw	r30, r16
     b5c:	86 81       	ldd	r24, Z+6	; 0x06
     b5e:	81 11       	cpse	r24, r1
     b60:	0a c0       	rjmp	.+20     	; 0xb76 <PUSH_BTN_read_state+0x5c>
		{
			if(DIO_HIGH == pin_logic_status)
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	81 11       	cpse	r24, r1
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <PUSH_BTN_read_state+0x56>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	f7 01       	movw	r30, r14
     b6c:	80 83       	st	Z, r24
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     b70:	f7 01       	movw	r30, r14
     b72:	10 82       	st	Z, r1
     b74:	0b c0       	rjmp	.+22     	; 0xb8c <PUSH_BTN_read_state+0x72>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == A_pbConfig[btnNumber].PUSH_BTN_connection)
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	49 f4       	brne	.+18     	; 0xb8c <PUSH_BTN_read_state+0x72>
		{
			if(DIO_HIGH == pin_logic_status)
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	81 11       	cpse	r24, r1
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <PUSH_BTN_read_state+0x6c>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     b80:	f7 01       	movw	r30, r14
     b82:	10 82       	st	Z, r1
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	f7 01       	movw	r30, r14
     b8a:	80 83       	st	Z, r24
			}
		}
}
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	08 95       	ret

00000b9c <ultrasonic_vInit>:

void ultrasonic_vInit()
{
	
	
	DIO_Initpin(&(ultra.triggerpin));
     b9c:	87 e6       	ldi	r24, 0x67	; 103
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_Initpin>
	MCU_vEnableInterrupt();
     ba4:	0e 94 93 0b 	call	0x1726	; 0x1726 <MCU_vEnableInterrupt>
     ba8:	08 95       	ret

00000baa <ultrasonic_vGetDistance>:
}

void ultrasonic_vGetDistance(float64_t *Copy_f64distance)
{
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <ultrasonic_vGetDistance+0xa>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	8c 01       	movw	r16, r24
	
	
	Uint32_t val = 0;
     bba:	1a 82       	std	Y+2, r1	; 0x02
     bbc:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_HIGH);
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	63 e0       	ldi	r22, 0x03	; 3
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
     bc8:	83 ec       	ldi	r24, 0xC3	; 195
     bca:	99 e0       	ldi	r25, 0x09	; 9
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <ultrasonic_vGetDistance+0x22>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <ultrasonic_vGetDistance+0x28>
     bd2:	00 00       	nop

	_delay_ms(10);
	
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_LOW);
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	63 e0       	ldi	r22, 0x03	; 3
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 24 06 	call	0xc48	; 0xc48 <DIO_WritePin>
	ICU_RisingEdgeCapture();
     bde:	0e 94 13 0b 	call	0x1626	; 0x1626 <ICU_RisingEdgeCapture>

	
	while(ICU_g_flag != 1);
     be2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <ICU_g_flag>
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <ultrasonic_vGetDistance+0x38>
	ICU_getValue(&val);
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <ICU_getValue>

	*Copy_f64distance = ((float)val / 466.47*8)+1;	
     bf2:	69 81       	ldd	r22, Y+1	; 0x01
     bf4:	7a 81       	ldd	r23, Y+2	; 0x02
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__floatunsisf>
     bfe:	29 e2       	ldi	r18, 0x29	; 41
     c00:	3c e3       	ldi	r19, 0x3C	; 60
     c02:	49 ee       	ldi	r20, 0xE9	; 233
     c04:	53 e4       	ldi	r21, 0x43	; 67
     c06:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__divsf3>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__mulsf3>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e8       	ldi	r20, 0x80	; 128
     c1c:	5f e3       	ldi	r21, 0x3F	; 63
     c1e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     c22:	f8 01       	movw	r30, r16
     c24:	60 83       	st	Z, r22
     c26:	71 83       	std	Z+1, r23	; 0x01
     c28:	82 83       	std	Z+2, r24	; 0x02
     c2a:	93 83       	std	Z+3, r25	; 0x03
	ICU_g_flag = 0;
     c2c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ICU_g_flag>
}
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <main>:

#include "APPLICATION/app/apph.h"

void main(void)
{
	app_init();
     c3e:	0e 94 51 00 	call	0xa2	; 0xa2 <app_init>
	while(1)
	{
	app_main();
     c42:	0e 94 61 00 	call	0xc2	; 0xc2 <app_main>
     c46:	fd cf       	rjmp	.-6      	; 0xc42 <main+0x4>

00000c48 <DIO_WritePin>:
			break;
			case PC:
			TOGGLE_BIT(DIO_PORTC_PORT_REG,pin_num);
			break;
			case PD:
			TOGGLE_BIT(DIO_PORTD_PORT_REG,pin_num);
     c48:	44 23       	and	r20, r20
     c4a:	19 f0       	breq	.+6      	; 0xc52 <DIO_WritePin+0xa>
     c4c:	41 30       	cpi	r20, 0x01	; 1
     c4e:	a9 f1       	breq	.+106    	; 0xcba <DIO_WritePin+0x72>
     c50:	08 95       	ret
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	89 f0       	breq	.+34     	; 0xc78 <DIO_WritePin+0x30>
     c56:	28 f0       	brcs	.+10     	; 0xc62 <DIO_WritePin+0x1a>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	c9 f0       	breq	.+50     	; 0xc8e <DIO_WritePin+0x46>
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	11 f1       	breq	.+68     	; 0xca4 <DIO_WritePin+0x5c>
     c60:	08 95       	ret
     c62:	2b b3       	in	r18, 0x1b	; 27
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_WritePin+0x26>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	6a 95       	dec	r22
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_WritePin+0x22>
     c72:	82 2b       	or	r24, r18
     c74:	8b bb       	out	0x1b, r24	; 27
     c76:	08 95       	ret
     c78:	28 b3       	in	r18, 0x18	; 24
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_WritePin+0x3c>
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	6a 95       	dec	r22
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_WritePin+0x38>
     c88:	82 2b       	or	r24, r18
     c8a:	88 bb       	out	0x18, r24	; 24
     c8c:	08 95       	ret
     c8e:	25 b3       	in	r18, 0x15	; 21
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <DIO_WritePin+0x52>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	6a 95       	dec	r22
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <DIO_WritePin+0x4e>
     c9e:	82 2b       	or	r24, r18
     ca0:	85 bb       	out	0x15, r24	; 21
     ca2:	08 95       	ret
     ca4:	22 b3       	in	r18, 0x12	; 18
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_WritePin+0x68>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	6a 95       	dec	r22
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_WritePin+0x64>
     cb4:	82 2b       	or	r24, r18
     cb6:	82 bb       	out	0x12, r24	; 18
     cb8:	08 95       	ret
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	91 f0       	breq	.+36     	; 0xce2 <DIO_WritePin+0x9a>
     cbe:	28 f0       	brcs	.+10     	; 0xcca <DIO_WritePin+0x82>
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	d9 f0       	breq	.+54     	; 0xcfa <DIO_WritePin+0xb2>
     cc4:	83 30       	cpi	r24, 0x03	; 3
     cc6:	29 f1       	breq	.+74     	; 0xd12 <DIO_WritePin+0xca>
     cc8:	08 95       	ret
     cca:	2b b3       	in	r18, 0x1b	; 27
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_WritePin+0x8e>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	6a 95       	dec	r22
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_WritePin+0x8a>
     cda:	80 95       	com	r24
     cdc:	82 23       	and	r24, r18
     cde:	8b bb       	out	0x1b, r24	; 27
     ce0:	08 95       	ret
     ce2:	28 b3       	in	r18, 0x18	; 24
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_WritePin+0xa6>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	6a 95       	dec	r22
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_WritePin+0xa2>
     cf2:	80 95       	com	r24
     cf4:	82 23       	and	r24, r18
     cf6:	88 bb       	out	0x18, r24	; 24
     cf8:	08 95       	ret
     cfa:	25 b3       	in	r18, 0x15	; 21
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_WritePin+0xbe>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	6a 95       	dec	r22
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_WritePin+0xba>
     d0a:	80 95       	com	r24
     d0c:	82 23       	and	r24, r18
     d0e:	85 bb       	out	0x15, r24	; 21
     d10:	08 95       	ret
     d12:	22 b3       	in	r18, 0x12	; 18
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_WritePin+0xd6>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	6a 95       	dec	r22
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_WritePin+0xd2>
     d22:	80 95       	com	r24
     d24:	82 23       	and	r24, r18
     d26:	82 bb       	out	0x12, r24	; 18
     d28:	08 95       	ret

00000d2a <DIO_read>:
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	89 f0       	breq	.+34     	; 0xd50 <DIO_read+0x26>
     d2e:	28 f0       	brcs	.+10     	; 0xd3a <DIO_read+0x10>
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	c9 f0       	breq	.+50     	; 0xd66 <DIO_read+0x3c>
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	11 f1       	breq	.+68     	; 0xd7c <DIO_read+0x52>
     d38:	08 95       	ret
     d3a:	89 b3       	in	r24, 0x19	; 25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_read+0x1a>
     d40:	95 95       	asr	r25
     d42:	87 95       	ror	r24
     d44:	6a 95       	dec	r22
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_read+0x16>
     d48:	81 70       	andi	r24, 0x01	; 1
     d4a:	fa 01       	movw	r30, r20
     d4c:	80 83       	st	Z, r24
     d4e:	08 95       	ret
     d50:	86 b3       	in	r24, 0x16	; 22
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_read+0x30>
     d56:	95 95       	asr	r25
     d58:	87 95       	ror	r24
     d5a:	6a 95       	dec	r22
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_read+0x2c>
     d5e:	81 70       	andi	r24, 0x01	; 1
     d60:	fa 01       	movw	r30, r20
     d62:	80 83       	st	Z, r24
     d64:	08 95       	ret
     d66:	83 b3       	in	r24, 0x13	; 19
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_read+0x46>
     d6c:	95 95       	asr	r25
     d6e:	87 95       	ror	r24
     d70:	6a 95       	dec	r22
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_read+0x42>
     d74:	81 70       	andi	r24, 0x01	; 1
     d76:	fa 01       	movw	r30, r20
     d78:	80 83       	st	Z, r24
     d7a:	08 95       	ret
     d7c:	80 b3       	in	r24, 0x10	; 16
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_read+0x5c>
     d82:	95 95       	asr	r25
     d84:	87 95       	ror	r24
     d86:	6a 95       	dec	r22
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_read+0x58>
     d8a:	81 70       	andi	r24, 0x01	; 1
     d8c:	fa 01       	movw	r30, r20
     d8e:	80 83       	st	Z, r24
     d90:	08 95       	ret

00000d92 <DIO_toggle>:
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	89 f0       	breq	.+34     	; 0xdb8 <DIO_toggle+0x26>
     d96:	28 f0       	brcs	.+10     	; 0xda2 <DIO_toggle+0x10>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	c9 f0       	breq	.+50     	; 0xdce <DIO_toggle+0x3c>
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	11 f1       	breq	.+68     	; 0xde4 <DIO_toggle+0x52>
     da0:	08 95       	ret
     da2:	2b b3       	in	r18, 0x1b	; 27
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_toggle+0x1c>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	6a 95       	dec	r22
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_toggle+0x18>
     db2:	82 27       	eor	r24, r18
     db4:	8b bb       	out	0x1b, r24	; 27
     db6:	08 95       	ret
     db8:	28 b3       	in	r18, 0x18	; 24
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_toggle+0x32>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	6a 95       	dec	r22
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_toggle+0x2e>
     dc8:	82 27       	eor	r24, r18
     dca:	88 bb       	out	0x18, r24	; 24
     dcc:	08 95       	ret
     dce:	25 b3       	in	r18, 0x15	; 21
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_toggle+0x48>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	6a 95       	dec	r22
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_toggle+0x44>
     dde:	82 27       	eor	r24, r18
     de0:	85 bb       	out	0x15, r24	; 21
     de2:	08 95       	ret
     de4:	22 b3       	in	r18, 0x12	; 18
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_toggle+0x5e>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	6a 95       	dec	r22
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_toggle+0x5a>
     df4:	82 27       	eor	r24, r18
     df6:	82 bb       	out	0x12, r24	; 18
     df8:	08 95       	ret

00000dfa <DIO_Initpin>:
     dfa:	fc 01       	movw	r30, r24
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	81 11       	cpse	r24, r1
     e00:	b5 c0       	rjmp	.+362    	; 0xf6c <DIO_Initpin+0x172>
     e02:	80 81       	ld	r24, Z
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	99 f0       	breq	.+38     	; 0xe2e <DIO_Initpin+0x34>
     e08:	28 f0       	brcs	.+10     	; 0xe14 <DIO_Initpin+0x1a>
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	e9 f0       	breq	.+58     	; 0xe48 <DIO_Initpin+0x4e>
     e0e:	83 30       	cpi	r24, 0x03	; 3
     e10:	41 f1       	breq	.+80     	; 0xe62 <DIO_Initpin+0x68>
     e12:	33 c0       	rjmp	.+102    	; 0xe7a <DIO_Initpin+0x80>
     e14:	2a b3       	in	r18, 0x1a	; 26
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	01 80       	ldd	r0, Z+1	; 0x01
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_Initpin+0x28>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_Initpin+0x24>
     e26:	80 95       	com	r24
     e28:	82 23       	and	r24, r18
     e2a:	8a bb       	out	0x1a, r24	; 26
     e2c:	26 c0       	rjmp	.+76     	; 0xe7a <DIO_Initpin+0x80>
     e2e:	27 b3       	in	r18, 0x17	; 23
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	01 80       	ldd	r0, Z+1	; 0x01
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_Initpin+0x42>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_Initpin+0x3e>
     e40:	80 95       	com	r24
     e42:	82 23       	and	r24, r18
     e44:	87 bb       	out	0x17, r24	; 23
     e46:	19 c0       	rjmp	.+50     	; 0xe7a <DIO_Initpin+0x80>
     e48:	24 b3       	in	r18, 0x14	; 20
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	01 80       	ldd	r0, Z+1	; 0x01
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_Initpin+0x5c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_Initpin+0x58>
     e5a:	80 95       	com	r24
     e5c:	82 23       	and	r24, r18
     e5e:	84 bb       	out	0x14, r24	; 20
     e60:	0c c0       	rjmp	.+24     	; 0xe7a <DIO_Initpin+0x80>
     e62:	21 b3       	in	r18, 0x11	; 17
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	01 80       	ldd	r0, Z+1	; 0x01
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_Initpin+0x76>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_Initpin+0x72>
     e74:	80 95       	com	r24
     e76:	82 23       	and	r24, r18
     e78:	81 bb       	out	0x11, r24	; 17
     e7a:	83 81       	ldd	r24, Z+3	; 0x03
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	c9 f5       	brne	.+114    	; 0xef2 <DIO_Initpin+0xf8>
     e80:	80 81       	ld	r24, Z
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 f0       	breq	.+36     	; 0xeaa <DIO_Initpin+0xb0>
     e86:	28 f0       	brcs	.+10     	; 0xe92 <DIO_Initpin+0x98>
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	d9 f0       	breq	.+54     	; 0xec2 <DIO_Initpin+0xc8>
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	29 f1       	breq	.+74     	; 0xeda <DIO_Initpin+0xe0>
     e90:	08 95       	ret
     e92:	2b b3       	in	r18, 0x1b	; 27
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	01 80       	ldd	r0, Z+1	; 0x01
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_Initpin+0xa6>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_Initpin+0xa2>
     ea4:	82 2b       	or	r24, r18
     ea6:	8b bb       	out	0x1b, r24	; 27
     ea8:	08 95       	ret
     eaa:	28 b3       	in	r18, 0x18	; 24
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	01 80       	ldd	r0, Z+1	; 0x01
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_Initpin+0xbe>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_Initpin+0xba>
     ebc:	82 2b       	or	r24, r18
     ebe:	88 bb       	out	0x18, r24	; 24
     ec0:	08 95       	ret
     ec2:	25 b3       	in	r18, 0x15	; 21
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	01 80       	ldd	r0, Z+1	; 0x01
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_Initpin+0xd6>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_Initpin+0xd2>
     ed4:	82 2b       	or	r24, r18
     ed6:	85 bb       	out	0x15, r24	; 21
     ed8:	08 95       	ret
     eda:	22 b3       	in	r18, 0x12	; 18
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	01 80       	ldd	r0, Z+1	; 0x01
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_Initpin+0xee>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_Initpin+0xea>
     eec:	82 2b       	or	r24, r18
     eee:	82 bb       	out	0x12, r24	; 18
     ef0:	08 95       	ret
     ef2:	80 81       	ld	r24, Z
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	99 f0       	breq	.+38     	; 0xf1e <DIO_Initpin+0x124>
     ef8:	28 f0       	brcs	.+10     	; 0xf04 <DIO_Initpin+0x10a>
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	e9 f0       	breq	.+58     	; 0xf38 <DIO_Initpin+0x13e>
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	41 f1       	breq	.+80     	; 0xf52 <DIO_Initpin+0x158>
     f02:	08 95       	ret
     f04:	2b b3       	in	r18, 0x1b	; 27
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	01 80       	ldd	r0, Z+1	; 0x01
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_Initpin+0x118>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_Initpin+0x114>
     f16:	80 95       	com	r24
     f18:	82 23       	and	r24, r18
     f1a:	8b bb       	out	0x1b, r24	; 27
     f1c:	08 95       	ret
     f1e:	28 b3       	in	r18, 0x18	; 24
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	01 80       	ldd	r0, Z+1	; 0x01
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_Initpin+0x132>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_Initpin+0x12e>
     f30:	80 95       	com	r24
     f32:	82 23       	and	r24, r18
     f34:	88 bb       	out	0x18, r24	; 24
     f36:	08 95       	ret
     f38:	25 b3       	in	r18, 0x15	; 21
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	01 80       	ldd	r0, Z+1	; 0x01
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_Initpin+0x14c>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_Initpin+0x148>
     f4a:	80 95       	com	r24
     f4c:	82 23       	and	r24, r18
     f4e:	85 bb       	out	0x15, r24	; 21
     f50:	08 95       	ret
     f52:	22 b3       	in	r18, 0x12	; 18
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	01 80       	ldd	r0, Z+1	; 0x01
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_Initpin+0x166>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_Initpin+0x162>
     f64:	80 95       	com	r24
     f66:	82 23       	and	r24, r18
     f68:	82 bb       	out	0x12, r24	; 18
     f6a:	08 95       	ret
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <DIO_Initpin+0x178>
     f70:	b0 c0       	rjmp	.+352    	; 0x10d2 <DIO_Initpin+0x2d8>
     f72:	80 81       	ld	r24, Z
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 f0       	breq	.+36     	; 0xf9c <DIO_Initpin+0x1a2>
     f78:	28 f0       	brcs	.+10     	; 0xf84 <DIO_Initpin+0x18a>
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	d9 f0       	breq	.+54     	; 0xfb4 <DIO_Initpin+0x1ba>
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	29 f1       	breq	.+74     	; 0xfcc <DIO_Initpin+0x1d2>
     f82:	2f c0       	rjmp	.+94     	; 0xfe2 <DIO_Initpin+0x1e8>
     f84:	2a b3       	in	r18, 0x1a	; 26
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	01 80       	ldd	r0, Z+1	; 0x01
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_Initpin+0x198>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_Initpin+0x194>
     f96:	82 2b       	or	r24, r18
     f98:	8a bb       	out	0x1a, r24	; 26
     f9a:	23 c0       	rjmp	.+70     	; 0xfe2 <DIO_Initpin+0x1e8>
     f9c:	27 b3       	in	r18, 0x17	; 23
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	01 80       	ldd	r0, Z+1	; 0x01
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_Initpin+0x1b0>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_Initpin+0x1ac>
     fae:	82 2b       	or	r24, r18
     fb0:	87 bb       	out	0x17, r24	; 23
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <DIO_Initpin+0x1e8>
     fb4:	24 b3       	in	r18, 0x14	; 20
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	01 80       	ldd	r0, Z+1	; 0x01
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_Initpin+0x1c8>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_Initpin+0x1c4>
     fc6:	82 2b       	or	r24, r18
     fc8:	84 bb       	out	0x14, r24	; 20
     fca:	0b c0       	rjmp	.+22     	; 0xfe2 <DIO_Initpin+0x1e8>
     fcc:	21 b3       	in	r18, 0x11	; 17
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	01 80       	ldd	r0, Z+1	; 0x01
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_Initpin+0x1e0>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_Initpin+0x1dc>
     fde:	82 2b       	or	r24, r18
     fe0:	81 bb       	out	0x11, r24	; 17
     fe2:	83 81       	ldd	r24, Z+3	; 0x03
     fe4:	81 11       	cpse	r24, r1
     fe6:	39 c0       	rjmp	.+114    	; 0x105a <DIO_Initpin+0x260>
     fe8:	80 81       	ld	r24, Z
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 f0       	breq	.+36     	; 0x1012 <DIO_Initpin+0x218>
     fee:	28 f0       	brcs	.+10     	; 0xffa <DIO_Initpin+0x200>
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	d9 f0       	breq	.+54     	; 0x102a <DIO_Initpin+0x230>
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	29 f1       	breq	.+74     	; 0x1042 <DIO_Initpin+0x248>
     ff8:	08 95       	ret
     ffa:	2b b3       	in	r18, 0x1b	; 27
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	01 80       	ldd	r0, Z+1	; 0x01
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_Initpin+0x20e>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_Initpin+0x20a>
    100c:	82 2b       	or	r24, r18
    100e:	8b bb       	out	0x1b, r24	; 27
    1010:	08 95       	ret
    1012:	28 b3       	in	r18, 0x18	; 24
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	01 80       	ldd	r0, Z+1	; 0x01
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_Initpin+0x226>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_Initpin+0x222>
    1024:	82 2b       	or	r24, r18
    1026:	88 bb       	out	0x18, r24	; 24
    1028:	08 95       	ret
    102a:	25 b3       	in	r18, 0x15	; 21
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	01 80       	ldd	r0, Z+1	; 0x01
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_Initpin+0x23e>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_Initpin+0x23a>
    103c:	82 2b       	or	r24, r18
    103e:	85 bb       	out	0x15, r24	; 21
    1040:	08 95       	ret
    1042:	22 b3       	in	r18, 0x12	; 18
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	01 80       	ldd	r0, Z+1	; 0x01
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_Initpin+0x256>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_Initpin+0x252>
    1054:	82 2b       	or	r24, r18
    1056:	82 bb       	out	0x12, r24	; 18
    1058:	08 95       	ret
    105a:	80 81       	ld	r24, Z
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	99 f0       	breq	.+38     	; 0x1086 <DIO_Initpin+0x28c>
    1060:	28 f0       	brcs	.+10     	; 0x106c <DIO_Initpin+0x272>
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	e9 f0       	breq	.+58     	; 0x10a0 <DIO_Initpin+0x2a6>
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	41 f1       	breq	.+80     	; 0x10ba <DIO_Initpin+0x2c0>
    106a:	08 95       	ret
    106c:	2b b3       	in	r18, 0x1b	; 27
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	01 80       	ldd	r0, Z+1	; 0x01
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_Initpin+0x280>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_Initpin+0x27c>
    107e:	80 95       	com	r24
    1080:	82 23       	and	r24, r18
    1082:	8b bb       	out	0x1b, r24	; 27
    1084:	08 95       	ret
    1086:	28 b3       	in	r18, 0x18	; 24
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	01 80       	ldd	r0, Z+1	; 0x01
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_Initpin+0x29a>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_Initpin+0x296>
    1098:	80 95       	com	r24
    109a:	82 23       	and	r24, r18
    109c:	88 bb       	out	0x18, r24	; 24
    109e:	08 95       	ret
    10a0:	25 b3       	in	r18, 0x15	; 21
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	01 80       	ldd	r0, Z+1	; 0x01
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_Initpin+0x2b4>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_Initpin+0x2b0>
    10b2:	80 95       	com	r24
    10b4:	82 23       	and	r24, r18
    10b6:	85 bb       	out	0x15, r24	; 21
    10b8:	08 95       	ret
    10ba:	22 b3       	in	r18, 0x12	; 18
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	01 80       	ldd	r0, Z+1	; 0x01
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_Initpin+0x2ce>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_Initpin+0x2ca>
    10cc:	80 95       	com	r24
    10ce:	82 23       	and	r24, r18
    10d0:	82 bb       	out	0x12, r24	; 18
    10d2:	08 95       	ret

000010d4 <DIO_initpinn>:
    10d4:	98 2f       	mov	r25, r24
    10d6:	96 95       	lsr	r25
    10d8:	96 95       	lsr	r25
    10da:	96 95       	lsr	r25
    10dc:	87 70       	andi	r24, 0x07	; 7
    10de:	61 30       	cpi	r22, 0x01	; 1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <DIO_initpinn+0x10>
    10e2:	55 c0       	rjmp	.+170    	; 0x118e <DIO_initpinn+0xba>
    10e4:	20 f0       	brcs	.+8      	; 0x10ee <DIO_initpinn+0x1a>
    10e6:	62 30       	cpi	r22, 0x02	; 2
    10e8:	09 f4       	brne	.+2      	; 0x10ec <DIO_initpinn+0x18>
    10ea:	a1 c0       	rjmp	.+322    	; 0x122e <DIO_initpinn+0x15a>
    10ec:	08 95       	ret
    10ee:	91 30       	cpi	r25, 0x01	; 1
    10f0:	c1 f0       	breq	.+48     	; 0x1122 <DIO_initpinn+0x4e>
    10f2:	28 f0       	brcs	.+10     	; 0x10fe <DIO_initpinn+0x2a>
    10f4:	92 30       	cpi	r25, 0x02	; 2
    10f6:	39 f1       	breq	.+78     	; 0x1146 <DIO_initpinn+0x72>
    10f8:	93 30       	cpi	r25, 0x03	; 3
    10fa:	b9 f1       	breq	.+110    	; 0x116a <DIO_initpinn+0x96>
    10fc:	08 95       	ret
    10fe:	4a b3       	in	r20, 0x1a	; 26
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	b9 01       	movw	r22, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_initpinn+0x38>
    1108:	66 0f       	add	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_initpinn+0x34>
    1110:	cb 01       	movw	r24, r22
    1112:	94 2f       	mov	r25, r20
    1114:	98 2b       	or	r25, r24
    1116:	9a bb       	out	0x1a, r25	; 26
    1118:	9b b3       	in	r25, 0x1b	; 27
    111a:	80 95       	com	r24
    111c:	89 23       	and	r24, r25
    111e:	8b bb       	out	0x1b, r24	; 27
    1120:	08 95       	ret
    1122:	47 b3       	in	r20, 0x17	; 23
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	b9 01       	movw	r22, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_initpinn+0x5c>
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_initpinn+0x58>
    1134:	cb 01       	movw	r24, r22
    1136:	94 2f       	mov	r25, r20
    1138:	98 2b       	or	r25, r24
    113a:	97 bb       	out	0x17, r25	; 23
    113c:	98 b3       	in	r25, 0x18	; 24
    113e:	80 95       	com	r24
    1140:	89 23       	and	r24, r25
    1142:	88 bb       	out	0x18, r24	; 24
    1144:	08 95       	ret
    1146:	44 b3       	in	r20, 0x14	; 20
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	b9 01       	movw	r22, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_initpinn+0x80>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_initpinn+0x7c>
    1158:	cb 01       	movw	r24, r22
    115a:	94 2f       	mov	r25, r20
    115c:	98 2b       	or	r25, r24
    115e:	94 bb       	out	0x14, r25	; 20
    1160:	95 b3       	in	r25, 0x15	; 21
    1162:	80 95       	com	r24
    1164:	89 23       	and	r24, r25
    1166:	85 bb       	out	0x15, r24	; 21
    1168:	08 95       	ret
    116a:	41 b3       	in	r20, 0x11	; 17
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	b9 01       	movw	r22, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_initpinn+0xa4>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_initpinn+0xa0>
    117c:	cb 01       	movw	r24, r22
    117e:	94 2f       	mov	r25, r20
    1180:	98 2b       	or	r25, r24
    1182:	91 bb       	out	0x11, r25	; 17
    1184:	92 b3       	in	r25, 0x12	; 18
    1186:	80 95       	com	r24
    1188:	89 23       	and	r24, r25
    118a:	82 bb       	out	0x12, r24	; 18
    118c:	08 95       	ret
    118e:	91 30       	cpi	r25, 0x01	; 1
    1190:	c1 f0       	breq	.+48     	; 0x11c2 <DIO_initpinn+0xee>
    1192:	28 f0       	brcs	.+10     	; 0x119e <DIO_initpinn+0xca>
    1194:	92 30       	cpi	r25, 0x02	; 2
    1196:	39 f1       	breq	.+78     	; 0x11e6 <DIO_initpinn+0x112>
    1198:	93 30       	cpi	r25, 0x03	; 3
    119a:	b9 f1       	breq	.+110    	; 0x120a <DIO_initpinn+0x136>
    119c:	08 95       	ret
    119e:	4a b3       	in	r20, 0x1a	; 26
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	b9 01       	movw	r22, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_initpinn+0xd8>
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	8a 95       	dec	r24
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_initpinn+0xd4>
    11b0:	cb 01       	movw	r24, r22
    11b2:	80 95       	com	r24
    11b4:	94 2f       	mov	r25, r20
    11b6:	98 23       	and	r25, r24
    11b8:	9a bb       	out	0x1a, r25	; 26
    11ba:	9b b3       	in	r25, 0x1b	; 27
    11bc:	89 23       	and	r24, r25
    11be:	8b bb       	out	0x1b, r24	; 27
    11c0:	08 95       	ret
    11c2:	47 b3       	in	r20, 0x17	; 23
    11c4:	21 e0       	ldi	r18, 0x01	; 1
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	b9 01       	movw	r22, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_initpinn+0xfc>
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_initpinn+0xf8>
    11d4:	cb 01       	movw	r24, r22
    11d6:	80 95       	com	r24
    11d8:	94 2f       	mov	r25, r20
    11da:	98 23       	and	r25, r24
    11dc:	97 bb       	out	0x17, r25	; 23
    11de:	98 b3       	in	r25, 0x18	; 24
    11e0:	89 23       	and	r24, r25
    11e2:	88 bb       	out	0x18, r24	; 24
    11e4:	08 95       	ret
    11e6:	44 b3       	in	r20, 0x14	; 20
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	b9 01       	movw	r22, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_initpinn+0x120>
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	8a 95       	dec	r24
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_initpinn+0x11c>
    11f8:	cb 01       	movw	r24, r22
    11fa:	80 95       	com	r24
    11fc:	94 2f       	mov	r25, r20
    11fe:	98 23       	and	r25, r24
    1200:	94 bb       	out	0x14, r25	; 20
    1202:	95 b3       	in	r25, 0x15	; 21
    1204:	89 23       	and	r24, r25
    1206:	85 bb       	out	0x15, r24	; 21
    1208:	08 95       	ret
    120a:	41 b3       	in	r20, 0x11	; 17
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	b9 01       	movw	r22, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_initpinn+0x144>
    1214:	66 0f       	add	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_initpinn+0x140>
    121c:	cb 01       	movw	r24, r22
    121e:	80 95       	com	r24
    1220:	94 2f       	mov	r25, r20
    1222:	98 23       	and	r25, r24
    1224:	91 bb       	out	0x11, r25	; 17
    1226:	92 b3       	in	r25, 0x12	; 18
    1228:	89 23       	and	r24, r25
    122a:	82 bb       	out	0x12, r24	; 18
    122c:	08 95       	ret
    122e:	91 30       	cpi	r25, 0x01	; 1
    1230:	c1 f0       	breq	.+48     	; 0x1262 <DIO_initpinn+0x18e>
    1232:	28 f0       	brcs	.+10     	; 0x123e <DIO_initpinn+0x16a>
    1234:	92 30       	cpi	r25, 0x02	; 2
    1236:	39 f1       	breq	.+78     	; 0x1286 <DIO_initpinn+0x1b2>
    1238:	93 30       	cpi	r25, 0x03	; 3
    123a:	b9 f1       	breq	.+110    	; 0x12aa <DIO_initpinn+0x1d6>
    123c:	08 95       	ret
    123e:	4a b3       	in	r20, 0x1a	; 26
    1240:	21 e0       	ldi	r18, 0x01	; 1
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	b9 01       	movw	r22, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_initpinn+0x178>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	8a 95       	dec	r24
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_initpinn+0x174>
    1250:	cb 01       	movw	r24, r22
    1252:	96 2f       	mov	r25, r22
    1254:	90 95       	com	r25
    1256:	94 23       	and	r25, r20
    1258:	9a bb       	out	0x1a, r25	; 26
    125a:	9b b3       	in	r25, 0x1b	; 27
    125c:	89 2b       	or	r24, r25
    125e:	8b bb       	out	0x1b, r24	; 27
    1260:	08 95       	ret
    1262:	47 b3       	in	r20, 0x17	; 23
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	b9 01       	movw	r22, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_initpinn+0x19c>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	8a 95       	dec	r24
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_initpinn+0x198>
    1274:	cb 01       	movw	r24, r22
    1276:	96 2f       	mov	r25, r22
    1278:	90 95       	com	r25
    127a:	94 23       	and	r25, r20
    127c:	97 bb       	out	0x17, r25	; 23
    127e:	98 b3       	in	r25, 0x18	; 24
    1280:	89 2b       	or	r24, r25
    1282:	88 bb       	out	0x18, r24	; 24
    1284:	08 95       	ret
    1286:	44 b3       	in	r20, 0x14	; 20
    1288:	21 e0       	ldi	r18, 0x01	; 1
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	b9 01       	movw	r22, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_initpinn+0x1c0>
    1290:	66 0f       	add	r22, r22
    1292:	77 1f       	adc	r23, r23
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_initpinn+0x1bc>
    1298:	cb 01       	movw	r24, r22
    129a:	96 2f       	mov	r25, r22
    129c:	90 95       	com	r25
    129e:	94 23       	and	r25, r20
    12a0:	94 bb       	out	0x14, r25	; 20
    12a2:	95 b3       	in	r25, 0x15	; 21
    12a4:	89 2b       	or	r24, r25
    12a6:	85 bb       	out	0x15, r24	; 21
    12a8:	08 95       	ret
    12aa:	41 b3       	in	r20, 0x11	; 17
    12ac:	21 e0       	ldi	r18, 0x01	; 1
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	b9 01       	movw	r22, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_initpinn+0x1e4>
    12b4:	66 0f       	add	r22, r22
    12b6:	77 1f       	adc	r23, r23
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_initpinn+0x1e0>
    12bc:	cb 01       	movw	r24, r22
    12be:	96 2f       	mov	r25, r22
    12c0:	90 95       	com	r25
    12c2:	94 23       	and	r25, r20
    12c4:	91 bb       	out	0x11, r25	; 17
    12c6:	92 b3       	in	r25, 0x12	; 18
    12c8:	89 2b       	or	r24, r25
    12ca:	82 bb       	out	0x12, r24	; 18
    12cc:	08 95       	ret

000012ce <DIO_writepinn>:
    12ce:	98 2f       	mov	r25, r24
    12d0:	96 95       	lsr	r25
    12d2:	96 95       	lsr	r25
    12d4:	96 95       	lsr	r25
    12d6:	87 70       	andi	r24, 0x07	; 7
    12d8:	66 23       	and	r22, r22
    12da:	09 f4       	brne	.+2      	; 0x12de <DIO_writepinn+0x10>
    12dc:	3f c0       	rjmp	.+126    	; 0x135c <DIO_writepinn+0x8e>
    12de:	61 30       	cpi	r22, 0x01	; 1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <DIO_writepinn+0x16>
    12e2:	7b c0       	rjmp	.+246    	; 0x13da <DIO_writepinn+0x10c>
    12e4:	91 30       	cpi	r25, 0x01	; 1
    12e6:	99 f0       	breq	.+38     	; 0x130e <DIO_writepinn+0x40>
    12e8:	28 f0       	brcs	.+10     	; 0x12f4 <DIO_writepinn+0x26>
    12ea:	92 30       	cpi	r25, 0x02	; 2
    12ec:	e9 f0       	breq	.+58     	; 0x1328 <DIO_writepinn+0x5a>
    12ee:	93 30       	cpi	r25, 0x03	; 3
    12f0:	41 f1       	breq	.+80     	; 0x1342 <DIO_writepinn+0x74>
    12f2:	08 95       	ret
    12f4:	4b b3       	in	r20, 0x1b	; 27
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	b9 01       	movw	r22, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_writepinn+0x34>
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_writepinn+0x30>
    1306:	cb 01       	movw	r24, r22
    1308:	84 2b       	or	r24, r20
    130a:	8b bb       	out	0x1b, r24	; 27
    130c:	08 95       	ret
    130e:	48 b3       	in	r20, 0x18	; 24
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	b9 01       	movw	r22, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_writepinn+0x4e>
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_writepinn+0x4a>
    1320:	cb 01       	movw	r24, r22
    1322:	84 2b       	or	r24, r20
    1324:	88 bb       	out	0x18, r24	; 24
    1326:	08 95       	ret
    1328:	45 b3       	in	r20, 0x15	; 21
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	b9 01       	movw	r22, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_writepinn+0x68>
    1332:	66 0f       	add	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	8a 95       	dec	r24
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_writepinn+0x64>
    133a:	cb 01       	movw	r24, r22
    133c:	84 2b       	or	r24, r20
    133e:	85 bb       	out	0x15, r24	; 21
    1340:	08 95       	ret
    1342:	42 b3       	in	r20, 0x12	; 18
    1344:	21 e0       	ldi	r18, 0x01	; 1
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	b9 01       	movw	r22, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_writepinn+0x82>
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	8a 95       	dec	r24
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_writepinn+0x7e>
    1354:	cb 01       	movw	r24, r22
    1356:	84 2b       	or	r24, r20
    1358:	82 bb       	out	0x12, r24	; 18
    135a:	08 95       	ret
    135c:	91 30       	cpi	r25, 0x01	; 1
    135e:	a1 f0       	breq	.+40     	; 0x1388 <DIO_writepinn+0xba>
    1360:	28 f0       	brcs	.+10     	; 0x136c <DIO_writepinn+0x9e>
    1362:	92 30       	cpi	r25, 0x02	; 2
    1364:	f9 f0       	breq	.+62     	; 0x13a4 <DIO_writepinn+0xd6>
    1366:	93 30       	cpi	r25, 0x03	; 3
    1368:	59 f1       	breq	.+86     	; 0x13c0 <DIO_writepinn+0xf2>
    136a:	08 95       	ret
    136c:	4b b3       	in	r20, 0x1b	; 27
    136e:	21 e0       	ldi	r18, 0x01	; 1
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	b9 01       	movw	r22, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_writepinn+0xac>
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	8a 95       	dec	r24
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_writepinn+0xa8>
    137e:	cb 01       	movw	r24, r22
    1380:	80 95       	com	r24
    1382:	84 23       	and	r24, r20
    1384:	8b bb       	out	0x1b, r24	; 27
    1386:	08 95       	ret
    1388:	48 b3       	in	r20, 0x18	; 24
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	b9 01       	movw	r22, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_writepinn+0xc8>
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_writepinn+0xc4>
    139a:	cb 01       	movw	r24, r22
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	88 bb       	out	0x18, r24	; 24
    13a2:	08 95       	ret
    13a4:	45 b3       	in	r20, 0x15	; 21
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	b9 01       	movw	r22, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_writepinn+0xe4>
    13ae:	66 0f       	add	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_writepinn+0xe0>
    13b6:	cb 01       	movw	r24, r22
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	85 bb       	out	0x15, r24	; 21
    13be:	08 95       	ret
    13c0:	42 b3       	in	r20, 0x12	; 18
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	b9 01       	movw	r22, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_writepinn+0x100>
    13ca:	66 0f       	add	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	8a 95       	dec	r24
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_writepinn+0xfc>
    13d2:	cb 01       	movw	r24, r22
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	82 bb       	out	0x12, r24	; 18
    13da:	08 95       	ret

000013dc <DIO_InitDCM>:



void DIO_InitDCM(u8 pin, u8 port,u8 mode)
{
		if ( mode == DIO_MODE_INPUT)
    13dc:	41 11       	cpse	r20, r1
    13de:	40 c0       	rjmp	.+128    	; 0x1460 <DIO_InitDCM+0x84>
		{
			switch(port)
    13e0:	61 30       	cpi	r22, 0x01	; 1
    13e2:	a1 f0       	breq	.+40     	; 0x140c <DIO_InitDCM+0x30>
    13e4:	28 f0       	brcs	.+10     	; 0x13f0 <DIO_InitDCM+0x14>
    13e6:	62 30       	cpi	r22, 0x02	; 2
    13e8:	f9 f0       	breq	.+62     	; 0x1428 <DIO_InitDCM+0x4c>
    13ea:	63 30       	cpi	r22, 0x03	; 3
    13ec:	59 f1       	breq	.+86     	; 0x1444 <DIO_InitDCM+0x68>
    13ee:	08 95       	ret
			{
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_DDR_REG,pin);	break;
    13f0:	4a b3       	in	r20, 0x1a	; 26
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	b9 01       	movw	r22, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_InitDCM+0x22>
    13fa:	66 0f       	add	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_InitDCM+0x1e>
    1402:	cb 01       	movw	r24, r22
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8a bb       	out	0x1a, r24	; 26
    140a:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_DDR_REG,pin);	break;
    140c:	47 b3       	in	r20, 0x17	; 23
    140e:	21 e0       	ldi	r18, 0x01	; 1
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	b9 01       	movw	r22, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_InitDCM+0x3e>
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	8a 95       	dec	r24
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_InitDCM+0x3a>
    141e:	cb 01       	movw	r24, r22
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	87 bb       	out	0x17, r24	; 23
    1426:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_DDR_REG,pin);	break;
    1428:	44 b3       	in	r20, 0x14	; 20
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	b9 01       	movw	r22, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_InitDCM+0x5a>
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	8a 95       	dec	r24
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_InitDCM+0x56>
    143a:	cb 01       	movw	r24, r22
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	84 bb       	out	0x14, r24	; 20
    1442:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_DDR_REG,pin);	break;
    1444:	41 b3       	in	r20, 0x11	; 17
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	b9 01       	movw	r22, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_InitDCM+0x76>
    144e:	66 0f       	add	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	8a 95       	dec	r24
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_InitDCM+0x72>
    1456:	cb 01       	movw	r24, r22
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	81 bb       	out	0x11, r24	; 17
    145e:	08 95       	ret
				default:			break;
			}
		}
		else if ( mode == DIO_MODE_OUTPUT)
    1460:	41 30       	cpi	r20, 0x01	; 1
    1462:	d9 f5       	brne	.+118    	; 0x14da <DIO_InitDCM+0xfe>
		{
			switch( port )
    1464:	61 30       	cpi	r22, 0x01	; 1
    1466:	99 f0       	breq	.+38     	; 0x148e <DIO_InitDCM+0xb2>
    1468:	28 f0       	brcs	.+10     	; 0x1474 <DIO_InitDCM+0x98>
    146a:	62 30       	cpi	r22, 0x02	; 2
    146c:	e9 f0       	breq	.+58     	; 0x14a8 <DIO_InitDCM+0xcc>
    146e:	63 30       	cpi	r22, 0x03	; 3
    1470:	41 f1       	breq	.+80     	; 0x14c2 <DIO_InitDCM+0xe6>
    1472:	08 95       	ret
			{
				case DIO_PORTA:	SET_BIT(DIO_PORTA_DDR_REG,pin);	break;
    1474:	4a b3       	in	r20, 0x1a	; 26
    1476:	21 e0       	ldi	r18, 0x01	; 1
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	b9 01       	movw	r22, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_InitDCM+0xa6>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_InitDCM+0xa2>
    1486:	cb 01       	movw	r24, r22
    1488:	84 2b       	or	r24, r20
    148a:	8a bb       	out	0x1a, r24	; 26
    148c:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_DDR_REG,pin);	break;
    148e:	47 b3       	in	r20, 0x17	; 23
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	b9 01       	movw	r22, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_InitDCM+0xc0>
    1498:	66 0f       	add	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_InitDCM+0xbc>
    14a0:	cb 01       	movw	r24, r22
    14a2:	84 2b       	or	r24, r20
    14a4:	87 bb       	out	0x17, r24	; 23
    14a6:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_DDR_REG,pin);	break;
    14a8:	44 b3       	in	r20, 0x14	; 20
    14aa:	21 e0       	ldi	r18, 0x01	; 1
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	b9 01       	movw	r22, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_InitDCM+0xda>
    14b2:	66 0f       	add	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	8a 95       	dec	r24
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_InitDCM+0xd6>
    14ba:	cb 01       	movw	r24, r22
    14bc:	84 2b       	or	r24, r20
    14be:	84 bb       	out	0x14, r24	; 20
    14c0:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_DDR_REG,pin);	break;
    14c2:	41 b3       	in	r20, 0x11	; 17
    14c4:	21 e0       	ldi	r18, 0x01	; 1
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	b9 01       	movw	r22, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_InitDCM+0xf4>
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_InitDCM+0xf0>
    14d4:	cb 01       	movw	r24, r22
    14d6:	84 2b       	or	r24, r20
    14d8:	81 bb       	out	0x11, r24	; 17
    14da:	08 95       	ret

000014dc <ICU_getValue>:
}
 
 
void ICU_getValue(u32 *u32_l_ICR_value)
{
	*u32_l_ICR_value = ICU_g_Count;
    14dc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <ICU_g_Count>
    14e0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <ICU_g_Count+0x1>
    14e4:	fc 01       	movw	r30, r24
    14e6:	31 83       	std	Z+1, r19	; 0x01
    14e8:	20 83       	st	Z, r18
    14ea:	08 95       	ret

000014ec <EXI_enablePIE>:
 */

void EXI_enablePIE( Uchar8_t u8_a_interruptId, Uchar8_t u8_a_senseControl )
{

        SET_BIT(TIMER_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    14ec:	8f b7       	in	r24, 0x3f	; 63
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	8f bf       	out	0x3f, r24	; 63

        SET_BIT( EXI_U8_GICR_REG, EXI_U8_INT2_BIT );
    14f2:	8b b7       	in	r24, 0x3b	; 59
    14f4:	80 62       	ori	r24, 0x20	; 32
    14f6:	8b bf       	out	0x3b, r24	; 59

                /* Check 1.1.1: Required SenseControl */
                switch ( u8_a_senseControl )
    14f8:	62 30       	cpi	r22, 0x02	; 2
    14fa:	19 f0       	breq	.+6      	; 0x1502 <EXI_enablePIE+0x16>
    14fc:	63 30       	cpi	r22, 0x03	; 3
    14fe:	29 f0       	breq	.+10     	; 0x150a <EXI_enablePIE+0x1e>
    1500:	08 95       	ret
                {
                    //case EXI_U8_SENSE_LOW_LEVEL		: CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                   // case EXI_U8_SENSE_LOGICAL_CHANGE: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                    case EXI_U8_SENSE_FALLING_EDGE	: CLEAR_BIT( EXI_U8_MCUCSR_REG, 6 ); break;
    1502:	84 b7       	in	r24, 0x34	; 52
    1504:	8f 7b       	andi	r24, 0xBF	; 191
    1506:	84 bf       	out	0x34, r24	; 52
    1508:	08 95       	ret
                    case EXI_U8_SENSE_RISING_EDGE	: SET_BIT( EXI_U8_MCUCSR_REG, 6 );  break;
    150a:	84 b7       	in	r24, 0x34	; 52
    150c:	80 64       	ori	r24, 0x40	; 64
    150e:	84 bf       	out	0x34, r24	; 52
    1510:	08 95       	ret

00001512 <TIMER_tmr1NormalModeInit>:
 * @return An EN_TMR_ERROR_T value indicating the success or failure of the operation
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1NormalModeInit(EN_TIMER_INTERRPUT_T en_a_interrputEnable)
{
	switch (en_a_interrputEnable)
    1512:	88 23       	and	r24, r24
    1514:	19 f0       	breq	.+6      	; 0x151c <TIMER_tmr1NormalModeInit+0xa>
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	d9 f0       	breq	.+54     	; 0x1550 <TIMER_tmr1NormalModeInit+0x3e>
    151a:	2e c0       	rjmp	.+92     	; 0x1578 <TIMER_tmr1NormalModeInit+0x66>
	{
	case ENABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    151c:	8f b5       	in	r24, 0x2f	; 47
    151e:	8e 7f       	andi	r24, 0xFE	; 254
    1520:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    1522:	8f b5       	in	r24, 0x2f	; 47
    1524:	8d 7f       	andi	r24, 0xFD	; 253
    1526:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    1528:	8e b5       	in	r24, 0x2e	; 46
    152a:	87 7f       	andi	r24, 0xF7	; 247
    152c:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    152e:	8e b5       	in	r24, 0x2e	; 46
    1530:	8f 7e       	andi	r24, 0xEF	; 239
    1532:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    1534:	8f b5       	in	r24, 0x2f	; 47
    1536:	88 60       	ori	r24, 0x08	; 8
    1538:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    153a:	8f b5       	in	r24, 0x2f	; 47
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	8f bd       	out	0x2f, r24	; 47
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    1540:	8f b7       	in	r24, 0x3f	; 63
    1542:	80 68       	ori	r24, 0x80	; 128
    1544:	8f bf       	out	0x3f, r24	; 63
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
    1546:	89 b7       	in	r24, 0x39	; 57
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    154c:	80 e0       	ldi	r24, 0x00	; 0
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
		break;
    154e:	08 95       	ret
	case DISABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    1550:	8f b5       	in	r24, 0x2f	; 47
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    1556:	8f b5       	in	r24, 0x2f	; 47
    1558:	8d 7f       	andi	r24, 0xFD	; 253
    155a:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    155c:	8e b5       	in	r24, 0x2e	; 46
    155e:	87 7f       	andi	r24, 0xF7	; 247
    1560:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    1562:	8e b5       	in	r24, 0x2e	; 46
    1564:	8f 7e       	andi	r24, 0xEF	; 239
    1566:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    1568:	8f b5       	in	r24, 0x2f	; 47
    156a:	88 60       	ori	r24, 0x08	; 8
    156c:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    156e:	8f b5       	in	r24, 0x2f	; 47
    1570:	84 60       	ori	r24, 0x04	; 4
    1572:	8f bd       	out	0x2f, r24	; 47
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1574:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
    1576:	08 95       	ret
	default:
		return TIMER_ERROR;
    1578:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    157a:	08 95       	ret

0000157c <TIMER_tmr1Start>:
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1Start(Uint16_t u16_a_prescaler)
{
	//select the required prescaler value
	switch(u16_a_prescaler)
    157c:	80 34       	cpi	r24, 0x40	; 64
    157e:	91 05       	cpc	r25, r1
    1580:	29 f1       	breq	.+74     	; 0x15cc <TIMER_tmr1Start+0x50>
    1582:	30 f4       	brcc	.+12     	; 0x1590 <TIMER_tmr1Start+0x14>
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	59 f0       	breq	.+22     	; 0x15a0 <TIMER_tmr1Start+0x24>
    158a:	08 97       	sbiw	r24, 0x08	; 8
    158c:	a1 f0       	breq	.+40     	; 0x15b6 <TIMER_tmr1Start+0x3a>
    158e:	3f c0       	rjmp	.+126    	; 0x160e <TIMER_tmr1Start+0x92>
    1590:	81 15       	cp	r24, r1
    1592:	21 e0       	ldi	r18, 0x01	; 1
    1594:	92 07       	cpc	r25, r18
    1596:	29 f1       	breq	.+74     	; 0x15e2 <TIMER_tmr1Start+0x66>
    1598:	81 15       	cp	r24, r1
    159a:	94 40       	sbci	r25, 0x04	; 4
    159c:	69 f1       	breq	.+90     	; 0x15f8 <TIMER_tmr1Start+0x7c>
    159e:	37 c0       	rjmp	.+110    	; 0x160e <TIMER_tmr1Start+0x92>
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15a0:	8e b5       	in	r24, 0x2e	; 46
    15a2:	8d 7f       	andi	r24, 0xFD	; 253
    15a4:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15a6:	8e b5       	in	r24, 0x2e	; 46
    15a8:	8b 7f       	andi	r24, 0xFB	; 251
    15aa:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15ac:	8e b5       	in	r24, 0x2e	; 46
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    15b4:	08 95       	ret
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15b6:	8e b5       	in	r24, 0x2e	; 46
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15bc:	8e b5       	in	r24, 0x2e	; 46
    15be:	8b 7f       	andi	r24, 0xFB	; 251
    15c0:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15c2:	8e b5       	in	r24, 0x2e	; 46
    15c4:	82 60       	ori	r24, 0x02	; 2
    15c6:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15c8:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		break;
    15ca:	08 95       	ret
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15cc:	8e b5       	in	r24, 0x2e	; 46
    15ce:	8b 7f       	andi	r24, 0xFB	; 251
    15d0:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15d2:	8e b5       	in	r24, 0x2e	; 46
    15d4:	82 60       	ori	r24, 0x02	; 2
    15d6:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15d8:	8e b5       	in	r24, 0x2e	; 46
    15da:	81 60       	ori	r24, 0x01	; 1
    15dc:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15de:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    15e0:	08 95       	ret
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15e2:	8e b5       	in	r24, 0x2e	; 46
    15e4:	8d 7f       	andi	r24, 0xFD	; 253
    15e6:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15e8:	8e b5       	in	r24, 0x2e	; 46
    15ea:	8e 7f       	andi	r24, 0xFE	; 254
    15ec:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15ee:	8e b5       	in	r24, 0x2e	; 46
    15f0:	84 60       	ori	r24, 0x04	; 4
    15f2:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15f4:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		break;
    15f6:	08 95       	ret
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15f8:	8e b5       	in	r24, 0x2e	; 46
    15fa:	8d 7f       	andi	r24, 0xFD	; 253
    15fc:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15fe:	8e b5       	in	r24, 0x2e	; 46
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1604:	8e b5       	in	r24, 0x2e	; 46
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	8e bd       	out	0x2e, r24	; 46
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    160a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    160c:	08 95       	ret
	default:
		return TIMER_ERROR;
    160e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    1610:	08 95       	ret

00001612 <TIMER_tmr1Stop>:

void TIMER_tmr1Stop(void)
{
 //Stop the timer by clearing the prescaler

	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1612:	8e b5       	in	r24, 0x2e	; 46
    1614:	8e 7f       	andi	r24, 0xFE	; 254
    1616:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1618:	8e b5       	in	r24, 0x2e	; 46
    161a:	8d 7f       	andi	r24, 0xFD	; 253
    161c:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    161e:	8e b5       	in	r24, 0x2e	; 46
    1620:	8b 7f       	andi	r24, 0xFB	; 251
    1622:	8e bd       	out	0x2e, r24	; 46
    1624:	08 95       	ret

00001626 <ICU_RisingEdgeCapture>:
 * @param[in] void.
 *
 * @return void.
 */
void ICU_RisingEdgeCapture(void)
{
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
	TIMER_tmr1NormalModeInit(ST_g_softwareICU->timer1_ISR);
    162a:	c1 e7       	ldi	r28, 0x71	; 113
    162c:	d0 e0       	ldi	r29, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	0e 94 89 0a 	call	0x1512	; 0x1512 <TIMER_tmr1NormalModeInit>
	TIMER_tmr1Stop();
    1634:	0e 94 09 0b 	call	0x1612	; 0x1612 <TIMER_tmr1Stop>
	
	EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_firstSenseControl);
    1638:	69 81       	ldd	r22, Y+1	; 0x01
    163a:	88 81       	ld	r24, Y
    163c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <EXI_enablePIE>
	ICU_g_edgeFlag = RISING;
    1640:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ICU_g_edgeFlag>
	TIMER_tmr1Start(1);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 be 0a 	call	0x157c	; 0x157c <TIMER_tmr1Start>
}
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <__vector_3>:
	
/**
 * ISR function implementation of INT2
 * */
ISR(EXT_INT_2)
{
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
    165c:	2f 93       	push	r18
    165e:	3f 93       	push	r19
    1660:	4f 93       	push	r20
    1662:	5f 93       	push	r21
    1664:	6f 93       	push	r22
    1666:	7f 93       	push	r23
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	af 93       	push	r26
    166e:	bf 93       	push	r27
    1670:	ef 93       	push	r30
    1672:	ff 93       	push	r31
    /* Save the current value of the timer/counter register  */
	TIMER_g_timer1RegValue = TMR_U16_TCNT1_REG;
    1674:	8c b5       	in	r24, 0x2c	; 44
    1676:	9d b5       	in	r25, 0x2d	; 45
    1678:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <TIMER_g_timer1RegValue+0x1>
    167c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <TIMER_g_timer1RegValue>
	if(ICU_g_edgeFlag == RISING)
    1680:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <ICU_g_edgeFlag>
    1684:	21 11       	cpse	r18, r1
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <__vector_3+0x5e>
	{
		ICU_g_ValueRising = TIMER_g_timer1RegValue;
    1688:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <ICU_g_ValueRising+0x1>
    168c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ICU_g_ValueRising>
		/* Clear Timer counter */
		TMR_U16_TCNT1_REG = 0;
    1690:	1d bc       	out	0x2d, r1	; 45
    1692:	1c bc       	out	0x2c, r1	; 44
		/* Set the external interrupt event at falling edge.*/
		EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_secondSenseControl );
    1694:	e1 e7       	ldi	r30, 0x71	; 113
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	62 81       	ldd	r22, Z+2	; 0x02
    169a:	80 81       	ld	r24, Z
    169c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <EXI_enablePIE>
		/* Clear Timer overflow count */
		u32_g_timer1Overflow = 0;
    16a0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u32_g_timer1Overflow+0x1>
    16a4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <u32_g_timer1Overflow>
		ICU_g_edgeFlag = FALLING;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <ICU_g_edgeFlag>
    16ae:	13 c0       	rjmp	.+38     	; 0x16d6 <__vector_3+0x84>
	}
	else
	{
		ICU_g_ValueFalling = TIMER_g_timer1RegValue;
    16b0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <ICU_g_ValueFalling+0x1>
    16b4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ICU_g_ValueFalling>
		ICU_g_Count = TIMER_g_timer1RegValue + (65535 * u32_g_timer1Overflow);
    16b8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <u32_g_timer1Overflow>
    16bc:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <u32_g_timer1Overflow+0x1>
    16c0:	82 1b       	sub	r24, r18
    16c2:	93 0b       	sbc	r25, r19
    16c4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ICU_g_Count+0x1>
    16c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ICU_g_Count>
		/* Stop timer1 */
		TIMER_tmr1Stop();
    16cc:	0e 94 09 0b 	call	0x1612	; 0x1612 <TIMER_tmr1Stop>
		ICU_g_flag = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <ICU_g_flag>
	}

}	
    16d6:	ff 91       	pop	r31
    16d8:	ef 91       	pop	r30
    16da:	bf 91       	pop	r27
    16dc:	af 91       	pop	r26
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	7f 91       	pop	r23
    16e4:	6f 91       	pop	r22
    16e6:	5f 91       	pop	r21
    16e8:	4f 91       	pop	r20
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <__vector_9>:
		
ISR(TIM1_OVF_INT)
{
    16f8:	1f 92       	push	r1
    16fa:	0f 92       	push	r0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
	u32_g_timer1Overflow++;
    1706:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u32_g_timer1Overflow>
    170a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u32_g_timer1Overflow+0x1>
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <u32_g_timer1Overflow+0x1>
    1714:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <u32_g_timer1Overflow>
    1718:	9f 91       	pop	r25
    171a:	8f 91       	pop	r24
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
    1726:	8f b7       	in	r24, 0x3f	; 63
    1728:	80 68       	ori	r24, 0x80	; 128
    172a:	8f bf       	out	0x3f, r24	; 63
    172c:	08 95       	ret

0000172e <TIMER0_PWM_ExecutedFunction>:
	TIMER0_start();
	
}

static void TIMER0_PWM_ExecutedFunction(void)
{
    172e:	cf 93       	push	r28
	Uchar8_t u8_Loc_counter = 0;
	if(u8_g_on_off_state == 0)
    1730:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_g_on_off_state>
    1734:	88 23       	and	r24, r24
    1736:	61 f0       	breq	.+24     	; 0x1750 <TIMER0_PWM_ExecutedFunction+0x22>
    1738:	c0 e0       	ldi	r28, 0x00	; 0
    173a:	1e c0       	rjmp	.+60     	; 0x1778 <TIMER0_PWM_ExecutedFunction+0x4a>
	{
		// switch level of cycle to LOW
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,LOW);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].pwm_pin,LOW);
    173c:	ec 2f       	mov	r30, r28
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	e3 50       	subi	r30, 0x03	; 3
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
{
	Uchar8_t u8_Loc_counter = 0;
	if(u8_g_on_off_state == 0)
	{
		// switch level of cycle to LOW
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    174c:	cf 5f       	subi	r28, 0xFF	; 255
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <TIMER0_PWM_ExecutedFunction+0x24>
    1750:	c0 e0       	ldi	r28, 0x00	; 0
    1752:	c2 30       	cpi	r28, 0x02	; 2
    1754:	98 f3       	brcs	.-26     	; 0x173c <TIMER0_PWM_ExecutedFunction+0xe>
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,LOW);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].pwm_pin,LOW);
		}
		TCNT0 = REG_SIZE - u8_g_OffTime;
    1756:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u8_g_OffTime>
    175a:	81 95       	neg	r24
    175c:	82 bf       	out	0x32, r24	; 50
		u8_g_on_off_state=1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <u8_g_on_off_state>
    1764:	11 c0       	rjmp	.+34     	; 0x1788 <TIMER0_PWM_ExecutedFunction+0x5a>
	{
		// switch level of cycle to HIGH
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
    1766:	ec 2f       	mov	r30, r28
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	e3 50       	subi	r30, 0x03	; 3
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	80 81       	ld	r24, Z
    1772:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>
		u8_g_on_off_state=1;
	}
	else
	{
		// switch level of cycle to HIGH
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    1776:	cf 5f       	subi	r28, 0xFF	; 255
    1778:	c2 30       	cpi	r28, 0x02	; 2
    177a:	a8 f3       	brcs	.-22     	; 0x1766 <TIMER0_PWM_ExecutedFunction+0x38>
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
		}
		TCNT0 = REG_SIZE - u8_g_OnTime;
    177c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <u8_g_OnTime>
    1780:	81 95       	neg	r24
    1782:	82 bf       	out	0x32, r24	; 50
		u8_g_on_off_state=0;
    1784:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <u8_g_on_off_state>
	}
}
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <TIMER0_init>:
/*Timer0 Initialization*/
void TIMER0_init(void)
{
	
	/*Normal Mode Select*/
	CLEAR_BIT(TCCR0,WGM00);
    178c:	83 b7       	in	r24, 0x33	; 51
	CLEAR_BIT(TCCR0,WGM01);
    178e:	87 7b       	andi	r24, 0xB7	; 183
    1790:	83 bf       	out	0x33, r24	; 51
	/*Timer Overflow Interrupt Enable*/
	SET_BIT(TIMSK,TOIE0);
    1792:	89 b7       	in	r24, 0x39	; 57
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	89 bf       	out	0x39, r24	; 57
	/*TGlobal Interrupt Enable*/
	sei();
    1798:	78 94       	sei
    179a:	08 95       	ret

0000179c <TIMER0_start>:

/*Timer0 Start Counting (set prescaller)*/
void TIMER0_start(void)
{
	/*Clear Three Clock Select Bits */
	TCCR0 &=0xF8;
    179c:	83 b7       	in	r24, 0x33	; 51
    179e:	88 7f       	andi	r24, 0xF8	; 248
	/*Set Selected Prescaller */
	TCCR0|=TIMER_SET_PRESCALER;
    17a0:	85 60       	ori	r24, 0x05	; 5
    17a2:	83 bf       	out	0x33, r24	; 51
    17a4:	08 95       	ret

000017a6 <TIMER0_stop>:
}
/*Timer0 Stop Counting (clear prescaller)*/
void TIMER0_stop(void)
{
	/*Clear Three Clock Select Bits */
	TCCR0 &=0xF8;
    17a6:	83 b7       	in	r24, 0x33	; 51
    17a8:	88 7f       	andi	r24, 0xF8	; 248
    17aa:	83 bf       	out	0x33, r24	; 51
    17ac:	08 95       	ret

000017ae <TIMER0_initPWM>:
}


void TIMER0_initPWM(void)
{
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
	Uchar8_t u8_Loc_counter = 0;
	TIMER0_init();
    17b4:	0e 94 c6 0b 	call	0x178c	; 0x178c <TIMER0_init>
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17b8:	c0 e0       	ldi	r28, 0x00	; 0
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <TIMER0_initPWM+0x2c>
	{
		//DIO_s8SETPinDir(st_pwm_configs[u8_Loc_counter].pwm_pin,OUTPUT);
		//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
		DIO_initpinn(st_pwm_configs[u8_Loc_counter].pwm_pin,OUTPUT);
    17bc:	0c 2f       	mov	r16, r28
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	03 50       	subi	r16, 0x03	; 3
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	f8 01       	movw	r30, r16
    17c8:	80 81       	ld	r24, Z
    17ca:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DIO_initpinn>
		DIO_writepinn(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	f8 01       	movw	r30, r16
    17d2:	80 81       	ld	r24, Z
    17d4:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_writepinn>

void TIMER0_initPWM(void)
{
	Uchar8_t u8_Loc_counter = 0;
	TIMER0_init();
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17d8:	cf 5f       	subi	r28, 0xFF	; 255
    17da:	c2 30       	cpi	r28, 0x02	; 2
    17dc:	78 f3       	brcs	.-34     	; 0x17bc <TIMER0_initPWM+0xe>
		DIO_initpinn(st_pwm_configs[u8_Loc_counter].pwm_pin,OUTPUT);
		DIO_writepinn(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
		
	}
	
}
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	08 95       	ret

000017e6 <TIMER0_setPwm>:
void TIMER0_setPwm(Uchar8_t u8_a_dutyCycle)
{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
	
	u8_g_OnTime =  ((u8_a_dutyCycle * REG_SIZE)/100);
    17ea:	e8 2f       	mov	r30, r24
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	98 2f       	mov	r25, r24
    17f0:	c4 e6       	ldi	r28, 0x64	; 100
    17f2:	d0 e0       	ldi	r29, 0x00	; 0
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	be 01       	movw	r22, r28
    17f8:	0e 94 31 10 	call	0x2062	; 0x2062 <__divmodhi4>
    17fc:	26 2f       	mov	r18, r22
    17fe:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <u8_g_OnTime>
	u8_g_OffTime = (((100 -u8_a_dutyCycle) * REG_SIZE)/100);
    1802:	ce 01       	movw	r24, r28
    1804:	8e 1b       	sub	r24, r30
    1806:	9f 0b       	sbc	r25, r31
    1808:	98 2f       	mov	r25, r24
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	be 01       	movw	r22, r28
    180e:	0e 94 31 10 	call	0x2062	; 0x2062 <__divmodhi4>
    1812:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <u8_g_OffTime>
	TCNT0 = REG_SIZE - u8_g_OnTime ;
    1816:	21 95       	neg	r18
    1818:	22 bf       	out	0x32, r18	; 50
	TIMER0_start();
    181a:	0e 94 ce 0b 	call	0x179c	; 0x179c <TIMER0_start>
	
}
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <__vector_11>:
	}
}


ISR(TIM0_OVF_INT)
{
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
	TIMER0_PWM_ExecutedFunction();
    1846:	0e 94 97 0b 	call	0x172e	; 0x172e <TIMER0_PWM_ExecutedFunction>
}
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <TIMER_TMR2NormalModeInit>:
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
        return TIMER_OK;
    } else {
        return TIMER_ERROR;
    }
}
    186c:	88 23       	and	r24, r24
    186e:	19 f0       	breq	.+6      	; 0x1876 <TIMER_TMR2NormalModeInit+0xa>
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	79 f0       	breq	.+30     	; 0x1892 <TIMER_TMR2NormalModeInit+0x26>
    1874:	16 c0       	rjmp	.+44     	; 0x18a2 <TIMER_TMR2NormalModeInit+0x36>
    1876:	85 b5       	in	r24, 0x25	; 37
    1878:	8f 7b       	andi	r24, 0xBF	; 191
    187a:	85 bd       	out	0x25, r24	; 37
    187c:	85 b5       	in	r24, 0x25	; 37
    187e:	87 7f       	andi	r24, 0xF7	; 247
    1880:	85 bd       	out	0x25, r24	; 37
    1882:	8f b7       	in	r24, 0x3f	; 63
    1884:	80 68       	ori	r24, 0x80	; 128
    1886:	8f bf       	out	0x3f, r24	; 63
    1888:	89 b7       	in	r24, 0x39	; 57
    188a:	80 64       	ori	r24, 0x40	; 64
    188c:	89 bf       	out	0x39, r24	; 57
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	08 95       	ret
    1892:	85 b5       	in	r24, 0x25	; 37
    1894:	8f 7b       	andi	r24, 0xBF	; 191
    1896:	85 bd       	out	0x25, r24	; 37
    1898:	85 b5       	in	r24, 0x25	; 37
    189a:	87 7f       	andi	r24, 0xF7	; 247
    189c:	85 bd       	out	0x25, r24	; 37
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	08 95       	ret
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	08 95       	ret

000018a6 <TIMER_TMR2Start>:
    18a6:	80 34       	cpi	r24, 0x40	; 64
    18a8:	91 05       	cpc	r25, r1
    18aa:	c1 f1       	breq	.+112    	; 0x191c <TIMER_TMR2Start+0x76>
    18ac:	50 f4       	brcc	.+20     	; 0x18c2 <TIMER_TMR2Start+0x1c>
    18ae:	88 30       	cpi	r24, 0x08	; 8
    18b0:	91 05       	cpc	r25, r1
    18b2:	01 f1       	breq	.+64     	; 0x18f4 <TIMER_TMR2Start+0x4e>
    18b4:	80 32       	cpi	r24, 0x20	; 32
    18b6:	91 05       	cpc	r25, r1
    18b8:	41 f1       	breq	.+80     	; 0x190a <TIMER_TMR2Start+0x64>
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <TIMER_TMR2Start+0x1a>
    18be:	58 c0       	rjmp	.+176    	; 0x1970 <TIMER_TMR2Start+0xca>
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <TIMER_TMR2Start+0x38>
    18c2:	81 15       	cp	r24, r1
    18c4:	21 e0       	ldi	r18, 0x01	; 1
    18c6:	92 07       	cpc	r25, r18
    18c8:	e9 f1       	breq	.+122    	; 0x1944 <TIMER_TMR2Start+0x9e>
    18ca:	81 15       	cp	r24, r1
    18cc:	24 e0       	ldi	r18, 0x04	; 4
    18ce:	92 07       	cpc	r25, r18
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <TIMER_TMR2Start+0x2e>
    18d2:	43 c0       	rjmp	.+134    	; 0x195a <TIMER_TMR2Start+0xb4>
    18d4:	80 38       	cpi	r24, 0x80	; 128
    18d6:	91 05       	cpc	r25, r1
    18d8:	09 f0       	breq	.+2      	; 0x18dc <TIMER_TMR2Start+0x36>
    18da:	4a c0       	rjmp	.+148    	; 0x1970 <TIMER_TMR2Start+0xca>
    18dc:	28 c0       	rjmp	.+80     	; 0x192e <TIMER_TMR2Start+0x88>
    18de:	85 b5       	in	r24, 0x25	; 37
    18e0:	8d 7f       	andi	r24, 0xFD	; 253
    18e2:	85 bd       	out	0x25, r24	; 37
    18e4:	85 b5       	in	r24, 0x25	; 37
    18e6:	8b 7f       	andi	r24, 0xFB	; 251
    18e8:	85 bd       	out	0x25, r24	; 37
    18ea:	85 b5       	in	r24, 0x25	; 37
    18ec:	81 60       	ori	r24, 0x01	; 1
    18ee:	85 bd       	out	0x25, r24	; 37
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	08 95       	ret
    18f4:	85 b5       	in	r24, 0x25	; 37
    18f6:	8e 7f       	andi	r24, 0xFE	; 254
    18f8:	85 bd       	out	0x25, r24	; 37
    18fa:	85 b5       	in	r24, 0x25	; 37
    18fc:	8b 7f       	andi	r24, 0xFB	; 251
    18fe:	85 bd       	out	0x25, r24	; 37
    1900:	85 b5       	in	r24, 0x25	; 37
    1902:	82 60       	ori	r24, 0x02	; 2
    1904:	85 bd       	out	0x25, r24	; 37
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	08 95       	ret
    190a:	85 b5       	in	r24, 0x25	; 37
    190c:	8b 7f       	andi	r24, 0xFB	; 251
    190e:	85 bd       	out	0x25, r24	; 37
    1910:	85 b5       	in	r24, 0x25	; 37
    1912:	82 60       	ori	r24, 0x02	; 2
    1914:	85 bd       	out	0x25, r24	; 37
    1916:	85 b5       	in	r24, 0x25	; 37
    1918:	81 60       	ori	r24, 0x01	; 1
    191a:	85 bd       	out	0x25, r24	; 37
    191c:	85 b5       	in	r24, 0x25	; 37
    191e:	84 60       	ori	r24, 0x04	; 4
    1920:	85 bd       	out	0x25, r24	; 37
    1922:	85 b5       	in	r24, 0x25	; 37
    1924:	8d 7f       	andi	r24, 0xFD	; 253
    1926:	85 bd       	out	0x25, r24	; 37
    1928:	85 b5       	in	r24, 0x25	; 37
    192a:	8e 7f       	andi	r24, 0xFE	; 254
    192c:	85 bd       	out	0x25, r24	; 37
    192e:	85 b5       	in	r24, 0x25	; 37
    1930:	8b 7f       	andi	r24, 0xFB	; 251
    1932:	85 bd       	out	0x25, r24	; 37
    1934:	85 b5       	in	r24, 0x25	; 37
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	85 bd       	out	0x25, r24	; 37
    193a:	85 b5       	in	r24, 0x25	; 37
    193c:	81 60       	ori	r24, 0x01	; 1
    193e:	85 bd       	out	0x25, r24	; 37
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	08 95       	ret
    1944:	85 b5       	in	r24, 0x25	; 37
    1946:	82 60       	ori	r24, 0x02	; 2
    1948:	85 bd       	out	0x25, r24	; 37
    194a:	85 b5       	in	r24, 0x25	; 37
    194c:	8e 7f       	andi	r24, 0xFE	; 254
    194e:	85 bd       	out	0x25, r24	; 37
    1950:	85 b5       	in	r24, 0x25	; 37
    1952:	84 60       	ori	r24, 0x04	; 4
    1954:	85 bd       	out	0x25, r24	; 37
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	08 95       	ret
    195a:	85 b5       	in	r24, 0x25	; 37
    195c:	82 60       	ori	r24, 0x02	; 2
    195e:	85 bd       	out	0x25, r24	; 37
    1960:	85 b5       	in	r24, 0x25	; 37
    1962:	84 60       	ori	r24, 0x04	; 4
    1964:	85 bd       	out	0x25, r24	; 37
    1966:	85 b5       	in	r24, 0x25	; 37
    1968:	81 60       	ori	r24, 0x01	; 1
    196a:	85 bd       	out	0x25, r24	; 37
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	08 95       	ret
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	08 95       	ret

00001974 <TMR_intDelay_ms>:
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	bc 01       	movw	r22, r24
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__floatunsisf>
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a e7       	ldi	r20, 0x7A	; 122
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__divsf3>
    1992:	6b 01       	movw	r12, r22
    1994:	7c 01       	movw	r14, r24
    1996:	27 e3       	ldi	r18, 0x37	; 55
    1998:	37 e3       	ldi	r19, 0x37	; 55
    199a:	46 e8       	ldi	r20, 0x86	; 134
    199c:	56 e4       	ldi	r21, 0x46	; 70
    199e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__gesf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	0c f4       	brge	.+2      	; 0x19a8 <TMR_intDelay_ms+0x34>
    19a6:	7c c0       	rjmp	.+248    	; 0x1aa0 <TMR_intDelay_ms+0x12c>
    19a8:	15 bc       	out	0x25, r1	; 37
    19aa:	2d eb       	ldi	r18, 0xBD	; 189
    19ac:	37 e3       	ldi	r19, 0x37	; 55
    19ae:	46 e8       	ldi	r20, 0x86	; 134
    19b0:	5e e3       	ldi	r21, 0x3E	; 62
    19b2:	c7 01       	movw	r24, r14
    19b4:	b6 01       	movw	r22, r12
    19b6:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__cmpsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	c4 f4       	brge	.+48     	; 0x19ee <TMR_intDelay_ms+0x7a>
    19be:	a7 01       	movw	r20, r14
    19c0:	96 01       	movw	r18, r12
    19c2:	6d eb       	ldi	r22, 0xBD	; 189
    19c4:	77 e3       	ldi	r23, 0x37	; 55
    19c6:	86 e8       	ldi	r24, 0x86	; 134
    19c8:	9e e3       	ldi	r25, 0x3E	; 62
    19ca:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__subsf3>
    19ce:	2d eb       	ldi	r18, 0xBD	; 189
    19d0:	37 e3       	ldi	r19, 0x37	; 55
    19d2:	46 e8       	ldi	r20, 0x86	; 134
    19d4:	5a e3       	ldi	r21, 0x3A	; 58
    19d6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__divsf3>
    19da:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
    19de:	64 bd       	out	0x24, r22	; 36
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <u16_g_overflow2Numbers+0x1>
    19e8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u16_g_overflow2Numbers>
    19ec:	4f c0       	rjmp	.+158    	; 0x1a8c <TMR_intDelay_ms+0x118>
    19ee:	2d eb       	ldi	r18, 0xBD	; 189
    19f0:	37 e3       	ldi	r19, 0x37	; 55
    19f2:	46 e8       	ldi	r20, 0x86	; 134
    19f4:	5e e3       	ldi	r21, 0x3E	; 62
    19f6:	c7 01       	movw	r24, r14
    19f8:	b6 01       	movw	r22, r12
    19fa:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__cmpsf2>
    19fe:	81 11       	cpse	r24, r1
    1a00:	08 c0       	rjmp	.+16     	; 0x1a12 <TMR_intDelay_ms+0x9e>
    1a02:	14 bc       	out	0x24, r1	; 36
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <u16_g_overflow2Numbers+0x1>
    1a0c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u16_g_overflow2Numbers>
    1a10:	3d c0       	rjmp	.+122    	; 0x1a8c <TMR_intDelay_ms+0x118>
    1a12:	2d eb       	ldi	r18, 0xBD	; 189
    1a14:	37 e3       	ldi	r19, 0x37	; 55
    1a16:	46 e8       	ldi	r20, 0x86	; 134
    1a18:	5e e3       	ldi	r21, 0x3E	; 62
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__divsf3>
    1a22:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <ceil>
    1a26:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
    1a2a:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <u16_g_overflow2Numbers+0x1>
    1a2e:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <u16_g_overflow2Numbers>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__floatunsisf>
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__subsf3>
    1a46:	2d eb       	ldi	r18, 0xBD	; 189
    1a48:	37 e3       	ldi	r19, 0x37	; 55
    1a4a:	46 e8       	ldi	r20, 0x86	; 134
    1a4c:	5e e3       	ldi	r21, 0x3E	; 62
    1a4e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__mulsf3>
    1a52:	9b 01       	movw	r18, r22
    1a54:	ac 01       	movw	r20, r24
    1a56:	c7 01       	movw	r24, r14
    1a58:	b6 01       	movw	r22, r12
    1a5a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__subsf3>
    1a5e:	2d eb       	ldi	r18, 0xBD	; 189
    1a60:	37 e3       	ldi	r19, 0x37	; 55
    1a62:	46 e8       	ldi	r20, 0x86	; 134
    1a64:	5a e3       	ldi	r21, 0x3A	; 58
    1a66:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__divsf3>
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	80 e8       	ldi	r24, 0x80	; 128
    1a74:	93 e4       	ldi	r25, 0x43	; 67
    1a76:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__subsf3>
    1a7a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
    1a7e:	64 bd       	out	0x24, r22	; 36
    1a80:	84 b5       	in	r24, 0x24	; 36
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <u16_g_tcnt2InitialVal+0x1>
    1a88:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <u16_g_tcnt2InitialVal>
    1a8c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u16_g_overflow2Ticks+0x1>
    1a90:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <u16_g_overflow2Ticks>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	94 e0       	ldi	r25, 0x04	; 4
    1a98:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <TIMER_TMR2Start>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <TMR_intDelay_ms+0x12e>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	df 90       	pop	r13
    1aa8:	cf 90       	pop	r12
    1aaa:	08 95       	ret

00001aac <TMR_TMR2Stop>:
    1aac:	85 b5       	in	r24, 0x25	; 37
    1aae:	8e 7f       	andi	r24, 0xFE	; 254
    1ab0:	85 bd       	out	0x25, r24	; 37
    1ab2:	85 b5       	in	r24, 0x25	; 37
    1ab4:	8d 7f       	andi	r24, 0xFD	; 253
    1ab6:	85 bd       	out	0x25, r24	; 37
    1ab8:	85 b5       	in	r24, 0x25	; 37
    1aba:	8b 7f       	andi	r24, 0xFB	; 251
    1abc:	85 bd       	out	0x25, r24	; 37
    1abe:	08 95       	ret

00001ac0 <__vector_5>:
 */
//__attribute__((optimize("O0")))
//ISR(TMR_ovfVect)

ISR(TIM2_OVF_INT)
{
    1ac0:	1f 92       	push	r1
    1ac2:	0f 92       	push	r0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	0f 92       	push	r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	2f 93       	push	r18
    1acc:	3f 93       	push	r19
    1ace:	4f 93       	push	r20
    1ad0:	5f 93       	push	r21
    1ad2:	6f 93       	push	r22
    1ad4:	7f 93       	push	r23
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	af 93       	push	r26
    1adc:	bf 93       	push	r27
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
	u16_g_overflow2Ticks++;
    1ae2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <u16_g_overflow2Ticks>
    1ae6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <u16_g_overflow2Ticks+0x1>
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <u16_g_overflow2Ticks+0x1>
    1af0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <u16_g_overflow2Ticks>
	//TMR_U8_TCNT2_REG = u16_g_tcnt2InitialVal;
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers )
    1af4:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <u16_g_overflow2Numbers>
    1af8:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <u16_g_overflow2Numbers+0x1>
    1afc:	82 17       	cp	r24, r18
    1afe:	93 07       	cpc	r25, r19
    1b00:	48 f0       	brcs	.+18     	; 0x1b14 <__vector_5+0x54>
	{
		u16_g_overflow2Ticks = 0;
    1b02:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u16_g_overflow2Ticks+0x1>
    1b06:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <u16_g_overflow2Ticks>
		u8_g_timeOut = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <u8_g_timeOut>
		TMR_TMR2Stop();
    1b10:	0e 94 56 0d 	call	0x1aac	; 0x1aac <TMR_TMR2Stop>
	}
}
    1b14:	ff 91       	pop	r31
    1b16:	ef 91       	pop	r30
    1b18:	bf 91       	pop	r27
    1b1a:	af 91       	pop	r26
    1b1c:	9f 91       	pop	r25
    1b1e:	8f 91       	pop	r24
    1b20:	7f 91       	pop	r23
    1b22:	6f 91       	pop	r22
    1b24:	5f 91       	pop	r21
    1b26:	4f 91       	pop	r20
    1b28:	3f 91       	pop	r19
    1b2a:	2f 91       	pop	r18
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <__subsf3>:
    1b36:	50 58       	subi	r21, 0x80	; 128

00001b38 <__addsf3>:
    1b38:	bb 27       	eor	r27, r27
    1b3a:	aa 27       	eor	r26, r26
    1b3c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__addsf3x>
    1b40:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_round>
    1b44:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fp_pscA>
    1b48:	38 f0       	brcs	.+14     	; 0x1b58 <__addsf3+0x20>
    1b4a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__fp_pscB>
    1b4e:	20 f0       	brcs	.+8      	; 0x1b58 <__addsf3+0x20>
    1b50:	39 f4       	brne	.+14     	; 0x1b60 <__addsf3+0x28>
    1b52:	9f 3f       	cpi	r25, 0xFF	; 255
    1b54:	19 f4       	brne	.+6      	; 0x1b5c <__addsf3+0x24>
    1b56:	26 f4       	brtc	.+8      	; 0x1b60 <__addsf3+0x28>
    1b58:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__fp_nan>
    1b5c:	0e f4       	brtc	.+2      	; 0x1b60 <__addsf3+0x28>
    1b5e:	e0 95       	com	r30
    1b60:	e7 fb       	bst	r30, 7
    1b62:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_inf>

00001b66 <__addsf3x>:
    1b66:	e9 2f       	mov	r30, r25
    1b68:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fp_split3>
    1b6c:	58 f3       	brcs	.-42     	; 0x1b44 <__addsf3+0xc>
    1b6e:	ba 17       	cp	r27, r26
    1b70:	62 07       	cpc	r22, r18
    1b72:	73 07       	cpc	r23, r19
    1b74:	84 07       	cpc	r24, r20
    1b76:	95 07       	cpc	r25, r21
    1b78:	20 f0       	brcs	.+8      	; 0x1b82 <__addsf3x+0x1c>
    1b7a:	79 f4       	brne	.+30     	; 0x1b9a <__addsf3x+0x34>
    1b7c:	a6 f5       	brtc	.+104    	; 0x1be6 <__addsf3x+0x80>
    1b7e:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_zero>
    1b82:	0e f4       	brtc	.+2      	; 0x1b86 <__addsf3x+0x20>
    1b84:	e0 95       	com	r30
    1b86:	0b 2e       	mov	r0, r27
    1b88:	ba 2f       	mov	r27, r26
    1b8a:	a0 2d       	mov	r26, r0
    1b8c:	0b 01       	movw	r0, r22
    1b8e:	b9 01       	movw	r22, r18
    1b90:	90 01       	movw	r18, r0
    1b92:	0c 01       	movw	r0, r24
    1b94:	ca 01       	movw	r24, r20
    1b96:	a0 01       	movw	r20, r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	ff 27       	eor	r31, r31
    1b9c:	59 1b       	sub	r21, r25
    1b9e:	99 f0       	breq	.+38     	; 0x1bc6 <__addsf3x+0x60>
    1ba0:	59 3f       	cpi	r21, 0xF9	; 249
    1ba2:	50 f4       	brcc	.+20     	; 0x1bb8 <__addsf3x+0x52>
    1ba4:	50 3e       	cpi	r21, 0xE0	; 224
    1ba6:	68 f1       	brcs	.+90     	; 0x1c02 <__addsf3x+0x9c>
    1ba8:	1a 16       	cp	r1, r26
    1baa:	f0 40       	sbci	r31, 0x00	; 0
    1bac:	a2 2f       	mov	r26, r18
    1bae:	23 2f       	mov	r18, r19
    1bb0:	34 2f       	mov	r19, r20
    1bb2:	44 27       	eor	r20, r20
    1bb4:	58 5f       	subi	r21, 0xF8	; 248
    1bb6:	f3 cf       	rjmp	.-26     	; 0x1b9e <__addsf3x+0x38>
    1bb8:	46 95       	lsr	r20
    1bba:	37 95       	ror	r19
    1bbc:	27 95       	ror	r18
    1bbe:	a7 95       	ror	r26
    1bc0:	f0 40       	sbci	r31, 0x00	; 0
    1bc2:	53 95       	inc	r21
    1bc4:	c9 f7       	brne	.-14     	; 0x1bb8 <__addsf3x+0x52>
    1bc6:	7e f4       	brtc	.+30     	; 0x1be6 <__addsf3x+0x80>
    1bc8:	1f 16       	cp	r1, r31
    1bca:	ba 0b       	sbc	r27, r26
    1bcc:	62 0b       	sbc	r22, r18
    1bce:	73 0b       	sbc	r23, r19
    1bd0:	84 0b       	sbc	r24, r20
    1bd2:	ba f0       	brmi	.+46     	; 0x1c02 <__addsf3x+0x9c>
    1bd4:	91 50       	subi	r25, 0x01	; 1
    1bd6:	a1 f0       	breq	.+40     	; 0x1c00 <__addsf3x+0x9a>
    1bd8:	ff 0f       	add	r31, r31
    1bda:	bb 1f       	adc	r27, r27
    1bdc:	66 1f       	adc	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	88 1f       	adc	r24, r24
    1be2:	c2 f7       	brpl	.-16     	; 0x1bd4 <__addsf3x+0x6e>
    1be4:	0e c0       	rjmp	.+28     	; 0x1c02 <__addsf3x+0x9c>
    1be6:	ba 0f       	add	r27, r26
    1be8:	62 1f       	adc	r22, r18
    1bea:	73 1f       	adc	r23, r19
    1bec:	84 1f       	adc	r24, r20
    1bee:	48 f4       	brcc	.+18     	; 0x1c02 <__addsf3x+0x9c>
    1bf0:	87 95       	ror	r24
    1bf2:	77 95       	ror	r23
    1bf4:	67 95       	ror	r22
    1bf6:	b7 95       	ror	r27
    1bf8:	f7 95       	ror	r31
    1bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    1bfc:	08 f0       	brcs	.+2      	; 0x1c00 <__addsf3x+0x9a>
    1bfe:	b0 cf       	rjmp	.-160    	; 0x1b60 <__addsf3+0x28>
    1c00:	93 95       	inc	r25
    1c02:	88 0f       	add	r24, r24
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <__addsf3x+0xa2>
    1c06:	99 27       	eor	r25, r25
    1c08:	ee 0f       	add	r30, r30
    1c0a:	97 95       	ror	r25
    1c0c:	87 95       	ror	r24
    1c0e:	08 95       	ret

00001c10 <ceil>:
    1c10:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__fp_trunc>
    1c14:	90 f0       	brcs	.+36     	; 0x1c3a <ceil+0x2a>
    1c16:	9f 37       	cpi	r25, 0x7F	; 127
    1c18:	48 f4       	brcc	.+18     	; 0x1c2c <ceil+0x1c>
    1c1a:	91 11       	cpse	r25, r1
    1c1c:	16 f4       	brtc	.+4      	; 0x1c22 <ceil+0x12>
    1c1e:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	80 e8       	ldi	r24, 0x80	; 128
    1c28:	9f e3       	ldi	r25, 0x3F	; 63
    1c2a:	08 95       	ret
    1c2c:	26 f0       	brts	.+8      	; 0x1c36 <ceil+0x26>
    1c2e:	1b 16       	cp	r1, r27
    1c30:	61 1d       	adc	r22, r1
    1c32:	71 1d       	adc	r23, r1
    1c34:	81 1d       	adc	r24, r1
    1c36:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__fp_mintl>
    1c3a:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__fp_mpack>

00001c3e <__cmpsf2>:
    1c3e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__fp_cmp>
    1c42:	08 f4       	brcc	.+2      	; 0x1c46 <__cmpsf2+0x8>
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	08 95       	ret

00001c48 <__divsf3>:
    1c48:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__divsf3x>
    1c4c:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_round>
    1c50:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__fp_pscB>
    1c54:	58 f0       	brcs	.+22     	; 0x1c6c <__divsf3+0x24>
    1c56:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fp_pscA>
    1c5a:	40 f0       	brcs	.+16     	; 0x1c6c <__divsf3+0x24>
    1c5c:	29 f4       	brne	.+10     	; 0x1c68 <__divsf3+0x20>
    1c5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c60:	29 f0       	breq	.+10     	; 0x1c6c <__divsf3+0x24>
    1c62:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_inf>
    1c66:	51 11       	cpse	r21, r1
    1c68:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>
    1c6c:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__fp_nan>

00001c70 <__divsf3x>:
    1c70:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fp_split3>
    1c74:	68 f3       	brcs	.-38     	; 0x1c50 <__divsf3+0x8>

00001c76 <__divsf3_pse>:
    1c76:	99 23       	and	r25, r25
    1c78:	b1 f3       	breq	.-20     	; 0x1c66 <__divsf3+0x1e>
    1c7a:	55 23       	and	r21, r21
    1c7c:	91 f3       	breq	.-28     	; 0x1c62 <__divsf3+0x1a>
    1c7e:	95 1b       	sub	r25, r21
    1c80:	55 0b       	sbc	r21, r21
    1c82:	bb 27       	eor	r27, r27
    1c84:	aa 27       	eor	r26, r26
    1c86:	62 17       	cp	r22, r18
    1c88:	73 07       	cpc	r23, r19
    1c8a:	84 07       	cpc	r24, r20
    1c8c:	38 f0       	brcs	.+14     	; 0x1c9c <__divsf3_pse+0x26>
    1c8e:	9f 5f       	subi	r25, 0xFF	; 255
    1c90:	5f 4f       	sbci	r21, 0xFF	; 255
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	44 1f       	adc	r20, r20
    1c98:	aa 1f       	adc	r26, r26
    1c9a:	a9 f3       	breq	.-22     	; 0x1c86 <__divsf3_pse+0x10>
    1c9c:	35 d0       	rcall	.+106    	; 0x1d08 <__divsf3_pse+0x92>
    1c9e:	0e 2e       	mov	r0, r30
    1ca0:	3a f0       	brmi	.+14     	; 0x1cb0 <__divsf3_pse+0x3a>
    1ca2:	e0 e8       	ldi	r30, 0x80	; 128
    1ca4:	32 d0       	rcall	.+100    	; 0x1d0a <__divsf3_pse+0x94>
    1ca6:	91 50       	subi	r25, 0x01	; 1
    1ca8:	50 40       	sbci	r21, 0x00	; 0
    1caa:	e6 95       	lsr	r30
    1cac:	00 1c       	adc	r0, r0
    1cae:	ca f7       	brpl	.-14     	; 0x1ca2 <__divsf3_pse+0x2c>
    1cb0:	2b d0       	rcall	.+86     	; 0x1d08 <__divsf3_pse+0x92>
    1cb2:	fe 2f       	mov	r31, r30
    1cb4:	29 d0       	rcall	.+82     	; 0x1d08 <__divsf3_pse+0x92>
    1cb6:	66 0f       	add	r22, r22
    1cb8:	77 1f       	adc	r23, r23
    1cba:	88 1f       	adc	r24, r24
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	26 17       	cp	r18, r22
    1cc0:	37 07       	cpc	r19, r23
    1cc2:	48 07       	cpc	r20, r24
    1cc4:	ab 07       	cpc	r26, r27
    1cc6:	b0 e8       	ldi	r27, 0x80	; 128
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <__divsf3_pse+0x56>
    1cca:	bb 0b       	sbc	r27, r27
    1ccc:	80 2d       	mov	r24, r0
    1cce:	bf 01       	movw	r22, r30
    1cd0:	ff 27       	eor	r31, r31
    1cd2:	93 58       	subi	r25, 0x83	; 131
    1cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd6:	3a f0       	brmi	.+14     	; 0x1ce6 <__divsf3_pse+0x70>
    1cd8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cda:	51 05       	cpc	r21, r1
    1cdc:	78 f0       	brcs	.+30     	; 0x1cfc <__divsf3_pse+0x86>
    1cde:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_inf>
    1ce2:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>
    1ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce8:	e4 f3       	brlt	.-8      	; 0x1ce2 <__divsf3_pse+0x6c>
    1cea:	98 3e       	cpi	r25, 0xE8	; 232
    1cec:	d4 f3       	brlt	.-12     	; 0x1ce2 <__divsf3_pse+0x6c>
    1cee:	86 95       	lsr	r24
    1cf0:	77 95       	ror	r23
    1cf2:	67 95       	ror	r22
    1cf4:	b7 95       	ror	r27
    1cf6:	f7 95       	ror	r31
    1cf8:	9f 5f       	subi	r25, 0xFF	; 255
    1cfa:	c9 f7       	brne	.-14     	; 0x1cee <__divsf3_pse+0x78>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	91 1d       	adc	r25, r1
    1d00:	96 95       	lsr	r25
    1d02:	87 95       	ror	r24
    1d04:	97 f9       	bld	r25, 7
    1d06:	08 95       	ret
    1d08:	e1 e0       	ldi	r30, 0x01	; 1
    1d0a:	66 0f       	add	r22, r22
    1d0c:	77 1f       	adc	r23, r23
    1d0e:	88 1f       	adc	r24, r24
    1d10:	bb 1f       	adc	r27, r27
    1d12:	62 17       	cp	r22, r18
    1d14:	73 07       	cpc	r23, r19
    1d16:	84 07       	cpc	r24, r20
    1d18:	ba 07       	cpc	r27, r26
    1d1a:	20 f0       	brcs	.+8      	; 0x1d24 <__divsf3_pse+0xae>
    1d1c:	62 1b       	sub	r22, r18
    1d1e:	73 0b       	sbc	r23, r19
    1d20:	84 0b       	sbc	r24, r20
    1d22:	ba 0b       	sbc	r27, r26
    1d24:	ee 1f       	adc	r30, r30
    1d26:	88 f7       	brcc	.-30     	; 0x1d0a <__divsf3_pse+0x94>
    1d28:	e0 95       	com	r30
    1d2a:	08 95       	ret

00001d2c <__fixsfsi>:
    1d2c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
    1d30:	68 94       	set
    1d32:	b1 11       	cpse	r27, r1
    1d34:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>
    1d38:	08 95       	ret

00001d3a <__fixunssfsi>:
    1d3a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__fp_splitA>
    1d3e:	88 f0       	brcs	.+34     	; 0x1d62 <__fixunssfsi+0x28>
    1d40:	9f 57       	subi	r25, 0x7F	; 127
    1d42:	98 f0       	brcs	.+38     	; 0x1d6a <__fixunssfsi+0x30>
    1d44:	b9 2f       	mov	r27, r25
    1d46:	99 27       	eor	r25, r25
    1d48:	b7 51       	subi	r27, 0x17	; 23
    1d4a:	b0 f0       	brcs	.+44     	; 0x1d78 <__fixunssfsi+0x3e>
    1d4c:	e1 f0       	breq	.+56     	; 0x1d86 <__fixunssfsi+0x4c>
    1d4e:	66 0f       	add	r22, r22
    1d50:	77 1f       	adc	r23, r23
    1d52:	88 1f       	adc	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	1a f0       	brmi	.+6      	; 0x1d5e <__fixunssfsi+0x24>
    1d58:	ba 95       	dec	r27
    1d5a:	c9 f7       	brne	.-14     	; 0x1d4e <__fixunssfsi+0x14>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <__fixunssfsi+0x4c>
    1d5e:	b1 30       	cpi	r27, 0x01	; 1
    1d60:	91 f0       	breq	.+36     	; 0x1d86 <__fixunssfsi+0x4c>
    1d62:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__fp_zero>
    1d66:	b1 e0       	ldi	r27, 0x01	; 1
    1d68:	08 95       	ret
    1d6a:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_zero>
    1d6e:	67 2f       	mov	r22, r23
    1d70:	78 2f       	mov	r23, r24
    1d72:	88 27       	eor	r24, r24
    1d74:	b8 5f       	subi	r27, 0xF8	; 248
    1d76:	39 f0       	breq	.+14     	; 0x1d86 <__fixunssfsi+0x4c>
    1d78:	b9 3f       	cpi	r27, 0xF9	; 249
    1d7a:	cc f3       	brlt	.-14     	; 0x1d6e <__fixunssfsi+0x34>
    1d7c:	86 95       	lsr	r24
    1d7e:	77 95       	ror	r23
    1d80:	67 95       	ror	r22
    1d82:	b3 95       	inc	r27
    1d84:	d9 f7       	brne	.-10     	; 0x1d7c <__fixunssfsi+0x42>
    1d86:	3e f4       	brtc	.+14     	; 0x1d96 <__fixunssfsi+0x5c>
    1d88:	90 95       	com	r25
    1d8a:	80 95       	com	r24
    1d8c:	70 95       	com	r23
    1d8e:	61 95       	neg	r22
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	8f 4f       	sbci	r24, 0xFF	; 255
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	08 95       	ret

00001d98 <__floatunsisf>:
    1d98:	e8 94       	clt
    1d9a:	09 c0       	rjmp	.+18     	; 0x1dae <__floatsisf+0x12>

00001d9c <__floatsisf>:
    1d9c:	97 fb       	bst	r25, 7
    1d9e:	3e f4       	brtc	.+14     	; 0x1dae <__floatsisf+0x12>
    1da0:	90 95       	com	r25
    1da2:	80 95       	com	r24
    1da4:	70 95       	com	r23
    1da6:	61 95       	neg	r22
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	99 23       	and	r25, r25
    1db0:	a9 f0       	breq	.+42     	; 0x1ddc <__floatsisf+0x40>
    1db2:	f9 2f       	mov	r31, r25
    1db4:	96 e9       	ldi	r25, 0x96	; 150
    1db6:	bb 27       	eor	r27, r27
    1db8:	93 95       	inc	r25
    1dba:	f6 95       	lsr	r31
    1dbc:	87 95       	ror	r24
    1dbe:	77 95       	ror	r23
    1dc0:	67 95       	ror	r22
    1dc2:	b7 95       	ror	r27
    1dc4:	f1 11       	cpse	r31, r1
    1dc6:	f8 cf       	rjmp	.-16     	; 0x1db8 <__floatsisf+0x1c>
    1dc8:	fa f4       	brpl	.+62     	; 0x1e08 <__floatsisf+0x6c>
    1dca:	bb 0f       	add	r27, r27
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <__floatsisf+0x36>
    1dce:	60 ff       	sbrs	r22, 0
    1dd0:	1b c0       	rjmp	.+54     	; 0x1e08 <__floatsisf+0x6c>
    1dd2:	6f 5f       	subi	r22, 0xFF	; 255
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <__floatsisf+0x6c>
    1ddc:	88 23       	and	r24, r24
    1dde:	11 f0       	breq	.+4      	; 0x1de4 <__floatsisf+0x48>
    1de0:	96 e9       	ldi	r25, 0x96	; 150
    1de2:	11 c0       	rjmp	.+34     	; 0x1e06 <__floatsisf+0x6a>
    1de4:	77 23       	and	r23, r23
    1de6:	21 f0       	breq	.+8      	; 0x1df0 <__floatsisf+0x54>
    1de8:	9e e8       	ldi	r25, 0x8E	; 142
    1dea:	87 2f       	mov	r24, r23
    1dec:	76 2f       	mov	r23, r22
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <__floatsisf+0x5e>
    1df0:	66 23       	and	r22, r22
    1df2:	71 f0       	breq	.+28     	; 0x1e10 <__floatsisf+0x74>
    1df4:	96 e8       	ldi	r25, 0x86	; 134
    1df6:	86 2f       	mov	r24, r22
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	2a f0       	brmi	.+10     	; 0x1e08 <__floatsisf+0x6c>
    1dfe:	9a 95       	dec	r25
    1e00:	66 0f       	add	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	da f7       	brpl	.-10     	; 0x1dfe <__floatsisf+0x62>
    1e08:	88 0f       	add	r24, r24
    1e0a:	96 95       	lsr	r25
    1e0c:	87 95       	ror	r24
    1e0e:	97 f9       	bld	r25, 7
    1e10:	08 95       	ret

00001e12 <__fp_cmp>:
    1e12:	99 0f       	add	r25, r25
    1e14:	00 08       	sbc	r0, r0
    1e16:	55 0f       	add	r21, r21
    1e18:	aa 0b       	sbc	r26, r26
    1e1a:	e0 e8       	ldi	r30, 0x80	; 128
    1e1c:	fe ef       	ldi	r31, 0xFE	; 254
    1e1e:	16 16       	cp	r1, r22
    1e20:	17 06       	cpc	r1, r23
    1e22:	e8 07       	cpc	r30, r24
    1e24:	f9 07       	cpc	r31, r25
    1e26:	c0 f0       	brcs	.+48     	; 0x1e58 <__fp_cmp+0x46>
    1e28:	12 16       	cp	r1, r18
    1e2a:	13 06       	cpc	r1, r19
    1e2c:	e4 07       	cpc	r30, r20
    1e2e:	f5 07       	cpc	r31, r21
    1e30:	98 f0       	brcs	.+38     	; 0x1e58 <__fp_cmp+0x46>
    1e32:	62 1b       	sub	r22, r18
    1e34:	73 0b       	sbc	r23, r19
    1e36:	84 0b       	sbc	r24, r20
    1e38:	95 0b       	sbc	r25, r21
    1e3a:	39 f4       	brne	.+14     	; 0x1e4a <__fp_cmp+0x38>
    1e3c:	0a 26       	eor	r0, r26
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <__fp_cmp+0x46>
    1e40:	23 2b       	or	r18, r19
    1e42:	24 2b       	or	r18, r20
    1e44:	25 2b       	or	r18, r21
    1e46:	21 f4       	brne	.+8      	; 0x1e50 <__fp_cmp+0x3e>
    1e48:	08 95       	ret
    1e4a:	0a 26       	eor	r0, r26
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <__fp_cmp+0x3e>
    1e4e:	a1 40       	sbci	r26, 0x01	; 1
    1e50:	a6 95       	lsr	r26
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	81 1d       	adc	r24, r1
    1e56:	81 1d       	adc	r24, r1
    1e58:	08 95       	ret

00001e5a <__fp_inf>:
    1e5a:	97 f9       	bld	r25, 7
    1e5c:	9f 67       	ori	r25, 0x7F	; 127
    1e5e:	80 e8       	ldi	r24, 0x80	; 128
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	08 95       	ret

00001e66 <__fp_mintl>:
    1e66:	88 23       	and	r24, r24
    1e68:	71 f4       	brne	.+28     	; 0x1e86 <__fp_mintl+0x20>
    1e6a:	77 23       	and	r23, r23
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <__fp_mintl+0x10>
    1e6e:	98 50       	subi	r25, 0x08	; 8
    1e70:	87 2b       	or	r24, r23
    1e72:	76 2f       	mov	r23, r22
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <__fp_mintl+0x1e>
    1e76:	66 23       	and	r22, r22
    1e78:	11 f4       	brne	.+4      	; 0x1e7e <__fp_mintl+0x18>
    1e7a:	99 27       	eor	r25, r25
    1e7c:	0d c0       	rjmp	.+26     	; 0x1e98 <__fp_mintl+0x32>
    1e7e:	90 51       	subi	r25, 0x10	; 16
    1e80:	86 2b       	or	r24, r22
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	2a f0       	brmi	.+10     	; 0x1e92 <__fp_mintl+0x2c>
    1e88:	9a 95       	dec	r25
    1e8a:	66 0f       	add	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 1f       	adc	r24, r24
    1e90:	da f7       	brpl	.-10     	; 0x1e88 <__fp_mintl+0x22>
    1e92:	88 0f       	add	r24, r24
    1e94:	96 95       	lsr	r25
    1e96:	87 95       	ror	r24
    1e98:	97 f9       	bld	r25, 7
    1e9a:	08 95       	ret

00001e9c <__fp_mpack>:
    1e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e9e:	31 f0       	breq	.+12     	; 0x1eac <__fp_mpack_finite+0xc>

00001ea0 <__fp_mpack_finite>:
    1ea0:	91 50       	subi	r25, 0x01	; 1
    1ea2:	20 f4       	brcc	.+8      	; 0x1eac <__fp_mpack_finite+0xc>
    1ea4:	87 95       	ror	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b7 95       	ror	r27
    1eac:	88 0f       	add	r24, r24
    1eae:	91 1d       	adc	r25, r1
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	08 95       	ret

00001eb8 <__fp_nan>:
    1eb8:	9f ef       	ldi	r25, 0xFF	; 255
    1eba:	80 ec       	ldi	r24, 0xC0	; 192
    1ebc:	08 95       	ret

00001ebe <__fp_pscA>:
    1ebe:	00 24       	eor	r0, r0
    1ec0:	0a 94       	dec	r0
    1ec2:	16 16       	cp	r1, r22
    1ec4:	17 06       	cpc	r1, r23
    1ec6:	18 06       	cpc	r1, r24
    1ec8:	09 06       	cpc	r0, r25
    1eca:	08 95       	ret

00001ecc <__fp_pscB>:
    1ecc:	00 24       	eor	r0, r0
    1ece:	0a 94       	dec	r0
    1ed0:	12 16       	cp	r1, r18
    1ed2:	13 06       	cpc	r1, r19
    1ed4:	14 06       	cpc	r1, r20
    1ed6:	05 06       	cpc	r0, r21
    1ed8:	08 95       	ret

00001eda <__fp_round>:
    1eda:	09 2e       	mov	r0, r25
    1edc:	03 94       	inc	r0
    1ede:	00 0c       	add	r0, r0
    1ee0:	11 f4       	brne	.+4      	; 0x1ee6 <__fp_round+0xc>
    1ee2:	88 23       	and	r24, r24
    1ee4:	52 f0       	brmi	.+20     	; 0x1efa <__fp_round+0x20>
    1ee6:	bb 0f       	add	r27, r27
    1ee8:	40 f4       	brcc	.+16     	; 0x1efa <__fp_round+0x20>
    1eea:	bf 2b       	or	r27, r31
    1eec:	11 f4       	brne	.+4      	; 0x1ef2 <__fp_round+0x18>
    1eee:	60 ff       	sbrs	r22, 0
    1ef0:	04 c0       	rjmp	.+8      	; 0x1efa <__fp_round+0x20>
    1ef2:	6f 5f       	subi	r22, 0xFF	; 255
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	08 95       	ret

00001efc <__fp_split3>:
    1efc:	57 fd       	sbrc	r21, 7
    1efe:	90 58       	subi	r25, 0x80	; 128
    1f00:	44 0f       	add	r20, r20
    1f02:	55 1f       	adc	r21, r21
    1f04:	59 f0       	breq	.+22     	; 0x1f1c <__fp_splitA+0x10>
    1f06:	5f 3f       	cpi	r21, 0xFF	; 255
    1f08:	71 f0       	breq	.+28     	; 0x1f26 <__fp_splitA+0x1a>
    1f0a:	47 95       	ror	r20

00001f0c <__fp_splitA>:
    1f0c:	88 0f       	add	r24, r24
    1f0e:	97 fb       	bst	r25, 7
    1f10:	99 1f       	adc	r25, r25
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <__fp_splitA+0x20>
    1f14:	9f 3f       	cpi	r25, 0xFF	; 255
    1f16:	79 f0       	breq	.+30     	; 0x1f36 <__fp_splitA+0x2a>
    1f18:	87 95       	ror	r24
    1f1a:	08 95       	ret
    1f1c:	12 16       	cp	r1, r18
    1f1e:	13 06       	cpc	r1, r19
    1f20:	14 06       	cpc	r1, r20
    1f22:	55 1f       	adc	r21, r21
    1f24:	f2 cf       	rjmp	.-28     	; 0x1f0a <__fp_split3+0xe>
    1f26:	46 95       	lsr	r20
    1f28:	f1 df       	rcall	.-30     	; 0x1f0c <__fp_splitA>
    1f2a:	08 c0       	rjmp	.+16     	; 0x1f3c <__fp_splitA+0x30>
    1f2c:	16 16       	cp	r1, r22
    1f2e:	17 06       	cpc	r1, r23
    1f30:	18 06       	cpc	r1, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	f1 cf       	rjmp	.-30     	; 0x1f18 <__fp_splitA+0xc>
    1f36:	86 95       	lsr	r24
    1f38:	71 05       	cpc	r23, r1
    1f3a:	61 05       	cpc	r22, r1
    1f3c:	08 94       	sec
    1f3e:	08 95       	ret

00001f40 <__fp_trunc>:
    1f40:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__fp_splitA>
    1f44:	a0 f0       	brcs	.+40     	; 0x1f6e <__fp_trunc+0x2e>
    1f46:	be e7       	ldi	r27, 0x7E	; 126
    1f48:	b9 17       	cp	r27, r25
    1f4a:	88 f4       	brcc	.+34     	; 0x1f6e <__fp_trunc+0x2e>
    1f4c:	bb 27       	eor	r27, r27
    1f4e:	9f 38       	cpi	r25, 0x8F	; 143
    1f50:	60 f4       	brcc	.+24     	; 0x1f6a <__fp_trunc+0x2a>
    1f52:	16 16       	cp	r1, r22
    1f54:	b1 1d       	adc	r27, r1
    1f56:	67 2f       	mov	r22, r23
    1f58:	78 2f       	mov	r23, r24
    1f5a:	88 27       	eor	r24, r24
    1f5c:	98 5f       	subi	r25, 0xF8	; 248
    1f5e:	f7 cf       	rjmp	.-18     	; 0x1f4e <__fp_trunc+0xe>
    1f60:	86 95       	lsr	r24
    1f62:	77 95       	ror	r23
    1f64:	67 95       	ror	r22
    1f66:	b1 1d       	adc	r27, r1
    1f68:	93 95       	inc	r25
    1f6a:	96 39       	cpi	r25, 0x96	; 150
    1f6c:	c8 f3       	brcs	.-14     	; 0x1f60 <__fp_trunc+0x20>
    1f6e:	08 95       	ret

00001f70 <__fp_zero>:
    1f70:	e8 94       	clt

00001f72 <__fp_szero>:
    1f72:	bb 27       	eor	r27, r27
    1f74:	66 27       	eor	r22, r22
    1f76:	77 27       	eor	r23, r23
    1f78:	cb 01       	movw	r24, r22
    1f7a:	97 f9       	bld	r25, 7
    1f7c:	08 95       	ret

00001f7e <__gesf2>:
    1f7e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__fp_cmp>
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <__gesf2+0x8>
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	08 95       	ret

00001f88 <__mulsf3>:
    1f88:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__mulsf3x>
    1f8c:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_round>
    1f90:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fp_pscA>
    1f94:	38 f0       	brcs	.+14     	; 0x1fa4 <__mulsf3+0x1c>
    1f96:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__fp_pscB>
    1f9a:	20 f0       	brcs	.+8      	; 0x1fa4 <__mulsf3+0x1c>
    1f9c:	95 23       	and	r25, r21
    1f9e:	11 f0       	breq	.+4      	; 0x1fa4 <__mulsf3+0x1c>
    1fa0:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_inf>
    1fa4:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__fp_nan>
    1fa8:	11 24       	eor	r1, r1
    1faa:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>

00001fae <__mulsf3x>:
    1fae:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fp_split3>
    1fb2:	70 f3       	brcs	.-36     	; 0x1f90 <__mulsf3+0x8>

00001fb4 <__mulsf3_pse>:
    1fb4:	95 9f       	mul	r25, r21
    1fb6:	c1 f3       	breq	.-16     	; 0x1fa8 <__mulsf3+0x20>
    1fb8:	95 0f       	add	r25, r21
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	55 1f       	adc	r21, r21
    1fbe:	62 9f       	mul	r22, r18
    1fc0:	f0 01       	movw	r30, r0
    1fc2:	72 9f       	mul	r23, r18
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	f0 0d       	add	r31, r0
    1fc8:	b1 1d       	adc	r27, r1
    1fca:	63 9f       	mul	r22, r19
    1fcc:	aa 27       	eor	r26, r26
    1fce:	f0 0d       	add	r31, r0
    1fd0:	b1 1d       	adc	r27, r1
    1fd2:	aa 1f       	adc	r26, r26
    1fd4:	64 9f       	mul	r22, r20
    1fd6:	66 27       	eor	r22, r22
    1fd8:	b0 0d       	add	r27, r0
    1fda:	a1 1d       	adc	r26, r1
    1fdc:	66 1f       	adc	r22, r22
    1fde:	82 9f       	mul	r24, r18
    1fe0:	22 27       	eor	r18, r18
    1fe2:	b0 0d       	add	r27, r0
    1fe4:	a1 1d       	adc	r26, r1
    1fe6:	62 1f       	adc	r22, r18
    1fe8:	73 9f       	mul	r23, r19
    1fea:	b0 0d       	add	r27, r0
    1fec:	a1 1d       	adc	r26, r1
    1fee:	62 1f       	adc	r22, r18
    1ff0:	83 9f       	mul	r24, r19
    1ff2:	a0 0d       	add	r26, r0
    1ff4:	61 1d       	adc	r22, r1
    1ff6:	22 1f       	adc	r18, r18
    1ff8:	74 9f       	mul	r23, r20
    1ffa:	33 27       	eor	r19, r19
    1ffc:	a0 0d       	add	r26, r0
    1ffe:	61 1d       	adc	r22, r1
    2000:	23 1f       	adc	r18, r19
    2002:	84 9f       	mul	r24, r20
    2004:	60 0d       	add	r22, r0
    2006:	21 1d       	adc	r18, r1
    2008:	82 2f       	mov	r24, r18
    200a:	76 2f       	mov	r23, r22
    200c:	6a 2f       	mov	r22, r26
    200e:	11 24       	eor	r1, r1
    2010:	9f 57       	subi	r25, 0x7F	; 127
    2012:	50 40       	sbci	r21, 0x00	; 0
    2014:	9a f0       	brmi	.+38     	; 0x203c <__mulsf3_pse+0x88>
    2016:	f1 f0       	breq	.+60     	; 0x2054 <__mulsf3_pse+0xa0>
    2018:	88 23       	and	r24, r24
    201a:	4a f0       	brmi	.+18     	; 0x202e <__mulsf3_pse+0x7a>
    201c:	ee 0f       	add	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	bb 1f       	adc	r27, r27
    2022:	66 1f       	adc	r22, r22
    2024:	77 1f       	adc	r23, r23
    2026:	88 1f       	adc	r24, r24
    2028:	91 50       	subi	r25, 0x01	; 1
    202a:	50 40       	sbci	r21, 0x00	; 0
    202c:	a9 f7       	brne	.-22     	; 0x2018 <__mulsf3_pse+0x64>
    202e:	9e 3f       	cpi	r25, 0xFE	; 254
    2030:	51 05       	cpc	r21, r1
    2032:	80 f0       	brcs	.+32     	; 0x2054 <__mulsf3_pse+0xa0>
    2034:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_inf>
    2038:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>
    203c:	5f 3f       	cpi	r21, 0xFF	; 255
    203e:	e4 f3       	brlt	.-8      	; 0x2038 <__mulsf3_pse+0x84>
    2040:	98 3e       	cpi	r25, 0xE8	; 232
    2042:	d4 f3       	brlt	.-12     	; 0x2038 <__mulsf3_pse+0x84>
    2044:	86 95       	lsr	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	b7 95       	ror	r27
    204c:	f7 95       	ror	r31
    204e:	e7 95       	ror	r30
    2050:	9f 5f       	subi	r25, 0xFF	; 255
    2052:	c1 f7       	brne	.-16     	; 0x2044 <__mulsf3_pse+0x90>
    2054:	fe 2b       	or	r31, r30
    2056:	88 0f       	add	r24, r24
    2058:	91 1d       	adc	r25, r1
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	97 f9       	bld	r25, 7
    2060:	08 95       	ret

00002062 <__divmodhi4>:
    2062:	97 fb       	bst	r25, 7
    2064:	07 2e       	mov	r0, r23
    2066:	16 f4       	brtc	.+4      	; 0x206c <__divmodhi4+0xa>
    2068:	00 94       	com	r0
    206a:	07 d0       	rcall	.+14     	; 0x207a <__divmodhi4_neg1>
    206c:	77 fd       	sbrc	r23, 7
    206e:	09 d0       	rcall	.+18     	; 0x2082 <__divmodhi4_neg2>
    2070:	0e 94 4b 10 	call	0x2096	; 0x2096 <__udivmodhi4>
    2074:	07 fc       	sbrc	r0, 7
    2076:	05 d0       	rcall	.+10     	; 0x2082 <__divmodhi4_neg2>
    2078:	3e f4       	brtc	.+14     	; 0x2088 <__divmodhi4_exit>

0000207a <__divmodhi4_neg1>:
    207a:	90 95       	com	r25
    207c:	81 95       	neg	r24
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	08 95       	ret

00002082 <__divmodhi4_neg2>:
    2082:	70 95       	com	r23
    2084:	61 95       	neg	r22
    2086:	7f 4f       	sbci	r23, 0xFF	; 255

00002088 <__divmodhi4_exit>:
    2088:	08 95       	ret

0000208a <__tablejump2__>:
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	05 90       	lpm	r0, Z+
    2090:	f4 91       	lpm	r31, Z
    2092:	e0 2d       	mov	r30, r0
    2094:	09 94       	ijmp

00002096 <__udivmodhi4>:
    2096:	aa 1b       	sub	r26, r26
    2098:	bb 1b       	sub	r27, r27
    209a:	51 e1       	ldi	r21, 0x11	; 17
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <__udivmodhi4_ep>

0000209e <__udivmodhi4_loop>:
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	a6 17       	cp	r26, r22
    20a4:	b7 07       	cpc	r27, r23
    20a6:	10 f0       	brcs	.+4      	; 0x20ac <__udivmodhi4_ep>
    20a8:	a6 1b       	sub	r26, r22
    20aa:	b7 0b       	sbc	r27, r23

000020ac <__udivmodhi4_ep>:
    20ac:	88 1f       	adc	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	5a 95       	dec	r21
    20b2:	a9 f7       	brne	.-22     	; 0x209e <__udivmodhi4_loop>
    20b4:	80 95       	com	r24
    20b6:	90 95       	com	r25
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	08 95       	ret

000020be <_exit>:
    20be:	f8 94       	cli

000020c0 <__stop_program>:
    20c0:	ff cf       	rjmp	.-2      	; 0x20c0 <__stop_program>
