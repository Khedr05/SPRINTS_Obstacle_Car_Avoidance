
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  000020aa  0000213e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080010c  0080010c  000021ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000221c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049bf  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017d1  00000000  00000000  00007027  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002928  00000000  00000000  000087f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000085c  00000000  00000000  0000b120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001627  00000000  00000000  0000b97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b5  00000000  00000000  0000cfa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000f358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	15 01       	movw	r2, r10
      56:	90 00       	.word	0x0090	; ????
      58:	96 00       	.word	0x0096	; ????
      5a:	ee 00       	.word	0x00ee	; ????
      5c:	f6 00       	.word	0x00f6	; ????
      5e:	00 01       	movw	r0, r0
      60:	0a 01       	movw	r0, r20
      62:	12 01       	movw	r2, r4

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea ea       	ldi	r30, 0xAA	; 170
      78:	f0 e2       	ldi	r31, 0x20	; 32
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	ac e0       	ldi	r26, 0x0C	; 12
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	af 32       	cpi	r26, 0x2F	; 47
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 08 06 	call	0xc10	; 0xc10 <main>
      9a:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <app_init>:
Uchar8_t u8_g_startFlag = 0;
Uchar8_t u8_g_stopFlag = 0;

void app_init()
{
	ultrasonic_vInit();
      a2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <ultrasonic_vInit>
	LCD_Init();
      a6:	0e 94 92 04 	call	0x924	; 0x924 <LCD_Init>
	PUSH_BTN_intialize();
      aa:	0e 94 71 05 	call	0xae2	; 0xae2 <PUSH_BTN_intialize>
	TIMER_TMR2NormalModeInit(ENABLED);
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <TIMER_TMR2NormalModeInit>
	KEYPAD_init();
      b4:	0e 94 9f 02 	call	0x53e	; 0x53e <KEYPAD_init>
	DCM_motorInit(ST_g_carMotors);
      b8:	81 e6       	ldi	r24, 0x61	; 97
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 b0 04 	call	0x960	; 0x960 <DCM_motorInit>
      c0:	08 95       	ret

000000c2 <app_main>:
}

void app_main()
{
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
	keyState = KEYPAD_getButton();
      ca:	0e 94 c6 02 	call	0x58c	; 0x58c <KEYPAD_getButton>
      ce:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <keyState>
	if(keyState == KEY_1 && u8_g_startFlag==0)
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	49 f4       	brne	.+18     	; 0xe8 <app_main+0x26>
      d6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
      da:	91 11       	cpse	r25, r1
      dc:	05 c0       	rjmp	.+10     	; 0xe8 <app_main+0x26>
	{
	
	     en_g_state = SET_DEFAULT_ROTATION;
      de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
		 u8_g_startFlag = 1;
      e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
      e6:	0f c0       	rjmp	.+30     	; 0x106 <app_main+0x44>
	}
	else if(keyState == KEY_2)
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	21 f4       	brne	.+8      	; 0xf4 <app_main+0x32>
	{ 
		en_g_state = STOP;
      ec:	87 e0       	ldi	r24, 0x07	; 7
      ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
      f2:	09 c0       	rjmp	.+18     	; 0x106 <app_main+0x44>
	}
	
	else if(keyState == KEY_1 && u8_g_startFlag == 1)
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	39 f4       	brne	.+14     	; 0x106 <app_main+0x44>
      f8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	19 f4       	brne	.+6      	; 0x106 <app_main+0x44>
	{
		en_g_state = CAR_SCANING;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
	}
	
	
	switch(en_g_state)
     106:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <en_g_state>
     10a:	8e 2f       	mov	r24, r30
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	88 30       	cpi	r24, 0x08	; 8
     110:	91 05       	cpc	r25, r1
     112:	08 f0       	brcs	.+2      	; 0x116 <app_main+0x54>
     114:	8c c0       	rjmp	.+280    	; 0x22e <app_main+0x16c>
     116:	fc 01       	movw	r30, r24
     118:	e6 5d       	subi	r30, 0xD6	; 214
     11a:	ff 4f       	sbci	r31, 0xFF	; 255
     11c:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__tablejump2__>
	{
		case SET_DEFAULT_ROTATION :
		{
			setDefaultRotation();
     120:	0e 94 1c 01 	call	0x238	; 0x238 <setDefaultRotation>
			en_g_state = CAR_SCANING;
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
			break;
     12a:	81 c0       	rjmp	.+258    	; 0x22e <app_main+0x16c>
		}
		case CAR_SCANING :
		{
			
			ultrasonic_vGetDistance(&f64_g_obstcaleDistance);
     12c:	80 e1       	ldi	r24, 0x10	; 16
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 be 05 	call	0xb7c	; 0xb7c <ultrasonic_vGetDistance>
			if(f64_g_obstcaleDistance > 70)
     134:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <f64_g_obstcaleDistance>
     138:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <f64_g_obstcaleDistance+0x1>
     13c:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <f64_g_obstcaleDistance+0x2>
     140:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <f64_g_obstcaleDistance+0x3>
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4c e8       	ldi	r20, 0x8C	; 140
     14a:	52 e4       	ldi	r21, 0x42	; 66
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__gesf2>
     154:	18 16       	cp	r1, r24
     156:	24 f4       	brge	.+8      	; 0x160 <app_main+0x9e>
			{
				en_g_state = MORE_THAN_70_CM;
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
     15e:	67 c0       	rjmp	.+206    	; 0x22e <app_main+0x16c>
			}
			else if(f64_g_obstcaleDistance <= 70 && f64_g_obstcaleDistance > 30)
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	4c e8       	ldi	r20, 0x8C	; 140
     166:	52 e4       	ldi	r21, 0x42	; 66
     168:	c7 01       	movw	r24, r14
     16a:	b6 01       	movw	r22, r12
     16c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__cmpsf2>
     170:	18 16       	cp	r1, r24
     172:	74 f0       	brlt	.+28     	; 0x190 <app_main+0xce>
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 ef       	ldi	r20, 0xF0	; 240
     17a:	51 e4       	ldi	r21, 0x41	; 65
     17c:	c7 01       	movw	r24, r14
     17e:	b6 01       	movw	r22, r12
     180:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__gesf2>
     184:	18 16       	cp	r1, r24
     186:	24 f4       	brge	.+8      	; 0x190 <app_main+0xce>
			{
				en_g_state = MORE_THAN_30_CM;
     188:	84 e0       	ldi	r24, 0x04	; 4
     18a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
     18e:	4f c0       	rjmp	.+158    	; 0x22e <app_main+0x16c>
			}
			else if(f64_g_obstcaleDistance <= 30 && f64_g_obstcaleDistance > 20)
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 ef       	ldi	r20, 0xF0	; 240
     196:	51 e4       	ldi	r21, 0x41	; 65
     198:	c7 01       	movw	r24, r14
     19a:	b6 01       	movw	r22, r12
     19c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__cmpsf2>
     1a0:	18 16       	cp	r1, r24
     1a2:	74 f0       	brlt	.+28     	; 0x1c0 <app_main+0xfe>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 ea       	ldi	r20, 0xA0	; 160
     1aa:	51 e4       	ldi	r21, 0x41	; 65
     1ac:	c7 01       	movw	r24, r14
     1ae:	b6 01       	movw	r22, r12
     1b0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__gesf2>
     1b4:	18 16       	cp	r1, r24
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <app_main+0xfe>
			{
				en_g_state = MORE_THAN_20_CM;
     1b8:	85 e0       	ldi	r24, 0x05	; 5
     1ba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
     1be:	37 c0       	rjmp	.+110    	; 0x22e <app_main+0x16c>
			}
			else if(f64_g_obstcaleDistance < 20)
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 ea       	ldi	r20, 0xA0	; 160
     1c6:	51 e4       	ldi	r21, 0x41	; 65
     1c8:	c7 01       	movw	r24, r14
     1ca:	b6 01       	movw	r22, r12
     1cc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__cmpsf2>
     1d0:	88 23       	and	r24, r24
     1d2:	6c f5       	brge	.+90     	; 0x22e <app_main+0x16c>
			{
				en_g_state = LESS_THAN_20_CM;
     1d4:	86 e0       	ldi	r24, 0x06	; 6
     1d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
     1da:	29 c0       	rjmp	.+82     	; 0x22e <app_main+0x16c>
			
			break;
		}
		case MORE_THAN_70_CM :
		{
			u8_g_lessThan20Flag = 0;
     1dc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <u8_g_lessThan20Flag>
			obstcaleMoreThan70();
     1e0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <obstcaleMoreThan70>
			en_g_state = CAR_SCANING;
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
			break;
     1ea:	21 c0       	rjmp	.+66     	; 0x22e <app_main+0x16c>
		}
		case MORE_THAN_30_CM:
		{
			u8_g_moreThan70Flag = 0;
     1ec:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <u8_g_moreThan70Flag>
			u8_g_lessThan20Flag = 0;
     1f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <u8_g_lessThan20Flag>
			obstcaleMoreThan30();
     1f4:	0e 94 14 02 	call	0x428	; 0x428 <obstcaleMoreThan30>
			en_g_state = CAR_SCANING;
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
			break;
     1fe:	17 c0       	rjmp	.+46     	; 0x22e <app_main+0x16c>
		}
		
		case MORE_THAN_20_CM:
		{
			u8_g_moreThan70Flag = 0;
     200:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <u8_g_moreThan70Flag>
			u8_g_lessThan20Flag = 0;
     204:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <u8_g_lessThan20Flag>
			obstcaleMoreThan20();
     208:	0e 94 28 02 	call	0x450	; 0x450 <obstcaleMoreThan20>
			en_g_state = CAR_SCANING;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
			break;
     212:	0d c0       	rjmp	.+26     	; 0x22e <app_main+0x16c>
		}
		
		
		case LESS_THAN_20_CM:
		{
			u8_g_moreThan70Flag = 0;
     214:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <u8_g_moreThan70Flag>
			obstcaleLessThan20();
     218:	0e 94 53 02 	call	0x4a6	; 0x4a6 <obstcaleLessThan20>
			en_g_state = CAR_SCANING;
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <en_g_state>
			break;
     222:	05 c0       	rjmp	.+10     	; 0x22e <app_main+0x16c>
		}
		
		
		case STOP:
		{
			Car_Stop();
     224:	0e 94 83 02 	call	0x506	; 0x506 <Car_Stop>
			break;
     228:	02 c0       	rjmp	.+4      	; 0x22e <app_main+0x16c>
		}
		
		case STATE_IDLE:
		{
			LCD_update_stop();
     22a:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_update_stop>
			break;
		}
	}
	
     22e:	ff 90       	pop	r15
     230:	ef 90       	pop	r14
     232:	df 90       	pop	r13
     234:	cf 90       	pop	r12
     236:	08 95       	ret

00000238 <setDefaultRotation>:



void setDefaultRotation()
{
	LCD_Clear();
     238:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_Clear>
	LCD_SetCursor(0,0);
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
     244:	85 e7       	ldi	r24, 0x75	; 117
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	LCD_SetCursor(1,0);
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Right");
     254:	83 e8       	ldi	r24, 0x83	; 131
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	TMR_intDelay_ms(5000);
     25c:	88 e8       	ldi	r24, 0x88	; 136
     25e:	93 e1       	ldi	r25, 0x13	; 19
     260:	0e 94 ae 0c 	call	0x195c	; 0x195c <TMR_intDelay_ms>
	
	while(u8_g_timeOut != 1)
     264:	31 c0       	rjmp	.+98     	; 0x2c8 <setDefaultRotation+0x90>
	{
		PUSH_BTN_read_state(0,&en_g_rotationBtnState);
     266:	64 e1       	ldi	r22, 0x14	; 20
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 76 05 	call	0xaec	; 0xaec <PUSH_BTN_read_state>
		if(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
     270:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <en_g_rotationBtnState>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	41 f5       	brne	.+80     	; 0x2c8 <setDefaultRotation+0x90>
     278:	05 c0       	rjmp	.+10     	; 0x284 <setDefaultRotation+0x4c>
		{
			while(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
			{
				PUSH_BTN_read_state(0,&en_g_rotationBtnState);
     27a:	64 e1       	ldi	r22, 0x14	; 20
     27c:	71 e0       	ldi	r23, 0x01	; 1
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 76 05 	call	0xaec	; 0xaec <PUSH_BTN_read_state>
	while(u8_g_timeOut != 1)
	{
		PUSH_BTN_read_state(0,&en_g_rotationBtnState);
		if(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
		{
			while(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
     284:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <en_g_rotationBtnState>
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	b9 f3       	breq	.-18     	; 0x27a <setDefaultRotation+0x42>
			{
				PUSH_BTN_read_state(0,&en_g_rotationBtnState);
			}
			if(u8_g_rotationFlag == 0)
     28c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u8_g_rotationFlag>
     290:	81 11       	cpse	r24, r1
     292:	0d c0       	rjmp	.+26     	; 0x2ae <setDefaultRotation+0x76>
			{
				u8_g_rotationFlag = 1;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <u8_g_rotationFlag>
				en_g_rotation = ROTATION_L;
     29a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Left ");
     2a4:	89 e8       	ldi	r24, 0x89	; 137
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     2ac:	0d c0       	rjmp	.+26     	; 0x2c8 <setDefaultRotation+0x90>
				
			}
			else if(u8_g_rotationFlag == 1)
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	59 f4       	brne	.+22     	; 0x2c8 <setDefaultRotation+0x90>
			{
				u8_g_rotationFlag = 0;
     2b2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <u8_g_rotationFlag>
				en_g_rotation = ROTATION_R;
     2b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Right ");
     2c0:	8f e8       	ldi	r24, 0x8F	; 143
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
	LCD_SetCursor(1,0);
	LCD_WriteString((Uchar8_t*)"Right");
	TMR_intDelay_ms(5000);
	
	while(u8_g_timeOut != 1)
     2c8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <u8_g_timeOut>
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	59 f6       	brne	.-106    	; 0x266 <setDefaultRotation+0x2e>
				LCD_SetCursor(1,0);
				LCD_WriteString((Uchar8_t*)"Right ");
			}
		}
	}
	u8_g_timeOut = 0;
     2d0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <u8_g_timeOut>
	TMR_intDelay_ms(2000);
     2d4:	80 ed       	ldi	r24, 0xD0	; 208
     2d6:	97 e0       	ldi	r25, 0x07	; 7
     2d8:	0e 94 ae 0c 	call	0x195c	; 0x195c <TMR_intDelay_ms>
	while(u8_g_timeOut !=1);
     2dc:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <u8_g_timeOut>
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <setDefaultRotation+0xa4>
	LCD_Clear();
     2e4:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_Clear>
	u8_g_timeOut = 0;
     2e8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <u8_g_timeOut>
     2ec:	08 95       	ret

000002ee <LCD_update>:
	}
	
	
}
void LCD_update(EN_speed en_a_speed,EN_direction en_a_direction,float64_t f64_a_distance)
{
     2ee:	cf 92       	push	r12
     2f0:	df 92       	push	r13
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	d8 2f       	mov	r29, r24
     2fc:	c6 2f       	mov	r28, r22
     2fe:	69 01       	movw	r12, r18
     300:	7a 01       	movw	r14, r20
	
	
	LCD_SetCursor(0,0);
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"en_g_speed:");
     30a:	86 e9       	ldi	r24, 0x96	; 150
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
    LCD_SetCursor(0,7);
     312:	67 e0       	ldi	r22, 0x07	; 7
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	if(en_a_speed == SPEED_0 )
     31a:	d1 11       	cpse	r29, r1
     31c:	05 c0       	rjmp	.+10     	; 0x328 <LCD_update+0x3a>
	{
		LCD_WriteString((Uchar8_t*)"00% ");
     31e:	82 ea       	ldi	r24, 0xA2	; 162
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     326:	0b c0       	rjmp	.+22     	; 0x33e <LCD_update+0x50>
	}
	else if (en_a_speed == SPEED_30)
     328:	d1 30       	cpi	r29, 0x01	; 1
     32a:	29 f4       	brne	.+10     	; 0x336 <LCD_update+0x48>
	{
		LCD_WriteString((Uchar8_t*)"30% ");
     32c:	87 ea       	ldi	r24, 0xA7	; 167
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     334:	04 c0       	rjmp	.+8      	; 0x33e <LCD_update+0x50>
	}
	else 
	{
		LCD_WriteString((Uchar8_t*)"50% ");
     336:	8c ea       	ldi	r24, 0xAC	; 172
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	}
	LCD_SetCursor(0,11);
     33e:	6b e0       	ldi	r22, 0x0B	; 11
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dir:");
     346:	81 eb       	ldi	r24, 0xB1	; 177
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	LCD_SetCursor(0,15);
     34e:	6f e0       	ldi	r22, 0x0F	; 15
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	if(en_a_direction == DIRECTION_F)
     356:	c1 11       	cpse	r28, r1
     358:	05 c0       	rjmp	.+10     	; 0x364 <LCD_update+0x76>
	{
		LCD_WriteString((Uchar8_t*)"F");
     35a:	86 eb       	ldi	r24, 0xB6	; 182
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     362:	12 c0       	rjmp	.+36     	; 0x388 <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_B)
     364:	c1 30       	cpi	r28, 0x01	; 1
     366:	29 f4       	brne	.+10     	; 0x372 <LCD_update+0x84>
	{
		LCD_WriteString((Uchar8_t*)"B");
     368:	88 eb       	ldi	r24, 0xB8	; 184
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     370:	0b c0       	rjmp	.+22     	; 0x388 <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_R)
     372:	c2 30       	cpi	r28, 0x02	; 2
     374:	29 f4       	brne	.+10     	; 0x380 <LCD_update+0x92>
	{
		LCD_WriteString((Uchar8_t*)"R");
     376:	8a eb       	ldi	r24, 0xBA	; 186
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     37e:	04 c0       	rjmp	.+8      	; 0x388 <LCD_update+0x9a>
	}
    else
	{
		LCD_WriteString((Uchar8_t*)"S");
     380:	8c eb       	ldi	r24, 0xBC	; 188
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	}
	
	LCD_SetCursor(1,0);
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dist:");
     390:	8e eb       	ldi	r24, 0xBE	; 190
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	LCD_SetCursor(1,5);
     398:	65 e0       	ldi	r22, 0x05	; 5
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteNumber(f64_a_distance);
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__fixsfsi>
     3a8:	cb 01       	movw	r24, r22
     3aa:	0e 94 28 04 	call	0x850	; 0x850 <LCD_WriteNumber>
	LCD_WriteString((Uchar8_t*)" Cm");
     3ae:	84 ec       	ldi	r24, 0xC4	; 196
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	08 95       	ret

000003c4 <obstcaleMoreThan70>:
}



void obstcaleMoreThan70()
{
     3c4:	cf 93       	push	r28
	
	
	if(u8_g_moreThan70Flag == 0)
     3c6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <u8_g_moreThan70Flag>
     3ca:	81 11       	cpse	r24, r1
     3cc:	0f c0       	rjmp	.+30     	; 0x3ec <obstcaleMoreThan70+0x28>
	{
		u8_g_moreThan70Flag = 1;
     3ce:	c1 e0       	ldi	r28, 0x01	; 1
     3d0:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <u8_g_moreThan70Flag>
		DCM_MoveForward(30);
     3d4:	8e e1       	ldi	r24, 0x1E	; 30
     3d6:	0e 94 37 05 	call	0xa6e	; 0xa6e <DCM_MoveForward>
		en_g_speed = SPEED_30;
     3da:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <en_g_speed>
		en_g_direction = DIRECTION_F;
     3de:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <en_g_direction>
		TMR_intDelay_ms(5000);
     3e2:	88 e8       	ldi	r24, 0x88	; 136
     3e4:	93 e1       	ldi	r25, 0x13	; 19
     3e6:	0e 94 ae 0c 	call	0x195c	; 0x195c <TMR_intDelay_ms>
     3ea:	0e c0       	rjmp	.+28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		
	}
	else if(u8_g_moreThan70Flag == 1 && u8_g_timeOut == 1)
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	61 f4       	brne	.+24     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     3f0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <u8_g_timeOut>
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	41 f4       	brne	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		
		DCM_MoveForward(50);
     3f8:	82 e3       	ldi	r24, 0x32	; 50
     3fa:	0e 94 37 05 	call	0xa6e	; 0xa6e <DCM_MoveForward>
		en_g_speed = SPEED_50;
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <en_g_speed>
		u8_g_timeOut =0;
     404:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <u8_g_timeOut>
	}
 
    LCD_update(en_g_speed,en_g_direction,f64_g_obstcaleDistance);
     408:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <f64_g_obstcaleDistance>
     40c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <f64_g_obstcaleDistance+0x1>
     410:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <f64_g_obstcaleDistance+0x2>
     414:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <f64_g_obstcaleDistance+0x3>
     418:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <en_g_direction>
     41c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <en_g_speed>
     420:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_update>
}
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <obstcaleMoreThan30>:

void obstcaleMoreThan30()
{
	DCM_MoveForward(30);
     428:	8e e1       	ldi	r24, 0x1E	; 30
     42a:	0e 94 37 05 	call	0xa6e	; 0xa6e <DCM_MoveForward>
	en_g_speed = SPEED_30;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <en_g_speed>
	en_g_direction = DIRECTION_F;
     434:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <en_g_direction>
	LCD_update(en_g_speed,en_g_direction,f64_g_obstcaleDistance);
     438:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <f64_g_obstcaleDistance>
     43c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <f64_g_obstcaleDistance+0x1>
     440:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <f64_g_obstcaleDistance+0x2>
     444:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <f64_g_obstcaleDistance+0x3>
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_update>
     44e:	08 95       	ret

00000450 <obstcaleMoreThan20>:
}


void obstcaleMoreThan20()
{
	DCM_vdStopDCM();
     450:	0e 94 ed 04 	call	0x9da	; 0x9da <DCM_vdStopDCM>
	LCD_update(SPEED_0,DIRECTION_S,f64_g_obstcaleDistance);
     454:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <f64_g_obstcaleDistance>
     458:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <f64_g_obstcaleDistance+0x1>
     45c:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <f64_g_obstcaleDistance+0x2>
     460:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <f64_g_obstcaleDistance+0x3>
     464:	63 e0       	ldi	r22, 0x03	; 3
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_update>
	TMR_intDelay_ms(1000);
     46c:	88 ee       	ldi	r24, 0xE8	; 232
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	0e 94 ae 0c 	call	0x195c	; 0x195c <TMR_intDelay_ms>
	while(u8_g_timeOut == 0 );
     474:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <u8_g_timeOut>
     478:	88 23       	and	r24, r24
     47a:	e1 f3       	breq	.-8      	; 0x474 <obstcaleMoreThan20+0x24>
	u8_g_timeOut = 0;
     47c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <u8_g_timeOut>
	
	//en_g_rotation
	LCD_update(SPEED_50,DIRECTION_R,f64_g_obstcaleDistance);
     480:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <f64_g_obstcaleDistance>
     484:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <f64_g_obstcaleDistance+0x1>
     488:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <f64_g_obstcaleDistance+0x2>
     48c:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <f64_g_obstcaleDistance+0x3>
     490:	62 e0       	ldi	r22, 0x02	; 2
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_update>
	DCM_rotateDCM(en_g_rotation,50);	
     498:	62 e3       	ldi	r22, 0x32	; 50
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4a0:	0e 94 01 05 	call	0xa02	; 0xa02 <DCM_rotateDCM>
     4a4:	08 95       	ret

000004a6 <obstcaleLessThan20>:
}

void obstcaleLessThan20()
{
	if(u8_g_lessThan20Flag == 0 )
     4a6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <u8_g_lessThan20Flag>
     4aa:	81 11       	cpse	r24, r1
     4ac:	1c c0       	rjmp	.+56     	; 0x4e6 <obstcaleLessThan20+0x40>
	{
		DCM_vdStopDCM();
     4ae:	0e 94 ed 04 	call	0x9da	; 0x9da <DCM_vdStopDCM>
		LCD_update(SPEED_0,DIRECTION_S,f64_g_obstcaleDistance);
     4b2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <f64_g_obstcaleDistance>
     4b6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <f64_g_obstcaleDistance+0x1>
     4ba:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <f64_g_obstcaleDistance+0x2>
     4be:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <f64_g_obstcaleDistance+0x3>
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_update>
		TMR_intDelay_ms(1000);
     4ca:	88 ee       	ldi	r24, 0xE8	; 232
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	0e 94 ae 0c 	call	0x195c	; 0x195c <TMR_intDelay_ms>
		while(u8_g_timeOut == 0 );
     4d2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <u8_g_timeOut>
     4d6:	88 23       	and	r24, r24
     4d8:	e1 f3       	breq	.-8      	; 0x4d2 <obstcaleLessThan20+0x2c>
		u8_g_timeOut = 0;
     4da:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <u8_g_timeOut>
		u8_g_lessThan20Flag = 1;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <u8_g_lessThan20Flag>
     4e4:	08 95       	ret
	}
	
	else {
		LCD_update(SPEED_30,DIRECTION_B,f64_g_obstcaleDistance);
     4e6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <f64_g_obstcaleDistance>
     4ea:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <f64_g_obstcaleDistance+0x1>
     4ee:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <f64_g_obstcaleDistance+0x2>
     4f2:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <f64_g_obstcaleDistance+0x3>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_update>
		DCM_MoveBackward(30);
     4fe:	8e e1       	ldi	r24, 0x1E	; 30
     500:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DCM_MoveBackward>
     504:	08 95       	ret

00000506 <Car_Stop>:
}


void Car_Stop()
{
	DCM_vdStopDCM();
     506:	0e 94 ed 04 	call	0x9da	; 0x9da <DCM_vdStopDCM>
	LCD_SetCursor(0,0);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t *)"ROBOT STOPED");
     512:	88 ec       	ldi	r24, 0xC8	; 200
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     51a:	08 95       	ret

0000051c <LCD_update_stop>:
}


void LCD_update_stop()
{
	LCD_SetCursor(0,0);
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t *)"Press Key 1");
     524:	85 ed       	ldi	r24, 0xD5	; 213
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
	LCD_SetCursor(1,0);
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	0e 94 10 04 	call	0x820	; 0x820 <LCD_SetCursor>
	LCD_WriteString((Uchar8_t *)"to start");
     534:	81 ee       	ldi	r24, 0xE1	; 225
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_WriteString>
     53c:	08 95       	ret

0000053e <KEYPAD_init>:
Description : Initializes Rows as Output and Cols as input and put high logic on each pin
Args        : Void
return      : Void
*/
void KEYPAD_init(void)
{
     53e:	cf 93       	push	r28
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     540:	c0 e0       	ldi	r28, 0x00	; 0
     542:	0e c0       	rjmp	.+28     	; 0x560 <KEYPAD_init+0x22>
		///* set current row pin en_g_direction as output */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],OUTPUT);
		///* set current row pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
     544:	8c 2f       	mov	r24, r28
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9c 01       	movw	r18, r24
     54a:	22 0f       	add	r18, r18
     54c:	33 1f       	adc	r19, r19
     54e:	22 0f       	add	r18, r18
     550:	33 1f       	adc	r19, r19
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	8c 50       	subi	r24, 0x0C	; 12
     558:	9f 4f       	sbci	r25, 0xFF	; 255
     55a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Initpin>
{
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     55e:	cf 5f       	subi	r28, 0xFF	; 255
     560:	cc 23       	and	r28, r28
     562:	81 f3       	breq	.-32     	; 0x544 <KEYPAD_init+0x6>
     564:	c0 e0       	ldi	r28, 0x00	; 0
     566:	0e c0       	rjmp	.+28     	; 0x584 <KEYPAD_init+0x46>
	{
		///* set current col pin en_g_direction as input */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
     568:	8c 2f       	mov	r24, r28
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9c 01       	movw	r18, r24
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	22 0f       	add	r18, r18
     574:	33 1f       	adc	r19, r19
     576:	82 0f       	add	r24, r18
     578:	93 1f       	adc	r25, r19
     57a:	86 51       	subi	r24, 0x16	; 22
     57c:	9f 4f       	sbci	r25, 0xFF	; 255
     57e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Initpin>
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
	}
	
	/* loop from 0 to number of cols defined in config file*/
	for(u8_loc_colsCounter=0;u8_loc_colsCounter<NUMBER_OF_COLS;u8_loc_colsCounter++)
     582:	cf 5f       	subi	r28, 0xFF	; 255
     584:	c2 30       	cpi	r28, 0x02	; 2
     586:	80 f3       	brcs	.-32     	; 0x568 <KEYPAD_init+0x2a>
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
	}
}
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <KEYPAD_getButton>:
             
Args        : Void
return      : EN_KEYPADKEYS enum holds all possible keys
*/
EN_KEYPAD_KEYS KEYPAD_getButton()
{
     58c:	cf 92       	push	r12
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	1f 92       	push	r1
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* initialize pinValue variable to holds pin en_g_state*/
	Uchar8_t pinValue = 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	89 83       	std	Y+1, r24	; 0x01
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     5a6:	00 e0       	ldi	r16, 0x00	; 0
     5a8:	57 c0       	rjmp	.+174    	; 0x658 <KEYPAD_getButton+0xcc>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
     5aa:	e0 2e       	mov	r14, r16
     5ac:	f1 2c       	mov	r15, r1
     5ae:	f7 01       	movw	r30, r14
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	ee 0d       	add	r30, r14
     5ba:	ff 1d       	adc	r31, r15
     5bc:	e6 51       	subi	r30, 0x16	; 22
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	63 85       	ldd	r22, Z+11	; 0x0b
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     5ca:	10 e0       	ldi	r17, 0x00	; 0
     5cc:	34 c0       	rjmp	.+104    	; 0x636 <KEYPAD_getButton+0xaa>
		{
			/* Get value of current col pin*/
			//DIO_s8GETPinVal (st_keypad_conf.u8_arr_cols[u8_loc_colsCounter] , &pinValue); 
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     5ce:	c1 2e       	mov	r12, r17
     5d0:	d1 2c       	mov	r13, r1
     5d2:	f6 01       	movw	r30, r12
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	ee 0f       	add	r30, r30
     5da:	ff 1f       	adc	r31, r31
     5dc:	ec 0d       	add	r30, r12
     5de:	fd 1d       	adc	r31, r13
     5e0:	e6 51       	subi	r30, 0x16	; 22
     5e2:	ff 4f       	sbci	r31, 0xFF	; 255
     5e4:	ae 01       	movw	r20, r28
     5e6:	4f 5f       	subi	r20, 0xFF	; 255
     5e8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ea:	61 81       	ldd	r22, Z+1	; 0x01
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_read>
			/* check if pressed*/
			if(pinValue == 0) 
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	81 11       	cpse	r24, r1
     5f6:	1e c0       	rjmp	.+60     	; 0x634 <KEYPAD_getButton+0xa8>
     5f8:	10 c0       	rjmp	.+32     	; 0x61a <KEYPAD_getButton+0x8e>
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     5fa:	f6 01       	movw	r30, r12
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	ec 0d       	add	r30, r12
     606:	fd 1d       	adc	r31, r13
     608:	e6 51       	subi	r30, 0x16	; 22
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	ae 01       	movw	r20, r28
     60e:	4f 5f       	subi	r20, 0xFF	; 255
     610:	5f 4f       	sbci	r21, 0xFF	; 255
     612:	61 81       	ldd	r22, Z+1	; 0x01
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_read>
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
			/* check if pressed*/
			if(pinValue == 0) 
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	88 23       	and	r24, r24
     61e:	69 f3       	breq	.-38     	; 0x5fa <KEYPAD_getButton+0x6e>
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
				}
				
				/* return current [row][col] position from config array */
				return st_keypad_conf.u8_arr_keys[u8_loc_rowsCounter][u8_loc_colsCounter];
     620:	c7 01       	movw	r24, r14
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	86 51       	subi	r24, 0x16	; 22
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	fc 01       	movw	r30, r24
     62c:	ec 0d       	add	r30, r12
     62e:	fd 1d       	adc	r31, r13
     630:	87 85       	ldd	r24, Z+15	; 0x0f
     632:	16 c0       	rjmp	.+44     	; 0x660 <KEYPAD_getButton+0xd4>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     634:	1f 5f       	subi	r17, 0xFF	; 255
     636:	12 30       	cpi	r17, 0x02	; 2
     638:	50 f2       	brcs	.-108    	; 0x5ce <KEYPAD_getButton+0x42>
			}
		}
		
		/* write logic high on current row pin */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
     63a:	f7 01       	movw	r30, r14
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ee 0d       	add	r30, r14
     646:	ff 1d       	adc	r31, r15
     648:	e6 51       	subi	r30, 0x16	; 22
     64a:	ff 4f       	sbci	r31, 0xFF	; 255
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	63 85       	ldd	r22, Z+11	; 0x0b
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	/* initialize pinValue variable to holds pin en_g_state*/
	Uchar8_t pinValue = 1;
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     656:	0f 5f       	subi	r16, 0xFF	; 255
     658:	00 23       	and	r16, r16
     65a:	09 f4       	brne	.+2      	; 0x65e <KEYPAD_getButton+0xd2>
     65c:	a6 cf       	rjmp	.-180    	; 0x5aa <KEYPAD_getButton+0x1e>
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
	}
	
	/* if nothing pressed */
	return KEY_NOTHING;
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0f 90       	pop	r0
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	08 95       	ret

00000674 <WriteIns>:
	for(Uchar8_t i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     674:	cf 93       	push	r28
     676:	c8 2f       	mov	r28, r24
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     680:	6c 2f       	mov	r22, r28
     682:	66 1f       	adc	r22, r22
     684:	66 27       	eor	r22, r22
     686:	66 1f       	adc	r22, r22
     688:	87 e0       	ldi	r24, 0x07	; 7
     68a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     68e:	c6 fb       	bst	r28, 6
     690:	66 27       	eor	r22, r22
     692:	60 f9       	bld	r22, 0
     694:	86 e0       	ldi	r24, 0x06	; 6
     696:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     69a:	c5 fb       	bst	r28, 5
     69c:	66 27       	eor	r22, r22
     69e:	60 f9       	bld	r22, 0
     6a0:	85 e0       	ldi	r24, 0x05	; 5
     6a2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     6a6:	c4 fb       	bst	r28, 4
     6a8:	66 27       	eor	r22, r22
     6aa:	60 f9       	bld	r22, 0
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     6ba:	89 ef       	ldi	r24, 0xF9	; 249
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <WriteIns+0x4a>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <WriteIns+0x50>
     6c4:	00 00       	nop
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	83 e0       	ldi	r24, 0x03	; 3
     6ca:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     6ce:	89 ef       	ldi	r24, 0xF9	; 249
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <WriteIns+0x5e>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <WriteIns+0x64>
     6d8:	00 00       	nop
     6da:	c3 fb       	bst	r28, 3
     6dc:	66 27       	eor	r22, r22
     6de:	60 f9       	bld	r22, 0
     6e0:	87 e0       	ldi	r24, 0x07	; 7
     6e2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     6e6:	c2 fb       	bst	r28, 2
     6e8:	66 27       	eor	r22, r22
     6ea:	60 f9       	bld	r22, 0
     6ec:	86 e0       	ldi	r24, 0x06	; 6
     6ee:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     6f2:	c1 fb       	bst	r28, 1
     6f4:	66 27       	eor	r22, r22
     6f6:	60 f9       	bld	r22, 0
     6f8:	85 e0       	ldi	r24, 0x05	; 5
     6fa:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     6fe:	6c 2f       	mov	r22, r28
     700:	61 70       	andi	r22, 0x01	; 1
     702:	84 e0       	ldi	r24, 0x04	; 4
     704:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     710:	89 ef       	ldi	r24, 0xF9	; 249
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <WriteIns+0xa0>
     718:	00 c0       	rjmp	.+0      	; 0x71a <WriteIns+0xa6>
     71a:	00 00       	nop
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     724:	89 ef       	ldi	r24, 0xF9	; 249
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <WriteIns+0xb4>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <WriteIns+0xba>
     72e:	00 00       	nop
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <WriteData>:
     734:	cf 93       	push	r28
     736:	c8 2f       	mov	r28, r24
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     740:	6c 2f       	mov	r22, r28
     742:	66 1f       	adc	r22, r22
     744:	66 27       	eor	r22, r22
     746:	66 1f       	adc	r22, r22
     748:	87 e0       	ldi	r24, 0x07	; 7
     74a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     74e:	c6 fb       	bst	r28, 6
     750:	66 27       	eor	r22, r22
     752:	60 f9       	bld	r22, 0
     754:	86 e0       	ldi	r24, 0x06	; 6
     756:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     75a:	c5 fb       	bst	r28, 5
     75c:	66 27       	eor	r22, r22
     75e:	60 f9       	bld	r22, 0
     760:	85 e0       	ldi	r24, 0x05	; 5
     762:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     766:	c4 fb       	bst	r28, 4
     768:	66 27       	eor	r22, r22
     76a:	60 f9       	bld	r22, 0
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     77a:	89 ef       	ldi	r24, 0xF9	; 249
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <WriteData+0x4a>
     782:	00 c0       	rjmp	.+0      	; 0x784 <WriteData+0x50>
     784:	00 00       	nop
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     78e:	89 ef       	ldi	r24, 0xF9	; 249
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <WriteData+0x5e>
     796:	00 c0       	rjmp	.+0      	; 0x798 <WriteData+0x64>
     798:	00 00       	nop
     79a:	c3 fb       	bst	r28, 3
     79c:	66 27       	eor	r22, r22
     79e:	60 f9       	bld	r22, 0
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     7a6:	c2 fb       	bst	r28, 2
     7a8:	66 27       	eor	r22, r22
     7aa:	60 f9       	bld	r22, 0
     7ac:	86 e0       	ldi	r24, 0x06	; 6
     7ae:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     7b2:	c1 fb       	bst	r28, 1
     7b4:	66 27       	eor	r22, r22
     7b6:	60 f9       	bld	r22, 0
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     7be:	6c 2f       	mov	r22, r28
     7c0:	61 70       	andi	r22, 0x01	; 1
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     7d0:	89 ef       	ldi	r24, 0xF9	; 249
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <WriteData+0xa0>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <WriteData+0xa6>
     7da:	00 00       	nop
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_writepinn>
     7e4:	89 ef       	ldi	r24, 0xF9	; 249
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <WriteData+0xb4>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <WriteData+0xba>
     7ee:	00 00       	nop
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <LCD_WriteChar>:
     7f4:	0e 94 9a 03 	call	0x734	; 0x734 <WriteData>
     7f8:	08 95       	ret

000007fa <LCD_WriteString>:
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	8c 01       	movw	r16, r24
     802:	c0 e0       	ldi	r28, 0x00	; 0
     804:	03 c0       	rjmp	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     806:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteChar>
     80a:	cf 5f       	subi	r28, 0xFF	; 255
     80c:	f8 01       	movw	r30, r16
     80e:	ec 0f       	add	r30, r28
     810:	f1 1d       	adc	r31, r1
     812:	80 81       	ld	r24, Z
     814:	81 11       	cpse	r24, r1
     816:	f7 cf       	rjmp	.-18     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <LCD_SetCursor>:
     820:	81 11       	cpse	r24, r1
     822:	05 c0       	rjmp	.+10     	; 0x82e <LCD_SetCursor+0xe>
     824:	86 2f       	mov	r24, r22
     826:	80 68       	ori	r24, 0x80	; 128
     828:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
     82c:	08 95       	ret
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	21 f4       	brne	.+8      	; 0x83a <LCD_SetCursor+0x1a>
     832:	80 ec       	ldi	r24, 0xC0	; 192
     834:	86 0f       	add	r24, r22
     836:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
     83a:	08 95       	ret

0000083c <LCD_Clear>:
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
     842:	89 ef       	ldi	r24, 0xF9	; 249
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <LCD_Clear+0xa>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <LCD_Clear+0x10>
     84c:	00 00       	nop
     84e:	08 95       	ret

00000850 <LCD_WriteNumber>:
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	2a 97       	sbiw	r28, 0x0a	; 10
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	7c 01       	movw	r14, r24
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	21 f4       	brne	.+8      	; 0x878 <__stack+0x19>
     870:	80 e3       	ldi	r24, 0x30	; 48
     872:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteChar>
     876:	2d c0       	rjmp	.+90     	; 0x8d2 <__stack+0x73>
     878:	99 23       	and	r25, r25
     87a:	34 f4       	brge	.+12     	; 0x888 <__stack+0x29>
     87c:	f1 94       	neg	r15
     87e:	e1 94       	neg	r14
     880:	f1 08       	sbc	r15, r1
     882:	8d e2       	ldi	r24, 0x2D	; 45
     884:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteChar>
     888:	10 e0       	ldi	r17, 0x00	; 0
     88a:	10 c0       	rjmp	.+32     	; 0x8ac <__stack+0x4d>
     88c:	c7 01       	movw	r24, r14
     88e:	6a e0       	ldi	r22, 0x0A	; 10
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	0e 94 25 10 	call	0x204a	; 0x204a <__divmodhi4>
     896:	e1 e0       	ldi	r30, 0x01	; 1
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	ec 0f       	add	r30, r28
     89c:	fd 1f       	adc	r31, r29
     89e:	e1 0f       	add	r30, r17
     8a0:	f1 1d       	adc	r31, r1
     8a2:	80 5d       	subi	r24, 0xD0	; 208
     8a4:	80 83       	st	Z, r24
     8a6:	1f 5f       	subi	r17, 0xFF	; 255
     8a8:	e6 2e       	mov	r14, r22
     8aa:	f7 2e       	mov	r15, r23
     8ac:	e1 14       	cp	r14, r1
     8ae:	f1 04       	cpc	r15, r1
     8b0:	69 f7       	brne	.-38     	; 0x88c <__stack+0x2d>
     8b2:	0d c0       	rjmp	.+26     	; 0x8ce <__stack+0x6f>
     8b4:	e1 2f       	mov	r30, r17
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	8c 0f       	add	r24, r28
     8c0:	9d 1f       	adc	r25, r29
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	80 81       	ld	r24, Z
     8c8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteChar>
     8cc:	11 50       	subi	r17, 0x01	; 1
     8ce:	11 11       	cpse	r17, r1
     8d0:	f1 cf       	rjmp	.-30     	; 0x8b4 <__stack+0x55>
     8d2:	2a 96       	adiw	r28, 0x0a	; 10
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	08 95       	ret

000008ea <LCD_PinsInit>:
void LCD_PinsInit ()
{
	DIO_initpinn(RS,OUTPUT);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
	DIO_initpinn(EN,OUTPUT);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
	DIO_initpinn(RW,OUTPUT);
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
	DIO_initpinn(D4,OUTPUT);
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
	DIO_initpinn(D5,OUTPUT);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	85 e0       	ldi	r24, 0x05	; 5
     90e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
	DIO_initpinn(D6,OUTPUT);
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
	DIO_initpinn(D7,OUTPUT);
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	87 e0       	ldi	r24, 0x07	; 7
     91e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
     922:	08 95       	ret

00000924 <LCD_Init>:



void LCD_Init(void)
{
	LCD_PinsInit();
     924:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_PinsInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     928:	87 ea       	ldi	r24, 0xA7	; 167
     92a:	91 e6       	ldi	r25, 0x61	; 97
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <LCD_Init+0x8>
     930:	00 c0       	rjmp	.+0      	; 0x932 <LCD_Init+0xe>
     932:	00 00       	nop
	_delay_ms(100);
	WriteIns(0x02);
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
	WriteIns(0x28);//5*7 2 lines
     93a:	88 e2       	ldi	r24, 0x28	; 40
     93c:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
	WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
     940:	8c e0       	ldi	r24, 0x0C	; 12
     942:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
	WriteIns(0x01);//clear screen
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
     94c:	89 ef       	ldi	r24, 0xF9	; 249
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <LCD_Init+0x2c>
     954:	00 c0       	rjmp	.+0      	; 0x956 <LCD_Init+0x32>
     956:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);// increment DDRAM address, no shift
     958:	86 e0       	ldi	r24, 0x06	; 6
     95a:	0e 94 3a 03 	call	0x674	; 0x674 <WriteIns>
     95e:	08 95       	ret

00000960 <DCM_motorInit>:
}

/****************************************************************************************************************************************/
void DCM_updateStopFlag(void)
{
	DCM_g_stopFlag = TRUE;
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	b9 f4       	brne	.+46     	; 0x99c <DCM_motorInit+0x3c>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	1b c0       	rjmp	.+54     	; 0x9a8 <DCM_motorInit+0x48>
     972:	c1 2f       	mov	r28, r17
     974:	d0 e0       	ldi	r29, 0x00	; 0
     976:	ce 01       	movw	r24, r28
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	c8 0f       	add	r28, r24
     97e:	d9 1f       	adc	r29, r25
     980:	ce 0d       	add	r28, r14
     982:	df 1d       	adc	r29, r15
     984:	41 e0       	ldi	r20, 0x01	; 1
     986:	6a 81       	ldd	r22, Y+2	; 0x02
     988:	88 81       	ld	r24, Y
     98a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <DIO_InitDCM>
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	6a 81       	ldd	r22, Y+2	; 0x02
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	0e 94 d7 09 	call	0x13ae	; 0x13ae <DIO_InitDCM>
     998:	1f 5f       	subi	r17, 0xFF	; 255
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <DCM_motorInit+0x40>
     99c:	7c 01       	movw	r14, r24
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	12 30       	cpi	r17, 0x02	; 2
     9a2:	38 f3       	brcs	.-50     	; 0x972 <DCM_motorInit+0x12>
     9a4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <TIMER0_initPWM>
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <DCM_changeDCMDirection>:
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	79 f0       	breq	.+30     	; 0x9d6 <DCM_changeDCMDirection+0x22>
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	fb 01       	movw	r30, r22
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	6e 0f       	add	r22, r30
     9c2:	7f 1f       	adc	r23, r31
     9c4:	fc 01       	movw	r30, r24
     9c6:	e6 0f       	add	r30, r22
     9c8:	f7 1f       	adc	r31, r23
     9ca:	60 81       	ld	r22, Z
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_toggle>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	08 95       	ret
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	08 95       	ret

000009da <DCM_vdStopDCM>:
     9da:	41 e0       	ldi	r20, 0x01	; 1
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
     9ee:	0e 94 cc 0b 	call	0x1798	; 0x1798 <TIMER0_stop>
     9f2:	08 95       	ret

000009f4 <DCM_u8SetDutyCycleOfPWM>:
     9f4:	85 36       	cpi	r24, 0x65	; 101
     9f6:	10 f0       	brcs	.+4      	; 0x9fc <DCM_u8SetDutyCycleOfPWM+0x8>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 95       	ret
     9fc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <TIMER0_setPwm>
     a00:	08 95       	ret

00000a02 <DCM_rotateDCM>:
/****************************************************************************************************************************************/
/* you need to specify which motor you want to rotate*/
EN_DCM_ERROR_T DCM_rotateDCM(EN_DCM_MOTORSIDE DCM_l_motorNumber, Uint16_t DCM_a_rotateSpeed)
{
	
	if(DCM_l_motorNumber == MOTOR_RIGHT)
     a02:	81 11       	cpse	r24, r1
     a04:	1a c0       	rjmp	.+52     	; 0xa3a <DCM_rotateDCM+0x38>
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	81 e6       	ldi	r24, 0x61	; 97
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <DCM_changeDCMDirection>
		// High delay to see it on simulation
		TMR_intDelay_ms(4000);
     a10:	80 ea       	ldi	r24, 0xA0	; 160
     a12:	9f e0       	ldi	r25, 0x0F	; 15
     a14:	0e 94 ae 0c 	call	0x195c	; 0x195c <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     a18:	82 e3       	ldi	r24, 0x32	; 50
     a1a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     a1e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <u8_g_timeOut>
     a22:	88 23       	and	r24, r24
     a24:	e1 f3       	breq	.-8      	; 0xa1e <DCM_rotateDCM+0x1c>
		TIMER0_stop();
     a26:	0e 94 cc 0b 	call	0x1798	; 0x1798 <TIMER0_stop>
		u8_g_timeOut = 0;
     a2a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);	
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	81 e6       	ldi	r24, 0x61	; 97
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 da 04 	call	0x9b4	; 0x9b4 <DCM_changeDCMDirection>
     a38:	08 95       	ret
	}
	else
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	81 e6       	ldi	r24, 0x61	; 97
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 da 04 	call	0x9b4	; 0x9b4 <DCM_changeDCMDirection>
		TMR_intDelay_ms(620);
     a44:	8c e6       	ldi	r24, 0x6C	; 108
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	0e 94 ae 0c 	call	0x195c	; 0x195c <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     a4c:	82 e3       	ldi	r24, 0x32	; 50
     a4e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     a52:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <u8_g_timeOut>
     a56:	88 23       	and	r24, r24
     a58:	e1 f3       	breq	.-8      	; 0xa52 <DCM_rotateDCM+0x50>
		TIMER0_stop();
     a5a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <TIMER0_stop>
		u8_g_timeOut = 0;
     a5e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);		
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	81 e6       	ldi	r24, 0x61	; 97
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 da 04 	call	0x9b4	; 0x9b4 <DCM_changeDCMDirection>
	}

}
     a6c:	08 95       	ret

00000a6e <DCM_MoveForward>:

/****************************************************************************************************************************************/

void DCM_MoveForward(Uchar8_t u8_a_speed)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     a72:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_HIGH);
     a76:	c1 e6       	ldi	r28, 0x61	; 97
     a78:	d0 e0       	ldi	r29, 0x00	; 0
     a7a:	68 81       	ld	r22, Y
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_LOW);
     a84:	69 81       	ldd	r22, Y+1	; 0x01
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_HIGH);
     a8e:	6b 81       	ldd	r22, Y+3	; 0x03
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	8d 81       	ldd	r24, Y+5	; 0x05
     a94:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_LOW);
     a98:	6c 81       	ldd	r22, Y+4	; 0x04
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	8d 81       	ldd	r24, Y+5	; 0x05
     a9e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <DCM_MoveBackward>:


void DCM_MoveBackward(Uchar8_t u8_a_speed)
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     aac:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_LOW);
     ab0:	c1 e6       	ldi	r28, 0x61	; 97
     ab2:	d0 e0       	ldi	r29, 0x00	; 0
     ab4:	68 81       	ld	r22, Y
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_HIGH);
     abe:	69 81       	ldd	r22, Y+1	; 0x01
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	8a 81       	ldd	r24, Y+2	; 0x02
     ac4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_LOW);
     ac8:	6b 81       	ldd	r22, Y+3	; 0x03
     aca:	41 e0       	ldi	r20, 0x01	; 1
     acc:	8d 81       	ldd	r24, Y+5	; 0x05
     ace:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_HIGH);
     ad2:	6c 81       	ldd	r22, Y+4	; 0x04
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	8d 81       	ldd	r24, Y+5	; 0x05
     ad8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <PUSH_BTN_intialize>:

extern const ST_PUSH_BTN_t A_pbConfig[NUMBER_OF_PUSH_BUTTONS];

void PUSH_BTN_intialize()
{
	DIO_initpinn(PINC4,INPULL);
     ae2:	62 e0       	ldi	r22, 0x02	; 2
     ae4:	84 e1       	ldi	r24, 0x14	; 20
     ae6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_initpinn>
     aea:	08 95       	ret

00000aec <PUSH_BTN_read_state>:
}

void PUSH_BTN_read_state(Uchar8_t btnNumber, EN_PUSH_BTN_state_t *btn_state)
{
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	7b 01       	movw	r14, r22

		EN_dio_value_t pin_logic_status = DIO_LOW;
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	99 83       	std	Y+1, r25	; 0x01
		DIO_read(A_pbConfig[btnNumber].PUSH_BTN_pin.dio_port,A_pbConfig[btnNumber].PUSH_BTN_pin.dio_pin,&pin_logic_status);
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	8c 01       	movw	r16, r24
     b08:	00 0f       	add	r16, r16
     b0a:	11 1f       	adc	r17, r17
     b0c:	00 0f       	add	r16, r16
     b0e:	11 1f       	adc	r17, r17
     b10:	00 0f       	add	r16, r16
     b12:	11 1f       	adc	r17, r17
     b14:	08 1b       	sub	r16, r24
     b16:	19 0b       	sbc	r17, r25
     b18:	05 50       	subi	r16, 0x05	; 5
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	ae 01       	movw	r20, r28
     b1e:	4f 5f       	subi	r20, 0xFF	; 255
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	f8 01       	movw	r30, r16
     b24:	61 81       	ldd	r22, Z+1	; 0x01
     b26:	80 81       	ld	r24, Z
     b28:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_read>
		
		if(PUSH_BTN_PULL_UP == A_pbConfig[btnNumber].PUSH_BTN_connection)
     b2c:	f8 01       	movw	r30, r16
     b2e:	86 81       	ldd	r24, Z+6	; 0x06
     b30:	81 11       	cpse	r24, r1
     b32:	0a c0       	rjmp	.+20     	; 0xb48 <PUSH_BTN_read_state+0x5c>
		{
			if(DIO_HIGH == pin_logic_status)
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	81 11       	cpse	r24, r1
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <PUSH_BTN_read_state+0x56>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	f7 01       	movw	r30, r14
     b3e:	80 83       	st	Z, r24
     b40:	0e c0       	rjmp	.+28     	; 0xb5e <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     b42:	f7 01       	movw	r30, r14
     b44:	10 82       	st	Z, r1
     b46:	0b c0       	rjmp	.+22     	; 0xb5e <PUSH_BTN_read_state+0x72>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == A_pbConfig[btnNumber].PUSH_BTN_connection)
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	49 f4       	brne	.+18     	; 0xb5e <PUSH_BTN_read_state+0x72>
		{
			if(DIO_HIGH == pin_logic_status)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	81 11       	cpse	r24, r1
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <PUSH_BTN_read_state+0x6c>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     b52:	f7 01       	movw	r30, r14
     b54:	10 82       	st	Z, r1
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	f7 01       	movw	r30, r14
     b5c:	80 83       	st	Z, r24
			}
		}
}
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	08 95       	ret

00000b6e <ultrasonic_vInit>:

void ultrasonic_vInit()
{
	
	
	DIO_Initpin(&(ultra.triggerpin));
     b6e:	87 e6       	ldi	r24, 0x67	; 103
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Initpin>
	MCU_vEnableInterrupt();
     b76:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <MCU_vEnableInterrupt>
     b7a:	08 95       	ret

00000b7c <ultrasonic_vGetDistance>:
}

void ultrasonic_vGetDistance(float64_t *Copy_f64distance)
{
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	00 d0       	rcall	.+0      	; 0xb86 <ultrasonic_vGetDistance+0xa>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	8c 01       	movw	r16, r24
	
	
	Uint32_t val = 0;
     b8c:	1a 82       	std	Y+2, r1	; 0x02
     b8e:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_HIGH);
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	63 e0       	ldi	r22, 0x03	; 3
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
     b9a:	83 ec       	ldi	r24, 0xC3	; 195
     b9c:	99 e0       	ldi	r25, 0x09	; 9
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <ultrasonic_vGetDistance+0x22>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <ultrasonic_vGetDistance+0x28>
     ba4:	00 00       	nop

	_delay_ms(10);
	
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_LOW);
     ba6:	41 e0       	ldi	r20, 0x01	; 1
     ba8:	63 e0       	ldi	r22, 0x03	; 3
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
	ICU_RisingEdgeCapture();
     bb0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <ICU_RisingEdgeCapture>

	
	while(ICU_g_flag != 1);
     bb4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ICU_g_flag>
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <ultrasonic_vGetDistance+0x38>
	ICU_getValue(&val);
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <ICU_getValue>

	*Copy_f64distance = ((float)val / 466.47*8)+1;	
     bc4:	69 81       	ldd	r22, Y+1	; 0x01
     bc6:	7a 81       	ldd	r23, Y+2	; 0x02
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     bd0:	29 e2       	ldi	r18, 0x29	; 41
     bd2:	3c e3       	ldi	r19, 0x3C	; 60
     bd4:	49 ee       	ldi	r20, 0xE9	; 233
     bd6:	53 e4       	ldi	r21, 0x43	; 67
     bd8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divsf3>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__mulsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__addsf3>
     bf4:	f8 01       	movw	r30, r16
     bf6:	60 83       	st	Z, r22
     bf8:	71 83       	std	Z+1, r23	; 0x01
     bfa:	82 83       	std	Z+2, r24	; 0x02
     bfc:	93 83       	std	Z+3, r25	; 0x03
	ICU_g_flag = 0;
     bfe:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <ICU_g_flag>
}
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	08 95       	ret

00000c10 <main>:

#include "APPLICATION/app/apph.h"

void main(void)
{
	app_init();
     c10:	0e 94 51 00 	call	0xa2	; 0xa2 <app_init>
	while(1)
	{
	app_main();
     c14:	0e 94 61 00 	call	0xc2	; 0xc2 <app_main>
     c18:	fd cf       	rjmp	.-6      	; 0xc14 <main+0x4>

00000c1a <DIO_WritePin>:
			break;
			case PC:
			TOGGLE_BIT(DIO_PORTC_PORT_REG,pin_num);
			break;
			case PD:
			TOGGLE_BIT(DIO_PORTD_PORT_REG,pin_num);
     c1a:	44 23       	and	r20, r20
     c1c:	19 f0       	breq	.+6      	; 0xc24 <DIO_WritePin+0xa>
     c1e:	41 30       	cpi	r20, 0x01	; 1
     c20:	a9 f1       	breq	.+106    	; 0xc8c <DIO_WritePin+0x72>
     c22:	08 95       	ret
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	89 f0       	breq	.+34     	; 0xc4a <DIO_WritePin+0x30>
     c28:	28 f0       	brcs	.+10     	; 0xc34 <DIO_WritePin+0x1a>
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	c9 f0       	breq	.+50     	; 0xc60 <DIO_WritePin+0x46>
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	11 f1       	breq	.+68     	; 0xc76 <DIO_WritePin+0x5c>
     c32:	08 95       	ret
     c34:	2b b3       	in	r18, 0x1b	; 27
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_WritePin+0x26>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	6a 95       	dec	r22
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_WritePin+0x22>
     c44:	82 2b       	or	r24, r18
     c46:	8b bb       	out	0x1b, r24	; 27
     c48:	08 95       	ret
     c4a:	28 b3       	in	r18, 0x18	; 24
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_WritePin+0x3c>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	6a 95       	dec	r22
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_WritePin+0x38>
     c5a:	82 2b       	or	r24, r18
     c5c:	88 bb       	out	0x18, r24	; 24
     c5e:	08 95       	ret
     c60:	25 b3       	in	r18, 0x15	; 21
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_WritePin+0x52>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	6a 95       	dec	r22
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_WritePin+0x4e>
     c70:	82 2b       	or	r24, r18
     c72:	85 bb       	out	0x15, r24	; 21
     c74:	08 95       	ret
     c76:	22 b3       	in	r18, 0x12	; 18
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_WritePin+0x68>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	6a 95       	dec	r22
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_WritePin+0x64>
     c86:	82 2b       	or	r24, r18
     c88:	82 bb       	out	0x12, r24	; 18
     c8a:	08 95       	ret
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	91 f0       	breq	.+36     	; 0xcb4 <DIO_WritePin+0x9a>
     c90:	28 f0       	brcs	.+10     	; 0xc9c <DIO_WritePin+0x82>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	d9 f0       	breq	.+54     	; 0xccc <DIO_WritePin+0xb2>
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	29 f1       	breq	.+74     	; 0xce4 <DIO_WritePin+0xca>
     c9a:	08 95       	ret
     c9c:	2b b3       	in	r18, 0x1b	; 27
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_WritePin+0x8e>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	6a 95       	dec	r22
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_WritePin+0x8a>
     cac:	80 95       	com	r24
     cae:	82 23       	and	r24, r18
     cb0:	8b bb       	out	0x1b, r24	; 27
     cb2:	08 95       	ret
     cb4:	28 b3       	in	r18, 0x18	; 24
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_WritePin+0xa6>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	6a 95       	dec	r22
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_WritePin+0xa2>
     cc4:	80 95       	com	r24
     cc6:	82 23       	and	r24, r18
     cc8:	88 bb       	out	0x18, r24	; 24
     cca:	08 95       	ret
     ccc:	25 b3       	in	r18, 0x15	; 21
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_WritePin+0xbe>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	6a 95       	dec	r22
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_WritePin+0xba>
     cdc:	80 95       	com	r24
     cde:	82 23       	and	r24, r18
     ce0:	85 bb       	out	0x15, r24	; 21
     ce2:	08 95       	ret
     ce4:	22 b3       	in	r18, 0x12	; 18
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_WritePin+0xd6>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	6a 95       	dec	r22
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_WritePin+0xd2>
     cf4:	80 95       	com	r24
     cf6:	82 23       	and	r24, r18
     cf8:	82 bb       	out	0x12, r24	; 18
     cfa:	08 95       	ret

00000cfc <DIO_read>:
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	89 f0       	breq	.+34     	; 0xd22 <DIO_read+0x26>
     d00:	28 f0       	brcs	.+10     	; 0xd0c <DIO_read+0x10>
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	c9 f0       	breq	.+50     	; 0xd38 <DIO_read+0x3c>
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	11 f1       	breq	.+68     	; 0xd4e <DIO_read+0x52>
     d0a:	08 95       	ret
     d0c:	89 b3       	in	r24, 0x19	; 25
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_read+0x1a>
     d12:	95 95       	asr	r25
     d14:	87 95       	ror	r24
     d16:	6a 95       	dec	r22
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_read+0x16>
     d1a:	81 70       	andi	r24, 0x01	; 1
     d1c:	fa 01       	movw	r30, r20
     d1e:	80 83       	st	Z, r24
     d20:	08 95       	ret
     d22:	86 b3       	in	r24, 0x16	; 22
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_read+0x30>
     d28:	95 95       	asr	r25
     d2a:	87 95       	ror	r24
     d2c:	6a 95       	dec	r22
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_read+0x2c>
     d30:	81 70       	andi	r24, 0x01	; 1
     d32:	fa 01       	movw	r30, r20
     d34:	80 83       	st	Z, r24
     d36:	08 95       	ret
     d38:	83 b3       	in	r24, 0x13	; 19
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_read+0x46>
     d3e:	95 95       	asr	r25
     d40:	87 95       	ror	r24
     d42:	6a 95       	dec	r22
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_read+0x42>
     d46:	81 70       	andi	r24, 0x01	; 1
     d48:	fa 01       	movw	r30, r20
     d4a:	80 83       	st	Z, r24
     d4c:	08 95       	ret
     d4e:	80 b3       	in	r24, 0x10	; 16
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_read+0x5c>
     d54:	95 95       	asr	r25
     d56:	87 95       	ror	r24
     d58:	6a 95       	dec	r22
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_read+0x58>
     d5c:	81 70       	andi	r24, 0x01	; 1
     d5e:	fa 01       	movw	r30, r20
     d60:	80 83       	st	Z, r24
     d62:	08 95       	ret

00000d64 <DIO_toggle>:
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	89 f0       	breq	.+34     	; 0xd8a <DIO_toggle+0x26>
     d68:	28 f0       	brcs	.+10     	; 0xd74 <DIO_toggle+0x10>
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	c9 f0       	breq	.+50     	; 0xda0 <DIO_toggle+0x3c>
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	11 f1       	breq	.+68     	; 0xdb6 <DIO_toggle+0x52>
     d72:	08 95       	ret
     d74:	2b b3       	in	r18, 0x1b	; 27
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_toggle+0x1c>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	6a 95       	dec	r22
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_toggle+0x18>
     d84:	82 27       	eor	r24, r18
     d86:	8b bb       	out	0x1b, r24	; 27
     d88:	08 95       	ret
     d8a:	28 b3       	in	r18, 0x18	; 24
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_toggle+0x32>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	6a 95       	dec	r22
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_toggle+0x2e>
     d9a:	82 27       	eor	r24, r18
     d9c:	88 bb       	out	0x18, r24	; 24
     d9e:	08 95       	ret
     da0:	25 b3       	in	r18, 0x15	; 21
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_toggle+0x48>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	6a 95       	dec	r22
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_toggle+0x44>
     db0:	82 27       	eor	r24, r18
     db2:	85 bb       	out	0x15, r24	; 21
     db4:	08 95       	ret
     db6:	22 b3       	in	r18, 0x12	; 18
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_toggle+0x5e>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	6a 95       	dec	r22
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_toggle+0x5a>
     dc6:	82 27       	eor	r24, r18
     dc8:	82 bb       	out	0x12, r24	; 18
     dca:	08 95       	ret

00000dcc <DIO_Initpin>:
     dcc:	fc 01       	movw	r30, r24
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	81 11       	cpse	r24, r1
     dd2:	b5 c0       	rjmp	.+362    	; 0xf3e <DIO_Initpin+0x172>
     dd4:	80 81       	ld	r24, Z
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	99 f0       	breq	.+38     	; 0xe00 <DIO_Initpin+0x34>
     dda:	28 f0       	brcs	.+10     	; 0xde6 <DIO_Initpin+0x1a>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	e9 f0       	breq	.+58     	; 0xe1a <DIO_Initpin+0x4e>
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	41 f1       	breq	.+80     	; 0xe34 <DIO_Initpin+0x68>
     de4:	33 c0       	rjmp	.+102    	; 0xe4c <DIO_Initpin+0x80>
     de6:	2a b3       	in	r18, 0x1a	; 26
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	01 80       	ldd	r0, Z+1	; 0x01
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_Initpin+0x28>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_Initpin+0x24>
     df8:	80 95       	com	r24
     dfa:	82 23       	and	r24, r18
     dfc:	8a bb       	out	0x1a, r24	; 26
     dfe:	26 c0       	rjmp	.+76     	; 0xe4c <DIO_Initpin+0x80>
     e00:	27 b3       	in	r18, 0x17	; 23
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	01 80       	ldd	r0, Z+1	; 0x01
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_Initpin+0x42>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_Initpin+0x3e>
     e12:	80 95       	com	r24
     e14:	82 23       	and	r24, r18
     e16:	87 bb       	out	0x17, r24	; 23
     e18:	19 c0       	rjmp	.+50     	; 0xe4c <DIO_Initpin+0x80>
     e1a:	24 b3       	in	r18, 0x14	; 20
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	01 80       	ldd	r0, Z+1	; 0x01
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_Initpin+0x5c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_Initpin+0x58>
     e2c:	80 95       	com	r24
     e2e:	82 23       	and	r24, r18
     e30:	84 bb       	out	0x14, r24	; 20
     e32:	0c c0       	rjmp	.+24     	; 0xe4c <DIO_Initpin+0x80>
     e34:	21 b3       	in	r18, 0x11	; 17
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	01 80       	ldd	r0, Z+1	; 0x01
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_Initpin+0x76>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_Initpin+0x72>
     e46:	80 95       	com	r24
     e48:	82 23       	and	r24, r18
     e4a:	81 bb       	out	0x11, r24	; 17
     e4c:	83 81       	ldd	r24, Z+3	; 0x03
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	c9 f5       	brne	.+114    	; 0xec4 <DIO_Initpin+0xf8>
     e52:	80 81       	ld	r24, Z
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	91 f0       	breq	.+36     	; 0xe7c <DIO_Initpin+0xb0>
     e58:	28 f0       	brcs	.+10     	; 0xe64 <DIO_Initpin+0x98>
     e5a:	82 30       	cpi	r24, 0x02	; 2
     e5c:	d9 f0       	breq	.+54     	; 0xe94 <DIO_Initpin+0xc8>
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	29 f1       	breq	.+74     	; 0xeac <DIO_Initpin+0xe0>
     e62:	08 95       	ret
     e64:	2b b3       	in	r18, 0x1b	; 27
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	01 80       	ldd	r0, Z+1	; 0x01
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_Initpin+0xa6>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_Initpin+0xa2>
     e76:	82 2b       	or	r24, r18
     e78:	8b bb       	out	0x1b, r24	; 27
     e7a:	08 95       	ret
     e7c:	28 b3       	in	r18, 0x18	; 24
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	01 80       	ldd	r0, Z+1	; 0x01
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_Initpin+0xbe>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_Initpin+0xba>
     e8e:	82 2b       	or	r24, r18
     e90:	88 bb       	out	0x18, r24	; 24
     e92:	08 95       	ret
     e94:	25 b3       	in	r18, 0x15	; 21
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	01 80       	ldd	r0, Z+1	; 0x01
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_Initpin+0xd6>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_Initpin+0xd2>
     ea6:	82 2b       	or	r24, r18
     ea8:	85 bb       	out	0x15, r24	; 21
     eaa:	08 95       	ret
     eac:	22 b3       	in	r18, 0x12	; 18
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	01 80       	ldd	r0, Z+1	; 0x01
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_Initpin+0xee>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_Initpin+0xea>
     ebe:	82 2b       	or	r24, r18
     ec0:	82 bb       	out	0x12, r24	; 18
     ec2:	08 95       	ret
     ec4:	80 81       	ld	r24, Z
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	99 f0       	breq	.+38     	; 0xef0 <DIO_Initpin+0x124>
     eca:	28 f0       	brcs	.+10     	; 0xed6 <DIO_Initpin+0x10a>
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	e9 f0       	breq	.+58     	; 0xf0a <DIO_Initpin+0x13e>
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	41 f1       	breq	.+80     	; 0xf24 <DIO_Initpin+0x158>
     ed4:	08 95       	ret
     ed6:	2b b3       	in	r18, 0x1b	; 27
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	01 80       	ldd	r0, Z+1	; 0x01
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_Initpin+0x118>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_Initpin+0x114>
     ee8:	80 95       	com	r24
     eea:	82 23       	and	r24, r18
     eec:	8b bb       	out	0x1b, r24	; 27
     eee:	08 95       	ret
     ef0:	28 b3       	in	r18, 0x18	; 24
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	01 80       	ldd	r0, Z+1	; 0x01
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_Initpin+0x132>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_Initpin+0x12e>
     f02:	80 95       	com	r24
     f04:	82 23       	and	r24, r18
     f06:	88 bb       	out	0x18, r24	; 24
     f08:	08 95       	ret
     f0a:	25 b3       	in	r18, 0x15	; 21
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	01 80       	ldd	r0, Z+1	; 0x01
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_Initpin+0x14c>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_Initpin+0x148>
     f1c:	80 95       	com	r24
     f1e:	82 23       	and	r24, r18
     f20:	85 bb       	out	0x15, r24	; 21
     f22:	08 95       	ret
     f24:	22 b3       	in	r18, 0x12	; 18
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	01 80       	ldd	r0, Z+1	; 0x01
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_Initpin+0x166>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_Initpin+0x162>
     f36:	80 95       	com	r24
     f38:	82 23       	and	r24, r18
     f3a:	82 bb       	out	0x12, r24	; 18
     f3c:	08 95       	ret
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	09 f0       	breq	.+2      	; 0xf44 <DIO_Initpin+0x178>
     f42:	b0 c0       	rjmp	.+352    	; 0x10a4 <DIO_Initpin+0x2d8>
     f44:	80 81       	ld	r24, Z
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 f0       	breq	.+36     	; 0xf6e <DIO_Initpin+0x1a2>
     f4a:	28 f0       	brcs	.+10     	; 0xf56 <DIO_Initpin+0x18a>
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	d9 f0       	breq	.+54     	; 0xf86 <DIO_Initpin+0x1ba>
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	29 f1       	breq	.+74     	; 0xf9e <DIO_Initpin+0x1d2>
     f54:	2f c0       	rjmp	.+94     	; 0xfb4 <DIO_Initpin+0x1e8>
     f56:	2a b3       	in	r18, 0x1a	; 26
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	01 80       	ldd	r0, Z+1	; 0x01
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_Initpin+0x198>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_Initpin+0x194>
     f68:	82 2b       	or	r24, r18
     f6a:	8a bb       	out	0x1a, r24	; 26
     f6c:	23 c0       	rjmp	.+70     	; 0xfb4 <DIO_Initpin+0x1e8>
     f6e:	27 b3       	in	r18, 0x17	; 23
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	01 80       	ldd	r0, Z+1	; 0x01
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_Initpin+0x1b0>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_Initpin+0x1ac>
     f80:	82 2b       	or	r24, r18
     f82:	87 bb       	out	0x17, r24	; 23
     f84:	17 c0       	rjmp	.+46     	; 0xfb4 <DIO_Initpin+0x1e8>
     f86:	24 b3       	in	r18, 0x14	; 20
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	01 80       	ldd	r0, Z+1	; 0x01
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_Initpin+0x1c8>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_Initpin+0x1c4>
     f98:	82 2b       	or	r24, r18
     f9a:	84 bb       	out	0x14, r24	; 20
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <DIO_Initpin+0x1e8>
     f9e:	21 b3       	in	r18, 0x11	; 17
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	01 80       	ldd	r0, Z+1	; 0x01
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_Initpin+0x1e0>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_Initpin+0x1dc>
     fb0:	82 2b       	or	r24, r18
     fb2:	81 bb       	out	0x11, r24	; 17
     fb4:	83 81       	ldd	r24, Z+3	; 0x03
     fb6:	81 11       	cpse	r24, r1
     fb8:	39 c0       	rjmp	.+114    	; 0x102c <DIO_Initpin+0x260>
     fba:	80 81       	ld	r24, Z
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 f0       	breq	.+36     	; 0xfe4 <DIO_Initpin+0x218>
     fc0:	28 f0       	brcs	.+10     	; 0xfcc <DIO_Initpin+0x200>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	d9 f0       	breq	.+54     	; 0xffc <DIO_Initpin+0x230>
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	29 f1       	breq	.+74     	; 0x1014 <DIO_Initpin+0x248>
     fca:	08 95       	ret
     fcc:	2b b3       	in	r18, 0x1b	; 27
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	01 80       	ldd	r0, Z+1	; 0x01
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_Initpin+0x20e>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_Initpin+0x20a>
     fde:	82 2b       	or	r24, r18
     fe0:	8b bb       	out	0x1b, r24	; 27
     fe2:	08 95       	ret
     fe4:	28 b3       	in	r18, 0x18	; 24
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	01 80       	ldd	r0, Z+1	; 0x01
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_Initpin+0x226>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_Initpin+0x222>
     ff6:	82 2b       	or	r24, r18
     ff8:	88 bb       	out	0x18, r24	; 24
     ffa:	08 95       	ret
     ffc:	25 b3       	in	r18, 0x15	; 21
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	01 80       	ldd	r0, Z+1	; 0x01
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_Initpin+0x23e>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_Initpin+0x23a>
    100e:	82 2b       	or	r24, r18
    1010:	85 bb       	out	0x15, r24	; 21
    1012:	08 95       	ret
    1014:	22 b3       	in	r18, 0x12	; 18
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	01 80       	ldd	r0, Z+1	; 0x01
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_Initpin+0x256>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_Initpin+0x252>
    1026:	82 2b       	or	r24, r18
    1028:	82 bb       	out	0x12, r24	; 18
    102a:	08 95       	ret
    102c:	80 81       	ld	r24, Z
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	99 f0       	breq	.+38     	; 0x1058 <DIO_Initpin+0x28c>
    1032:	28 f0       	brcs	.+10     	; 0x103e <DIO_Initpin+0x272>
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	e9 f0       	breq	.+58     	; 0x1072 <DIO_Initpin+0x2a6>
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	41 f1       	breq	.+80     	; 0x108c <DIO_Initpin+0x2c0>
    103c:	08 95       	ret
    103e:	2b b3       	in	r18, 0x1b	; 27
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	01 80       	ldd	r0, Z+1	; 0x01
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_Initpin+0x280>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_Initpin+0x27c>
    1050:	80 95       	com	r24
    1052:	82 23       	and	r24, r18
    1054:	8b bb       	out	0x1b, r24	; 27
    1056:	08 95       	ret
    1058:	28 b3       	in	r18, 0x18	; 24
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	01 80       	ldd	r0, Z+1	; 0x01
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_Initpin+0x29a>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_Initpin+0x296>
    106a:	80 95       	com	r24
    106c:	82 23       	and	r24, r18
    106e:	88 bb       	out	0x18, r24	; 24
    1070:	08 95       	ret
    1072:	25 b3       	in	r18, 0x15	; 21
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	01 80       	ldd	r0, Z+1	; 0x01
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_Initpin+0x2b4>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_Initpin+0x2b0>
    1084:	80 95       	com	r24
    1086:	82 23       	and	r24, r18
    1088:	85 bb       	out	0x15, r24	; 21
    108a:	08 95       	ret
    108c:	22 b3       	in	r18, 0x12	; 18
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	01 80       	ldd	r0, Z+1	; 0x01
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_Initpin+0x2ce>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_Initpin+0x2ca>
    109e:	80 95       	com	r24
    10a0:	82 23       	and	r24, r18
    10a2:	82 bb       	out	0x12, r24	; 18
    10a4:	08 95       	ret

000010a6 <DIO_initpinn>:
    10a6:	98 2f       	mov	r25, r24
    10a8:	96 95       	lsr	r25
    10aa:	96 95       	lsr	r25
    10ac:	96 95       	lsr	r25
    10ae:	87 70       	andi	r24, 0x07	; 7
    10b0:	61 30       	cpi	r22, 0x01	; 1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <DIO_initpinn+0x10>
    10b4:	55 c0       	rjmp	.+170    	; 0x1160 <DIO_initpinn+0xba>
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <DIO_initpinn+0x1a>
    10b8:	62 30       	cpi	r22, 0x02	; 2
    10ba:	09 f4       	brne	.+2      	; 0x10be <DIO_initpinn+0x18>
    10bc:	a1 c0       	rjmp	.+322    	; 0x1200 <DIO_initpinn+0x15a>
    10be:	08 95       	ret
    10c0:	91 30       	cpi	r25, 0x01	; 1
    10c2:	c1 f0       	breq	.+48     	; 0x10f4 <DIO_initpinn+0x4e>
    10c4:	28 f0       	brcs	.+10     	; 0x10d0 <DIO_initpinn+0x2a>
    10c6:	92 30       	cpi	r25, 0x02	; 2
    10c8:	39 f1       	breq	.+78     	; 0x1118 <DIO_initpinn+0x72>
    10ca:	93 30       	cpi	r25, 0x03	; 3
    10cc:	b9 f1       	breq	.+110    	; 0x113c <DIO_initpinn+0x96>
    10ce:	08 95       	ret
    10d0:	4a b3       	in	r20, 0x1a	; 26
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	b9 01       	movw	r22, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_initpinn+0x38>
    10da:	66 0f       	add	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_initpinn+0x34>
    10e2:	cb 01       	movw	r24, r22
    10e4:	94 2f       	mov	r25, r20
    10e6:	98 2b       	or	r25, r24
    10e8:	9a bb       	out	0x1a, r25	; 26
    10ea:	9b b3       	in	r25, 0x1b	; 27
    10ec:	80 95       	com	r24
    10ee:	89 23       	and	r24, r25
    10f0:	8b bb       	out	0x1b, r24	; 27
    10f2:	08 95       	ret
    10f4:	47 b3       	in	r20, 0x17	; 23
    10f6:	21 e0       	ldi	r18, 0x01	; 1
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	b9 01       	movw	r22, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_initpinn+0x5c>
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	8a 95       	dec	r24
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_initpinn+0x58>
    1106:	cb 01       	movw	r24, r22
    1108:	94 2f       	mov	r25, r20
    110a:	98 2b       	or	r25, r24
    110c:	97 bb       	out	0x17, r25	; 23
    110e:	98 b3       	in	r25, 0x18	; 24
    1110:	80 95       	com	r24
    1112:	89 23       	and	r24, r25
    1114:	88 bb       	out	0x18, r24	; 24
    1116:	08 95       	ret
    1118:	44 b3       	in	r20, 0x14	; 20
    111a:	21 e0       	ldi	r18, 0x01	; 1
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	b9 01       	movw	r22, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_initpinn+0x80>
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	8a 95       	dec	r24
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_initpinn+0x7c>
    112a:	cb 01       	movw	r24, r22
    112c:	94 2f       	mov	r25, r20
    112e:	98 2b       	or	r25, r24
    1130:	94 bb       	out	0x14, r25	; 20
    1132:	95 b3       	in	r25, 0x15	; 21
    1134:	80 95       	com	r24
    1136:	89 23       	and	r24, r25
    1138:	85 bb       	out	0x15, r24	; 21
    113a:	08 95       	ret
    113c:	41 b3       	in	r20, 0x11	; 17
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	b9 01       	movw	r22, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_initpinn+0xa4>
    1146:	66 0f       	add	r22, r22
    1148:	77 1f       	adc	r23, r23
    114a:	8a 95       	dec	r24
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_initpinn+0xa0>
    114e:	cb 01       	movw	r24, r22
    1150:	94 2f       	mov	r25, r20
    1152:	98 2b       	or	r25, r24
    1154:	91 bb       	out	0x11, r25	; 17
    1156:	92 b3       	in	r25, 0x12	; 18
    1158:	80 95       	com	r24
    115a:	89 23       	and	r24, r25
    115c:	82 bb       	out	0x12, r24	; 18
    115e:	08 95       	ret
    1160:	91 30       	cpi	r25, 0x01	; 1
    1162:	c1 f0       	breq	.+48     	; 0x1194 <DIO_initpinn+0xee>
    1164:	28 f0       	brcs	.+10     	; 0x1170 <DIO_initpinn+0xca>
    1166:	92 30       	cpi	r25, 0x02	; 2
    1168:	39 f1       	breq	.+78     	; 0x11b8 <DIO_initpinn+0x112>
    116a:	93 30       	cpi	r25, 0x03	; 3
    116c:	b9 f1       	breq	.+110    	; 0x11dc <DIO_initpinn+0x136>
    116e:	08 95       	ret
    1170:	4a b3       	in	r20, 0x1a	; 26
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	b9 01       	movw	r22, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_initpinn+0xd8>
    117a:	66 0f       	add	r22, r22
    117c:	77 1f       	adc	r23, r23
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_initpinn+0xd4>
    1182:	cb 01       	movw	r24, r22
    1184:	80 95       	com	r24
    1186:	94 2f       	mov	r25, r20
    1188:	98 23       	and	r25, r24
    118a:	9a bb       	out	0x1a, r25	; 26
    118c:	9b b3       	in	r25, 0x1b	; 27
    118e:	89 23       	and	r24, r25
    1190:	8b bb       	out	0x1b, r24	; 27
    1192:	08 95       	ret
    1194:	47 b3       	in	r20, 0x17	; 23
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	b9 01       	movw	r22, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_initpinn+0xfc>
    119e:	66 0f       	add	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_initpinn+0xf8>
    11a6:	cb 01       	movw	r24, r22
    11a8:	80 95       	com	r24
    11aa:	94 2f       	mov	r25, r20
    11ac:	98 23       	and	r25, r24
    11ae:	97 bb       	out	0x17, r25	; 23
    11b0:	98 b3       	in	r25, 0x18	; 24
    11b2:	89 23       	and	r24, r25
    11b4:	88 bb       	out	0x18, r24	; 24
    11b6:	08 95       	ret
    11b8:	44 b3       	in	r20, 0x14	; 20
    11ba:	21 e0       	ldi	r18, 0x01	; 1
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	b9 01       	movw	r22, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_initpinn+0x120>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_initpinn+0x11c>
    11ca:	cb 01       	movw	r24, r22
    11cc:	80 95       	com	r24
    11ce:	94 2f       	mov	r25, r20
    11d0:	98 23       	and	r25, r24
    11d2:	94 bb       	out	0x14, r25	; 20
    11d4:	95 b3       	in	r25, 0x15	; 21
    11d6:	89 23       	and	r24, r25
    11d8:	85 bb       	out	0x15, r24	; 21
    11da:	08 95       	ret
    11dc:	41 b3       	in	r20, 0x11	; 17
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	b9 01       	movw	r22, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_initpinn+0x144>
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_initpinn+0x140>
    11ee:	cb 01       	movw	r24, r22
    11f0:	80 95       	com	r24
    11f2:	94 2f       	mov	r25, r20
    11f4:	98 23       	and	r25, r24
    11f6:	91 bb       	out	0x11, r25	; 17
    11f8:	92 b3       	in	r25, 0x12	; 18
    11fa:	89 23       	and	r24, r25
    11fc:	82 bb       	out	0x12, r24	; 18
    11fe:	08 95       	ret
    1200:	91 30       	cpi	r25, 0x01	; 1
    1202:	c1 f0       	breq	.+48     	; 0x1234 <DIO_initpinn+0x18e>
    1204:	28 f0       	brcs	.+10     	; 0x1210 <DIO_initpinn+0x16a>
    1206:	92 30       	cpi	r25, 0x02	; 2
    1208:	39 f1       	breq	.+78     	; 0x1258 <DIO_initpinn+0x1b2>
    120a:	93 30       	cpi	r25, 0x03	; 3
    120c:	b9 f1       	breq	.+110    	; 0x127c <DIO_initpinn+0x1d6>
    120e:	08 95       	ret
    1210:	4a b3       	in	r20, 0x1a	; 26
    1212:	21 e0       	ldi	r18, 0x01	; 1
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	b9 01       	movw	r22, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_initpinn+0x178>
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_initpinn+0x174>
    1222:	cb 01       	movw	r24, r22
    1224:	96 2f       	mov	r25, r22
    1226:	90 95       	com	r25
    1228:	94 23       	and	r25, r20
    122a:	9a bb       	out	0x1a, r25	; 26
    122c:	9b b3       	in	r25, 0x1b	; 27
    122e:	89 2b       	or	r24, r25
    1230:	8b bb       	out	0x1b, r24	; 27
    1232:	08 95       	ret
    1234:	47 b3       	in	r20, 0x17	; 23
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	b9 01       	movw	r22, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_initpinn+0x19c>
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_initpinn+0x198>
    1246:	cb 01       	movw	r24, r22
    1248:	96 2f       	mov	r25, r22
    124a:	90 95       	com	r25
    124c:	94 23       	and	r25, r20
    124e:	97 bb       	out	0x17, r25	; 23
    1250:	98 b3       	in	r25, 0x18	; 24
    1252:	89 2b       	or	r24, r25
    1254:	88 bb       	out	0x18, r24	; 24
    1256:	08 95       	ret
    1258:	44 b3       	in	r20, 0x14	; 20
    125a:	21 e0       	ldi	r18, 0x01	; 1
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	b9 01       	movw	r22, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_initpinn+0x1c0>
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	8a 95       	dec	r24
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_initpinn+0x1bc>
    126a:	cb 01       	movw	r24, r22
    126c:	96 2f       	mov	r25, r22
    126e:	90 95       	com	r25
    1270:	94 23       	and	r25, r20
    1272:	94 bb       	out	0x14, r25	; 20
    1274:	95 b3       	in	r25, 0x15	; 21
    1276:	89 2b       	or	r24, r25
    1278:	85 bb       	out	0x15, r24	; 21
    127a:	08 95       	ret
    127c:	41 b3       	in	r20, 0x11	; 17
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	b9 01       	movw	r22, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_initpinn+0x1e4>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_initpinn+0x1e0>
    128e:	cb 01       	movw	r24, r22
    1290:	96 2f       	mov	r25, r22
    1292:	90 95       	com	r25
    1294:	94 23       	and	r25, r20
    1296:	91 bb       	out	0x11, r25	; 17
    1298:	92 b3       	in	r25, 0x12	; 18
    129a:	89 2b       	or	r24, r25
    129c:	82 bb       	out	0x12, r24	; 18
    129e:	08 95       	ret

000012a0 <DIO_writepinn>:
    12a0:	98 2f       	mov	r25, r24
    12a2:	96 95       	lsr	r25
    12a4:	96 95       	lsr	r25
    12a6:	96 95       	lsr	r25
    12a8:	87 70       	andi	r24, 0x07	; 7
    12aa:	66 23       	and	r22, r22
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <DIO_writepinn+0x10>
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <DIO_writepinn+0x8e>
    12b0:	61 30       	cpi	r22, 0x01	; 1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <DIO_writepinn+0x16>
    12b4:	7b c0       	rjmp	.+246    	; 0x13ac <DIO_writepinn+0x10c>
    12b6:	91 30       	cpi	r25, 0x01	; 1
    12b8:	99 f0       	breq	.+38     	; 0x12e0 <DIO_writepinn+0x40>
    12ba:	28 f0       	brcs	.+10     	; 0x12c6 <DIO_writepinn+0x26>
    12bc:	92 30       	cpi	r25, 0x02	; 2
    12be:	e9 f0       	breq	.+58     	; 0x12fa <DIO_writepinn+0x5a>
    12c0:	93 30       	cpi	r25, 0x03	; 3
    12c2:	41 f1       	breq	.+80     	; 0x1314 <DIO_writepinn+0x74>
    12c4:	08 95       	ret
    12c6:	4b b3       	in	r20, 0x1b	; 27
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	b9 01       	movw	r22, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_writepinn+0x34>
    12d0:	66 0f       	add	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_writepinn+0x30>
    12d8:	cb 01       	movw	r24, r22
    12da:	84 2b       	or	r24, r20
    12dc:	8b bb       	out	0x1b, r24	; 27
    12de:	08 95       	ret
    12e0:	48 b3       	in	r20, 0x18	; 24
    12e2:	21 e0       	ldi	r18, 0x01	; 1
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	b9 01       	movw	r22, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_writepinn+0x4e>
    12ea:	66 0f       	add	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_writepinn+0x4a>
    12f2:	cb 01       	movw	r24, r22
    12f4:	84 2b       	or	r24, r20
    12f6:	88 bb       	out	0x18, r24	; 24
    12f8:	08 95       	ret
    12fa:	45 b3       	in	r20, 0x15	; 21
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	b9 01       	movw	r22, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_writepinn+0x68>
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_writepinn+0x64>
    130c:	cb 01       	movw	r24, r22
    130e:	84 2b       	or	r24, r20
    1310:	85 bb       	out	0x15, r24	; 21
    1312:	08 95       	ret
    1314:	42 b3       	in	r20, 0x12	; 18
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	b9 01       	movw	r22, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_writepinn+0x82>
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_writepinn+0x7e>
    1326:	cb 01       	movw	r24, r22
    1328:	84 2b       	or	r24, r20
    132a:	82 bb       	out	0x12, r24	; 18
    132c:	08 95       	ret
    132e:	91 30       	cpi	r25, 0x01	; 1
    1330:	a1 f0       	breq	.+40     	; 0x135a <DIO_writepinn+0xba>
    1332:	28 f0       	brcs	.+10     	; 0x133e <DIO_writepinn+0x9e>
    1334:	92 30       	cpi	r25, 0x02	; 2
    1336:	f9 f0       	breq	.+62     	; 0x1376 <DIO_writepinn+0xd6>
    1338:	93 30       	cpi	r25, 0x03	; 3
    133a:	59 f1       	breq	.+86     	; 0x1392 <DIO_writepinn+0xf2>
    133c:	08 95       	ret
    133e:	4b b3       	in	r20, 0x1b	; 27
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	b9 01       	movw	r22, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_writepinn+0xac>
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_writepinn+0xa8>
    1350:	cb 01       	movw	r24, r22
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8b bb       	out	0x1b, r24	; 27
    1358:	08 95       	ret
    135a:	48 b3       	in	r20, 0x18	; 24
    135c:	21 e0       	ldi	r18, 0x01	; 1
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	b9 01       	movw	r22, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_writepinn+0xc8>
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_writepinn+0xc4>
    136c:	cb 01       	movw	r24, r22
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	88 bb       	out	0x18, r24	; 24
    1374:	08 95       	ret
    1376:	45 b3       	in	r20, 0x15	; 21
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	b9 01       	movw	r22, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_writepinn+0xe4>
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_writepinn+0xe0>
    1388:	cb 01       	movw	r24, r22
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	85 bb       	out	0x15, r24	; 21
    1390:	08 95       	ret
    1392:	42 b3       	in	r20, 0x12	; 18
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	b9 01       	movw	r22, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_writepinn+0x100>
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_writepinn+0xfc>
    13a4:	cb 01       	movw	r24, r22
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	82 bb       	out	0x12, r24	; 18
    13ac:	08 95       	ret

000013ae <DIO_InitDCM>:



void DIO_InitDCM(Uchar8_t pin, Uchar8_t port,Uchar8_t mode)
{
		if ( mode == DIO_MODE_INPUT)
    13ae:	41 11       	cpse	r20, r1
    13b0:	40 c0       	rjmp	.+128    	; 0x1432 <DIO_InitDCM+0x84>
		{
			switch(port)
    13b2:	61 30       	cpi	r22, 0x01	; 1
    13b4:	a1 f0       	breq	.+40     	; 0x13de <DIO_InitDCM+0x30>
    13b6:	28 f0       	brcs	.+10     	; 0x13c2 <DIO_InitDCM+0x14>
    13b8:	62 30       	cpi	r22, 0x02	; 2
    13ba:	f9 f0       	breq	.+62     	; 0x13fa <DIO_InitDCM+0x4c>
    13bc:	63 30       	cpi	r22, 0x03	; 3
    13be:	59 f1       	breq	.+86     	; 0x1416 <DIO_InitDCM+0x68>
    13c0:	08 95       	ret
			{
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_DDR_REG,pin);	break;
    13c2:	4a b3       	in	r20, 0x1a	; 26
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	b9 01       	movw	r22, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_InitDCM+0x22>
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_InitDCM+0x1e>
    13d4:	cb 01       	movw	r24, r22
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8a bb       	out	0x1a, r24	; 26
    13dc:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_DDR_REG,pin);	break;
    13de:	47 b3       	in	r20, 0x17	; 23
    13e0:	21 e0       	ldi	r18, 0x01	; 1
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	b9 01       	movw	r22, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_InitDCM+0x3e>
    13e8:	66 0f       	add	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_InitDCM+0x3a>
    13f0:	cb 01       	movw	r24, r22
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	87 bb       	out	0x17, r24	; 23
    13f8:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_DDR_REG,pin);	break;
    13fa:	44 b3       	in	r20, 0x14	; 20
    13fc:	21 e0       	ldi	r18, 0x01	; 1
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	b9 01       	movw	r22, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_InitDCM+0x5a>
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	8a 95       	dec	r24
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_InitDCM+0x56>
    140c:	cb 01       	movw	r24, r22
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	84 bb       	out	0x14, r24	; 20
    1414:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_DDR_REG,pin);	break;
    1416:	41 b3       	in	r20, 0x11	; 17
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	b9 01       	movw	r22, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_InitDCM+0x76>
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_InitDCM+0x72>
    1428:	cb 01       	movw	r24, r22
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	81 bb       	out	0x11, r24	; 17
    1430:	08 95       	ret
				default:			break;
			}
		}
		else if ( mode == DIO_MODE_OUTPUT)
    1432:	41 30       	cpi	r20, 0x01	; 1
    1434:	d9 f5       	brne	.+118    	; 0x14ac <DIO_InitDCM+0xfe>
		{
			switch( port )
    1436:	61 30       	cpi	r22, 0x01	; 1
    1438:	99 f0       	breq	.+38     	; 0x1460 <DIO_InitDCM+0xb2>
    143a:	28 f0       	brcs	.+10     	; 0x1446 <DIO_InitDCM+0x98>
    143c:	62 30       	cpi	r22, 0x02	; 2
    143e:	e9 f0       	breq	.+58     	; 0x147a <DIO_InitDCM+0xcc>
    1440:	63 30       	cpi	r22, 0x03	; 3
    1442:	41 f1       	breq	.+80     	; 0x1494 <DIO_InitDCM+0xe6>
    1444:	08 95       	ret
			{
				case DIO_PORTA:	SET_BIT(DIO_PORTA_DDR_REG,pin);	break;
    1446:	4a b3       	in	r20, 0x1a	; 26
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	b9 01       	movw	r22, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_InitDCM+0xa6>
    1450:	66 0f       	add	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	8a 95       	dec	r24
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_InitDCM+0xa2>
    1458:	cb 01       	movw	r24, r22
    145a:	84 2b       	or	r24, r20
    145c:	8a bb       	out	0x1a, r24	; 26
    145e:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_DDR_REG,pin);	break;
    1460:	47 b3       	in	r20, 0x17	; 23
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	b9 01       	movw	r22, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_InitDCM+0xc0>
    146a:	66 0f       	add	r22, r22
    146c:	77 1f       	adc	r23, r23
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_InitDCM+0xbc>
    1472:	cb 01       	movw	r24, r22
    1474:	84 2b       	or	r24, r20
    1476:	87 bb       	out	0x17, r24	; 23
    1478:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_DDR_REG,pin);	break;
    147a:	44 b3       	in	r20, 0x14	; 20
    147c:	21 e0       	ldi	r18, 0x01	; 1
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	b9 01       	movw	r22, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_InitDCM+0xda>
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_InitDCM+0xd6>
    148c:	cb 01       	movw	r24, r22
    148e:	84 2b       	or	r24, r20
    1490:	84 bb       	out	0x14, r24	; 20
    1492:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_DDR_REG,pin);	break;
    1494:	41 b3       	in	r20, 0x11	; 17
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	b9 01       	movw	r22, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_InitDCM+0xf4>
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_InitDCM+0xf0>
    14a6:	cb 01       	movw	r24, r22
    14a8:	84 2b       	or	r24, r20
    14aa:	81 bb       	out	0x11, r24	; 17
    14ac:	08 95       	ret

000014ae <ICU_getValue>:
}
 
 
void ICU_getValue(Uint32_t *u32_l_ICR_value)
{
	*u32_l_ICR_value = ICU_g_Count;
    14ae:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <ICU_g_Count>
    14b2:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <ICU_g_Count+0x1>
    14b6:	fc 01       	movw	r30, r24
    14b8:	31 83       	std	Z+1, r19	; 0x01
    14ba:	20 83       	st	Z, r18
    14bc:	08 95       	ret

000014be <EXI_enablePIE>:
 */

void EXI_enablePIE( Uchar8_t u8_a_interruptId, Uchar8_t u8_a_senseControl )
{

        SET_BIT(TIMER_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    14be:	8f b7       	in	r24, 0x3f	; 63
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	8f bf       	out	0x3f, r24	; 63

        SET_BIT( EXI_U8_GICR_REG, EXI_U8_INT2_BIT );
    14c4:	8b b7       	in	r24, 0x3b	; 59
    14c6:	80 62       	ori	r24, 0x20	; 32
    14c8:	8b bf       	out	0x3b, r24	; 59

                /* Check 1.1.1: Required SenseControl */
                switch ( u8_a_senseControl )
    14ca:	62 30       	cpi	r22, 0x02	; 2
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <EXI_enablePIE+0x16>
    14ce:	63 30       	cpi	r22, 0x03	; 3
    14d0:	29 f0       	breq	.+10     	; 0x14dc <EXI_enablePIE+0x1e>
    14d2:	08 95       	ret
                {
                    //case EXI_U8_SENSE_LOW_LEVEL		: CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                   // case EXI_U8_SENSE_LOGICAL_CHANGE: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                    case EXI_U8_SENSE_FALLING_EDGE	: CLEAR_BIT( EXI_U8_MCUCSR_REG, 6 ); break;
    14d4:	84 b7       	in	r24, 0x34	; 52
    14d6:	8f 7b       	andi	r24, 0xBF	; 191
    14d8:	84 bf       	out	0x34, r24	; 52
    14da:	08 95       	ret
                    case EXI_U8_SENSE_RISING_EDGE	: SET_BIT( EXI_U8_MCUCSR_REG, 6 );  break;
    14dc:	84 b7       	in	r24, 0x34	; 52
    14de:	80 64       	ori	r24, 0x40	; 64
    14e0:	84 bf       	out	0x34, r24	; 52
    14e2:	08 95       	ret

000014e4 <TIMER_tmr1NormalModeInit>:
 * @return An EN_TMR_ERROR_T value indicating the success or failure of the operation
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1NormalModeInit(EN_TIMER_INTERRPUT_T en_a_interrputEnable)
{
	switch (en_a_interrputEnable)
    14e4:	88 23       	and	r24, r24
    14e6:	19 f0       	breq	.+6      	; 0x14ee <TIMER_tmr1NormalModeInit+0xa>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	d9 f0       	breq	.+54     	; 0x1522 <TIMER_tmr1NormalModeInit+0x3e>
    14ec:	2e c0       	rjmp	.+92     	; 0x154a <TIMER_tmr1NormalModeInit+0x66>
	{
	case ENABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    14ee:	8f b5       	in	r24, 0x2f	; 47
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    14f4:	8f b5       	in	r24, 0x2f	; 47
    14f6:	8d 7f       	andi	r24, 0xFD	; 253
    14f8:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    14fa:	8e b5       	in	r24, 0x2e	; 46
    14fc:	87 7f       	andi	r24, 0xF7	; 247
    14fe:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    1500:	8e b5       	in	r24, 0x2e	; 46
    1502:	8f 7e       	andi	r24, 0xEF	; 239
    1504:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    1506:	8f b5       	in	r24, 0x2f	; 47
    1508:	88 60       	ori	r24, 0x08	; 8
    150a:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    150c:	8f b5       	in	r24, 0x2f	; 47
    150e:	84 60       	ori	r24, 0x04	; 4
    1510:	8f bd       	out	0x2f, r24	; 47
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    1512:	8f b7       	in	r24, 0x3f	; 63
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	8f bf       	out	0x3f, r24	; 63
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
    1518:	89 b7       	in	r24, 0x39	; 57
    151a:	84 60       	ori	r24, 0x04	; 4
    151c:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    151e:	80 e0       	ldi	r24, 0x00	; 0
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
		break;
    1520:	08 95       	ret
	case DISABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    1522:	8f b5       	in	r24, 0x2f	; 47
    1524:	8e 7f       	andi	r24, 0xFE	; 254
    1526:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    1528:	8f b5       	in	r24, 0x2f	; 47
    152a:	8d 7f       	andi	r24, 0xFD	; 253
    152c:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    152e:	8e b5       	in	r24, 0x2e	; 46
    1530:	87 7f       	andi	r24, 0xF7	; 247
    1532:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    1534:	8e b5       	in	r24, 0x2e	; 46
    1536:	8f 7e       	andi	r24, 0xEF	; 239
    1538:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    153a:	8f b5       	in	r24, 0x2f	; 47
    153c:	88 60       	ori	r24, 0x08	; 8
    153e:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    1540:	8f b5       	in	r24, 0x2f	; 47
    1542:	84 60       	ori	r24, 0x04	; 4
    1544:	8f bd       	out	0x2f, r24	; 47
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1546:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
    1548:	08 95       	ret
	default:
		return TIMER_ERROR;
    154a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    154c:	08 95       	ret

0000154e <TIMER_tmr1Start>:
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1Start(Uint16_t u16_a_prescaler)
{
	//select the required prescaler value
	switch(u16_a_prescaler)
    154e:	80 34       	cpi	r24, 0x40	; 64
    1550:	91 05       	cpc	r25, r1
    1552:	29 f1       	breq	.+74     	; 0x159e <TIMER_tmr1Start+0x50>
    1554:	30 f4       	brcc	.+12     	; 0x1562 <TIMER_tmr1Start+0x14>
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	59 f0       	breq	.+22     	; 0x1572 <TIMER_tmr1Start+0x24>
    155c:	08 97       	sbiw	r24, 0x08	; 8
    155e:	a1 f0       	breq	.+40     	; 0x1588 <TIMER_tmr1Start+0x3a>
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <TIMER_tmr1Start+0x92>
    1562:	81 15       	cp	r24, r1
    1564:	21 e0       	ldi	r18, 0x01	; 1
    1566:	92 07       	cpc	r25, r18
    1568:	29 f1       	breq	.+74     	; 0x15b4 <TIMER_tmr1Start+0x66>
    156a:	81 15       	cp	r24, r1
    156c:	94 40       	sbci	r25, 0x04	; 4
    156e:	69 f1       	breq	.+90     	; 0x15ca <TIMER_tmr1Start+0x7c>
    1570:	37 c0       	rjmp	.+110    	; 0x15e0 <TIMER_tmr1Start+0x92>
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1572:	8e b5       	in	r24, 0x2e	; 46
    1574:	8d 7f       	andi	r24, 0xFD	; 253
    1576:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    1578:	8e b5       	in	r24, 0x2e	; 46
    157a:	8b 7f       	andi	r24, 0xFB	; 251
    157c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    157e:	8e b5       	in	r24, 0x2e	; 46
    1580:	81 60       	ori	r24, 0x01	; 1
    1582:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1584:	80 e0       	ldi	r24, 0x00	; 0
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    1586:	08 95       	ret
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1588:	8e b5       	in	r24, 0x2e	; 46
    158a:	8e 7f       	andi	r24, 0xFE	; 254
    158c:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    158e:	8e b5       	in	r24, 0x2e	; 46
    1590:	8b 7f       	andi	r24, 0xFB	; 251
    1592:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1594:	8e b5       	in	r24, 0x2e	; 46
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    159a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		break;
    159c:	08 95       	ret
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    159e:	8e b5       	in	r24, 0x2e	; 46
    15a0:	8b 7f       	andi	r24, 0xFB	; 251
    15a2:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15a4:	8e b5       	in	r24, 0x2e	; 46
    15a6:	82 60       	ori	r24, 0x02	; 2
    15a8:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15aa:	8e b5       	in	r24, 0x2e	; 46
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15b0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    15b2:	08 95       	ret
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15b4:	8e b5       	in	r24, 0x2e	; 46
    15b6:	8d 7f       	andi	r24, 0xFD	; 253
    15b8:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15ba:	8e b5       	in	r24, 0x2e	; 46
    15bc:	8e 7f       	andi	r24, 0xFE	; 254
    15be:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15c0:	8e b5       	in	r24, 0x2e	; 46
    15c2:	84 60       	ori	r24, 0x04	; 4
    15c4:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15c6:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		break;
    15c8:	08 95       	ret
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15ca:	8e b5       	in	r24, 0x2e	; 46
    15cc:	8d 7f       	andi	r24, 0xFD	; 253
    15ce:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15d0:	8e b5       	in	r24, 0x2e	; 46
    15d2:	84 60       	ori	r24, 0x04	; 4
    15d4:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15d6:	8e b5       	in	r24, 0x2e	; 46
    15d8:	81 60       	ori	r24, 0x01	; 1
    15da:	8e bd       	out	0x2e, r24	; 46
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15dc:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    15de:	08 95       	ret
	default:
		return TIMER_ERROR;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    15e2:	08 95       	ret

000015e4 <TIMER_tmr1Stop>:

void TIMER_tmr1Stop(void)
{
 //Stop the timer by clearing the prescaler

	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15e4:	8e b5       	in	r24, 0x2e	; 46
    15e6:	8e 7f       	andi	r24, 0xFE	; 254
    15e8:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15ea:	8e b5       	in	r24, 0x2e	; 46
    15ec:	8d 7f       	andi	r24, 0xFD	; 253
    15ee:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15f0:	8e b5       	in	r24, 0x2e	; 46
    15f2:	8b 7f       	andi	r24, 0xFB	; 251
    15f4:	8e bd       	out	0x2e, r24	; 46
    15f6:	08 95       	ret

000015f8 <ICU_RisingEdgeCapture>:
 * @param[in] void.
 *
 * @return void.
 */
void ICU_RisingEdgeCapture(void)
{
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
	TIMER_tmr1NormalModeInit(ST_g_softwareICU->timer1_ISR);
    15fc:	c1 e7       	ldi	r28, 0x71	; 113
    15fe:	d0 e0       	ldi	r29, 0x00	; 0
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <TIMER_tmr1NormalModeInit>
	TIMER_tmr1Stop();
    1606:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <TIMER_tmr1Stop>
	
	EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_firstSenseControl);
    160a:	69 81       	ldd	r22, Y+1	; 0x01
    160c:	88 81       	ld	r24, Y
    160e:	0e 94 5f 0a 	call	0x14be	; 0x14be <EXI_enablePIE>
	ICU_g_edgeFlag = RISING;
    1612:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <ICU_g_edgeFlag>
	TIMER_tmr1Start(1);
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 a7 0a 	call	0x154e	; 0x154e <TIMER_tmr1Start>
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <__vector_3>:
	
/**
 * ISR function implementation of INT2
 * */
ISR(EXT_INT_2)
{
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    /* Save the current value of the timer/counter register  */
	TIMER_g_timer1RegValue = TMR_U16_TCNT1_REG;
    1646:	8c b5       	in	r24, 0x2c	; 44
    1648:	9d b5       	in	r25, 0x2d	; 45
    164a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <TIMER_g_timer1RegValue+0x1>
    164e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <TIMER_g_timer1RegValue>
	if(ICU_g_edgeFlag == RISING)
    1652:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <ICU_g_edgeFlag>
    1656:	21 11       	cpse	r18, r1
    1658:	14 c0       	rjmp	.+40     	; 0x1682 <__vector_3+0x5e>
	{
		ICU_g_ValueRising = TIMER_g_timer1RegValue;
    165a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ICU_g_ValueRising+0x1>
    165e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ICU_g_ValueRising>
		/* Clear Timer counter */
		TMR_U16_TCNT1_REG = 0;
    1662:	1d bc       	out	0x2d, r1	; 45
    1664:	1c bc       	out	0x2c, r1	; 44
		/* Set the external interrupt event at falling edge.*/
		EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_secondSenseControl );
    1666:	e1 e7       	ldi	r30, 0x71	; 113
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	62 81       	ldd	r22, Z+2	; 0x02
    166c:	80 81       	ld	r24, Z
    166e:	0e 94 5f 0a 	call	0x14be	; 0x14be <EXI_enablePIE>
		/* Clear Timer overflow count */
		u32_g_timer1Overflow = 0;
    1672:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u32_g_timer1Overflow+0x1>
    1676:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <u32_g_timer1Overflow>
		ICU_g_edgeFlag = FALLING;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <ICU_g_edgeFlag>
    1680:	13 c0       	rjmp	.+38     	; 0x16a8 <__vector_3+0x84>
	}
	else
	{
		ICU_g_ValueFalling = TIMER_g_timer1RegValue;
    1682:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <ICU_g_ValueFalling+0x1>
    1686:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <ICU_g_ValueFalling>
		ICU_g_Count = TIMER_g_timer1RegValue + (65535 * u32_g_timer1Overflow);
    168a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <u32_g_timer1Overflow>
    168e:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <u32_g_timer1Overflow+0x1>
    1692:	82 1b       	sub	r24, r18
    1694:	93 0b       	sbc	r25, r19
    1696:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <ICU_g_Count+0x1>
    169a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ICU_g_Count>
		/* Stop timer1 */
		TIMER_tmr1Stop();
    169e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <TIMER_tmr1Stop>
		ICU_g_flag = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ICU_g_flag>
	}

}	
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_9>:
		
ISR(TIM1_OVF_INT)
{
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
	u32_g_timer1Overflow++;
    16d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <u32_g_timer1Overflow>
    16dc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <u32_g_timer1Overflow+0x1>
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <u32_g_timer1Overflow+0x1>
    16e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <u32_g_timer1Overflow>
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
    16f8:	8f b7       	in	r24, 0x3f	; 63
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	8f bf       	out	0x3f, r24	; 63
    16fe:	08 95       	ret

00001700 <TIMER0_PWM_ExecutedFunction>:
	u32_g_NumOfOVFs = u32_loc_totalTicks / 256 ;
	
	u8_loc_initValue = 256 - (u32_loc_totalTicks % 256);
	
	TCNT0 = u8_loc_initValue;
	u32_g_NumOfOVFs++;
    1700:	cf 93       	push	r28
    1702:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_g_on_off_state>
    1706:	88 23       	and	r24, r24
    1708:	a1 f0       	breq	.+40     	; 0x1732 <TIMER0_PWM_ExecutedFunction+0x32>
    170a:	c0 e0       	ldi	r28, 0x00	; 0
    170c:	2e c0       	rjmp	.+92     	; 0x176a <TIMER0_PWM_ExecutedFunction+0x6a>
    170e:	ec 2f       	mov	r30, r28
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	cf 01       	movw	r24, r30
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	e8 0f       	add	r30, r24
    171e:	f9 1f       	adc	r31, r25
    1720:	ee 5f       	subi	r30, 0xFE	; 254
    1722:	fe 4f       	sbci	r31, 0xFE	; 254
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	61 81       	ldd	r22, Z+1	; 0x01
    1728:	80 81       	ld	r24, Z
    172a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
    172e:	cf 5f       	subi	r28, 0xFF	; 255
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <TIMER0_PWM_ExecutedFunction+0x34>
    1732:	c0 e0       	ldi	r28, 0x00	; 0
    1734:	c2 30       	cpi	r28, 0x02	; 2
    1736:	58 f3       	brcs	.-42     	; 0x170e <TIMER0_PWM_ExecutedFunction+0xe>
    1738:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <u8_g_OffTime>
    173c:	81 95       	neg	r24
    173e:	82 bf       	out	0x32, r24	; 50
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <u8_g_on_off_state>
    1746:	19 c0       	rjmp	.+50     	; 0x177a <TIMER0_PWM_ExecutedFunction+0x7a>
    1748:	ec 2f       	mov	r30, r28
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	cf 01       	movw	r24, r30
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	e8 0f       	add	r30, r24
    1758:	f9 1f       	adc	r31, r25
    175a:	ee 5f       	subi	r30, 0xFE	; 254
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	61 81       	ldd	r22, Z+1	; 0x01
    1762:	80 81       	ld	r24, Z
    1764:	0e 94 0d 06 	call	0xc1a	; 0xc1a <DIO_WritePin>
    1768:	cf 5f       	subi	r28, 0xFF	; 255
    176a:	c2 30       	cpi	r28, 0x02	; 2
    176c:	68 f3       	brcs	.-38     	; 0x1748 <TIMER0_PWM_ExecutedFunction+0x48>
    176e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <u8_g_OnTime>
    1772:	81 95       	neg	r24
    1774:	82 bf       	out	0x32, r24	; 50
    1776:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <u8_g_on_off_state>
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <TIMER0_init>:
    177e:	83 b7       	in	r24, 0x33	; 51
    1780:	87 7b       	andi	r24, 0xB7	; 183
    1782:	83 bf       	out	0x33, r24	; 51
    1784:	89 b7       	in	r24, 0x39	; 57
    1786:	81 60       	ori	r24, 0x01	; 1
    1788:	89 bf       	out	0x39, r24	; 57
    178a:	78 94       	sei
    178c:	08 95       	ret

0000178e <TIMER0_start>:
    178e:	83 b7       	in	r24, 0x33	; 51
    1790:	88 7f       	andi	r24, 0xF8	; 248
    1792:	85 60       	ori	r24, 0x05	; 5
    1794:	83 bf       	out	0x33, r24	; 51
    1796:	08 95       	ret

00001798 <TIMER0_stop>:
    1798:	83 b7       	in	r24, 0x33	; 51
    179a:	88 7f       	andi	r24, 0xF8	; 248
    179c:	83 bf       	out	0x33, r24	; 51
    179e:	08 95       	ret

000017a0 <TIMER0_initPWM>:
	
}


void TIMER0_initPWM(void)
{
    17a0:	cf 93       	push	r28
	Uchar8_t u8_Loc_counter = 0;
	TIMER0_init();
    17a2:	0e 94 bf 0b 	call	0x177e	; 0x177e <TIMER0_init>
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17a6:	c0 e0       	ldi	r28, 0x00	; 0
    17a8:	0e c0       	rjmp	.+28     	; 0x17c6 <TIMER0_initPWM+0x26>
	{
		//DIO_s8SETPinDir(st_pwm_configs[u8_Loc_counter].pwm_pin,OUTPUT);
		//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
		DIO_Initpin(&st_pwm_configs[u8_Loc_counter].pwm_pin);
    17aa:	8c 2f       	mov	r24, r28
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 01       	movw	r18, r24
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	22 0f       	add	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	82 0f       	add	r24, r18
    17ba:	93 1f       	adc	r25, r19
    17bc:	8e 5f       	subi	r24, 0xFE	; 254
    17be:	9e 4f       	sbci	r25, 0xFE	; 254
    17c0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Initpin>

void TIMER0_initPWM(void)
{
	Uchar8_t u8_Loc_counter = 0;
	TIMER0_init();
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17c4:	cf 5f       	subi	r28, 0xFF	; 255
    17c6:	c2 30       	cpi	r28, 0x02	; 2
    17c8:	80 f3       	brcs	.-32     	; 0x17aa <TIMER0_initPWM+0xa>
		//DIO_s8SETPinDir(st_pwm_configs[u8_Loc_counter].pwm_pin,OUTPUT);
		//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
		DIO_Initpin(&st_pwm_configs[u8_Loc_counter].pwm_pin);
	}
	
}
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <TIMER0_setPwm>:
void TIMER0_setPwm(Uchar8_t u8_a_dutyCycle)
{
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
	
	u8_g_OnTime =  ((u8_a_dutyCycle * REG_SIZE)/100);
    17d2:	e8 2f       	mov	r30, r24
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	98 2f       	mov	r25, r24
    17d8:	c4 e6       	ldi	r28, 0x64	; 100
    17da:	d0 e0       	ldi	r29, 0x00	; 0
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	be 01       	movw	r22, r28
    17e0:	0e 94 25 10 	call	0x204a	; 0x204a <__divmodhi4>
    17e4:	26 2f       	mov	r18, r22
    17e6:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <u8_g_OnTime>
	u8_g_OffTime = (((100 -u8_a_dutyCycle) * REG_SIZE)/100);
    17ea:	ce 01       	movw	r24, r28
    17ec:	8e 1b       	sub	r24, r30
    17ee:	9f 0b       	sbc	r25, r31
    17f0:	98 2f       	mov	r25, r24
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	be 01       	movw	r22, r28
    17f6:	0e 94 25 10 	call	0x204a	; 0x204a <__divmodhi4>
    17fa:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <u8_g_OffTime>
	TCNT0 = REG_SIZE - u8_g_OnTime ;
    17fe:	21 95       	neg	r18
    1800:	22 bf       	out	0x32, r18	; 50
	TIMER0_start();
    1802:	0e 94 c7 0b 	call	0x178e	; 0x178e <TIMER0_start>
	
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <__vector_11>:
	}
}


ISR(TIM0_OVF_INT)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
	TIMER0_PWM_ExecutedFunction();
    182e:	0e 94 80 0b 	call	0x1700	; 0x1700 <TIMER0_PWM_ExecutedFunction>
}
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <TIMER_TMR2NormalModeInit>:
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
        return TIMER_OK;
    } else {
        return TIMER_ERROR;
    }
}
    1854:	88 23       	and	r24, r24
    1856:	19 f0       	breq	.+6      	; 0x185e <TIMER_TMR2NormalModeInit+0xa>
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	79 f0       	breq	.+30     	; 0x187a <TIMER_TMR2NormalModeInit+0x26>
    185c:	16 c0       	rjmp	.+44     	; 0x188a <TIMER_TMR2NormalModeInit+0x36>
    185e:	85 b5       	in	r24, 0x25	; 37
    1860:	8f 7b       	andi	r24, 0xBF	; 191
    1862:	85 bd       	out	0x25, r24	; 37
    1864:	85 b5       	in	r24, 0x25	; 37
    1866:	87 7f       	andi	r24, 0xF7	; 247
    1868:	85 bd       	out	0x25, r24	; 37
    186a:	8f b7       	in	r24, 0x3f	; 63
    186c:	80 68       	ori	r24, 0x80	; 128
    186e:	8f bf       	out	0x3f, r24	; 63
    1870:	89 b7       	in	r24, 0x39	; 57
    1872:	80 64       	ori	r24, 0x40	; 64
    1874:	89 bf       	out	0x39, r24	; 57
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	08 95       	ret
    187a:	85 b5       	in	r24, 0x25	; 37
    187c:	8f 7b       	andi	r24, 0xBF	; 191
    187e:	85 bd       	out	0x25, r24	; 37
    1880:	85 b5       	in	r24, 0x25	; 37
    1882:	87 7f       	andi	r24, 0xF7	; 247
    1884:	85 bd       	out	0x25, r24	; 37
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	08 95       	ret
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	08 95       	ret

0000188e <TIMER_TMR2Start>:
    188e:	80 34       	cpi	r24, 0x40	; 64
    1890:	91 05       	cpc	r25, r1
    1892:	c1 f1       	breq	.+112    	; 0x1904 <TIMER_TMR2Start+0x76>
    1894:	50 f4       	brcc	.+20     	; 0x18aa <TIMER_TMR2Start+0x1c>
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	91 05       	cpc	r25, r1
    189a:	01 f1       	breq	.+64     	; 0x18dc <TIMER_TMR2Start+0x4e>
    189c:	80 32       	cpi	r24, 0x20	; 32
    189e:	91 05       	cpc	r25, r1
    18a0:	41 f1       	breq	.+80     	; 0x18f2 <TIMER_TMR2Start+0x64>
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <TIMER_TMR2Start+0x1a>
    18a6:	58 c0       	rjmp	.+176    	; 0x1958 <TIMER_TMR2Start+0xca>
    18a8:	0e c0       	rjmp	.+28     	; 0x18c6 <TIMER_TMR2Start+0x38>
    18aa:	81 15       	cp	r24, r1
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	92 07       	cpc	r25, r18
    18b0:	e9 f1       	breq	.+122    	; 0x192c <TIMER_TMR2Start+0x9e>
    18b2:	81 15       	cp	r24, r1
    18b4:	24 e0       	ldi	r18, 0x04	; 4
    18b6:	92 07       	cpc	r25, r18
    18b8:	09 f4       	brne	.+2      	; 0x18bc <TIMER_TMR2Start+0x2e>
    18ba:	43 c0       	rjmp	.+134    	; 0x1942 <TIMER_TMR2Start+0xb4>
    18bc:	80 38       	cpi	r24, 0x80	; 128
    18be:	91 05       	cpc	r25, r1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <TIMER_TMR2Start+0x36>
    18c2:	4a c0       	rjmp	.+148    	; 0x1958 <TIMER_TMR2Start+0xca>
    18c4:	28 c0       	rjmp	.+80     	; 0x1916 <TIMER_TMR2Start+0x88>
    18c6:	85 b5       	in	r24, 0x25	; 37
    18c8:	8d 7f       	andi	r24, 0xFD	; 253
    18ca:	85 bd       	out	0x25, r24	; 37
    18cc:	85 b5       	in	r24, 0x25	; 37
    18ce:	8b 7f       	andi	r24, 0xFB	; 251
    18d0:	85 bd       	out	0x25, r24	; 37
    18d2:	85 b5       	in	r24, 0x25	; 37
    18d4:	81 60       	ori	r24, 0x01	; 1
    18d6:	85 bd       	out	0x25, r24	; 37
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	08 95       	ret
    18dc:	85 b5       	in	r24, 0x25	; 37
    18de:	8e 7f       	andi	r24, 0xFE	; 254
    18e0:	85 bd       	out	0x25, r24	; 37
    18e2:	85 b5       	in	r24, 0x25	; 37
    18e4:	8b 7f       	andi	r24, 0xFB	; 251
    18e6:	85 bd       	out	0x25, r24	; 37
    18e8:	85 b5       	in	r24, 0x25	; 37
    18ea:	82 60       	ori	r24, 0x02	; 2
    18ec:	85 bd       	out	0x25, r24	; 37
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	08 95       	ret
    18f2:	85 b5       	in	r24, 0x25	; 37
    18f4:	8b 7f       	andi	r24, 0xFB	; 251
    18f6:	85 bd       	out	0x25, r24	; 37
    18f8:	85 b5       	in	r24, 0x25	; 37
    18fa:	82 60       	ori	r24, 0x02	; 2
    18fc:	85 bd       	out	0x25, r24	; 37
    18fe:	85 b5       	in	r24, 0x25	; 37
    1900:	81 60       	ori	r24, 0x01	; 1
    1902:	85 bd       	out	0x25, r24	; 37
    1904:	85 b5       	in	r24, 0x25	; 37
    1906:	84 60       	ori	r24, 0x04	; 4
    1908:	85 bd       	out	0x25, r24	; 37
    190a:	85 b5       	in	r24, 0x25	; 37
    190c:	8d 7f       	andi	r24, 0xFD	; 253
    190e:	85 bd       	out	0x25, r24	; 37
    1910:	85 b5       	in	r24, 0x25	; 37
    1912:	8e 7f       	andi	r24, 0xFE	; 254
    1914:	85 bd       	out	0x25, r24	; 37
    1916:	85 b5       	in	r24, 0x25	; 37
    1918:	8b 7f       	andi	r24, 0xFB	; 251
    191a:	85 bd       	out	0x25, r24	; 37
    191c:	85 b5       	in	r24, 0x25	; 37
    191e:	8d 7f       	andi	r24, 0xFD	; 253
    1920:	85 bd       	out	0x25, r24	; 37
    1922:	85 b5       	in	r24, 0x25	; 37
    1924:	81 60       	ori	r24, 0x01	; 1
    1926:	85 bd       	out	0x25, r24	; 37
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	08 95       	ret
    192c:	85 b5       	in	r24, 0x25	; 37
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	85 bd       	out	0x25, r24	; 37
    1932:	85 b5       	in	r24, 0x25	; 37
    1934:	8e 7f       	andi	r24, 0xFE	; 254
    1936:	85 bd       	out	0x25, r24	; 37
    1938:	85 b5       	in	r24, 0x25	; 37
    193a:	84 60       	ori	r24, 0x04	; 4
    193c:	85 bd       	out	0x25, r24	; 37
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	08 95       	ret
    1942:	85 b5       	in	r24, 0x25	; 37
    1944:	82 60       	ori	r24, 0x02	; 2
    1946:	85 bd       	out	0x25, r24	; 37
    1948:	85 b5       	in	r24, 0x25	; 37
    194a:	84 60       	ori	r24, 0x04	; 4
    194c:	85 bd       	out	0x25, r24	; 37
    194e:	85 b5       	in	r24, 0x25	; 37
    1950:	81 60       	ori	r24, 0x01	; 1
    1952:	85 bd       	out	0x25, r24	; 37
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	08 95       	ret
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	08 95       	ret

0000195c <TMR_intDelay_ms>:
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	bc 01       	movw	r22, r24
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	4a e7       	ldi	r20, 0x7A	; 122
    1974:	54 e4       	ldi	r21, 0x44	; 68
    1976:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divsf3>
    197a:	6b 01       	movw	r12, r22
    197c:	7c 01       	movw	r14, r24
    197e:	27 e3       	ldi	r18, 0x37	; 55
    1980:	37 e3       	ldi	r19, 0x37	; 55
    1982:	46 e8       	ldi	r20, 0x86	; 134
    1984:	56 e4       	ldi	r21, 0x46	; 70
    1986:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__gesf2>
    198a:	18 16       	cp	r1, r24
    198c:	0c f4       	brge	.+2      	; 0x1990 <TMR_intDelay_ms+0x34>
    198e:	7c c0       	rjmp	.+248    	; 0x1a88 <TMR_intDelay_ms+0x12c>
    1990:	15 bc       	out	0x25, r1	; 37
    1992:	2d eb       	ldi	r18, 0xBD	; 189
    1994:	37 e3       	ldi	r19, 0x37	; 55
    1996:	46 e8       	ldi	r20, 0x86	; 134
    1998:	5e e3       	ldi	r21, 0x3E	; 62
    199a:	c7 01       	movw	r24, r14
    199c:	b6 01       	movw	r22, r12
    199e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__cmpsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	c4 f4       	brge	.+48     	; 0x19d6 <TMR_intDelay_ms+0x7a>
    19a6:	a7 01       	movw	r20, r14
    19a8:	96 01       	movw	r18, r12
    19aa:	6d eb       	ldi	r22, 0xBD	; 189
    19ac:	77 e3       	ldi	r23, 0x37	; 55
    19ae:	86 e8       	ldi	r24, 0x86	; 134
    19b0:	9e e3       	ldi	r25, 0x3E	; 62
    19b2:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__subsf3>
    19b6:	2d eb       	ldi	r18, 0xBD	; 189
    19b8:	37 e3       	ldi	r19, 0x37	; 55
    19ba:	46 e8       	ldi	r20, 0x86	; 134
    19bc:	5a e3       	ldi	r21, 0x3A	; 58
    19be:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divsf3>
    19c2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fixunssfsi>
    19c6:	64 bd       	out	0x24, r22	; 36
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <u16_g_overflow2Numbers+0x1>
    19d0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <u16_g_overflow2Numbers>
    19d4:	4f c0       	rjmp	.+158    	; 0x1a74 <TMR_intDelay_ms+0x118>
    19d6:	2d eb       	ldi	r18, 0xBD	; 189
    19d8:	37 e3       	ldi	r19, 0x37	; 55
    19da:	46 e8       	ldi	r20, 0x86	; 134
    19dc:	5e e3       	ldi	r21, 0x3E	; 62
    19de:	c7 01       	movw	r24, r14
    19e0:	b6 01       	movw	r22, r12
    19e2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__cmpsf2>
    19e6:	81 11       	cpse	r24, r1
    19e8:	08 c0       	rjmp	.+16     	; 0x19fa <TMR_intDelay_ms+0x9e>
    19ea:	14 bc       	out	0x24, r1	; 36
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <u16_g_overflow2Numbers+0x1>
    19f4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <u16_g_overflow2Numbers>
    19f8:	3d c0       	rjmp	.+122    	; 0x1a74 <TMR_intDelay_ms+0x118>
    19fa:	2d eb       	ldi	r18, 0xBD	; 189
    19fc:	37 e3       	ldi	r19, 0x37	; 55
    19fe:	46 e8       	ldi	r20, 0x86	; 134
    1a00:	5e e3       	ldi	r21, 0x3E	; 62
    1a02:	c7 01       	movw	r24, r14
    1a04:	b6 01       	movw	r22, r12
    1a06:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divsf3>
    1a0a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <ceil>
    1a0e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fixunssfsi>
    1a12:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <u16_g_overflow2Numbers+0x1>
    1a16:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <u16_g_overflow2Numbers>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__subsf3>
    1a2e:	2d eb       	ldi	r18, 0xBD	; 189
    1a30:	37 e3       	ldi	r19, 0x37	; 55
    1a32:	46 e8       	ldi	r20, 0x86	; 134
    1a34:	5e e3       	ldi	r21, 0x3E	; 62
    1a36:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__mulsf3>
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	c7 01       	movw	r24, r14
    1a40:	b6 01       	movw	r22, r12
    1a42:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__subsf3>
    1a46:	2d eb       	ldi	r18, 0xBD	; 189
    1a48:	37 e3       	ldi	r19, 0x37	; 55
    1a4a:	46 e8       	ldi	r20, 0x86	; 134
    1a4c:	5a e3       	ldi	r21, 0x3A	; 58
    1a4e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divsf3>
    1a52:	9b 01       	movw	r18, r22
    1a54:	ac 01       	movw	r20, r24
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	80 e8       	ldi	r24, 0x80	; 128
    1a5c:	93 e4       	ldi	r25, 0x43	; 67
    1a5e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__subsf3>
    1a62:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fixunssfsi>
    1a66:	64 bd       	out	0x24, r22	; 36
    1a68:	84 b5       	in	r24, 0x24	; 36
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <u16_g_tcnt2InitialVal+0x1>
    1a70:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <u16_g_tcnt2InitialVal>
    1a74:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <u16_g_overflow2Ticks+0x1>
    1a78:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <u16_g_overflow2Ticks>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	94 e0       	ldi	r25, 0x04	; 4
    1a80:	0e 94 47 0c 	call	0x188e	; 0x188e <TIMER_TMR2Start>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <TMR_intDelay_ms+0x12e>
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	cf 90       	pop	r12
    1a92:	08 95       	ret

00001a94 <TMR_TMR2Stop>:
    1a94:	85 b5       	in	r24, 0x25	; 37
    1a96:	8e 7f       	andi	r24, 0xFE	; 254
    1a98:	85 bd       	out	0x25, r24	; 37
    1a9a:	85 b5       	in	r24, 0x25	; 37
    1a9c:	8d 7f       	andi	r24, 0xFD	; 253
    1a9e:	85 bd       	out	0x25, r24	; 37
    1aa0:	85 b5       	in	r24, 0x25	; 37
    1aa2:	8b 7f       	andi	r24, 0xFB	; 251
    1aa4:	85 bd       	out	0x25, r24	; 37
    1aa6:	08 95       	ret

00001aa8 <__vector_5>:


ISR(TIM2_OVF_INT)
{
    1aa8:	1f 92       	push	r1
    1aaa:	0f 92       	push	r0
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	0f 92       	push	r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	2f 93       	push	r18
    1ab4:	3f 93       	push	r19
    1ab6:	4f 93       	push	r20
    1ab8:	5f 93       	push	r21
    1aba:	6f 93       	push	r22
    1abc:	7f 93       	push	r23
    1abe:	8f 93       	push	r24
    1ac0:	9f 93       	push	r25
    1ac2:	af 93       	push	r26
    1ac4:	bf 93       	push	r27
    1ac6:	ef 93       	push	r30
    1ac8:	ff 93       	push	r31
	u16_g_overflow2Ticks++;
    1aca:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <u16_g_overflow2Ticks>
    1ace:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <u16_g_overflow2Ticks+0x1>
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <u16_g_overflow2Ticks+0x1>
    1ad8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <u16_g_overflow2Ticks>
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers )
    1adc:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <u16_g_overflow2Numbers>
    1ae0:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <u16_g_overflow2Numbers+0x1>
    1ae4:	82 17       	cp	r24, r18
    1ae6:	93 07       	cpc	r25, r19
    1ae8:	48 f0       	brcs	.+18     	; 0x1afc <__vector_5+0x54>
	{
		u16_g_overflow2Ticks = 0;
    1aea:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <u16_g_overflow2Ticks+0x1>
    1aee:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <u16_g_overflow2Ticks>
		u8_g_timeOut = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <u8_g_timeOut>
		TMR_TMR2Stop();
    1af8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <TMR_TMR2Stop>
	}
}
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <__subsf3>:
    1b1e:	50 58       	subi	r21, 0x80	; 128

00001b20 <__addsf3>:
    1b20:	bb 27       	eor	r27, r27
    1b22:	aa 27       	eor	r26, r26
    1b24:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__addsf3x>
    1b28:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__fp_round>
    1b2c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__fp_pscA>
    1b30:	38 f0       	brcs	.+14     	; 0x1b40 <__addsf3+0x20>
    1b32:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fp_pscB>
    1b36:	20 f0       	brcs	.+8      	; 0x1b40 <__addsf3+0x20>
    1b38:	39 f4       	brne	.+14     	; 0x1b48 <__addsf3+0x28>
    1b3a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b3c:	19 f4       	brne	.+6      	; 0x1b44 <__addsf3+0x24>
    1b3e:	26 f4       	brtc	.+8      	; 0x1b48 <__addsf3+0x28>
    1b40:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__fp_nan>
    1b44:	0e f4       	brtc	.+2      	; 0x1b48 <__addsf3+0x28>
    1b46:	e0 95       	com	r30
    1b48:	e7 fb       	bst	r30, 7
    1b4a:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_inf>

00001b4e <__addsf3x>:
    1b4e:	e9 2f       	mov	r30, r25
    1b50:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__fp_split3>
    1b54:	58 f3       	brcs	.-42     	; 0x1b2c <__addsf3+0xc>
    1b56:	ba 17       	cp	r27, r26
    1b58:	62 07       	cpc	r22, r18
    1b5a:	73 07       	cpc	r23, r19
    1b5c:	84 07       	cpc	r24, r20
    1b5e:	95 07       	cpc	r25, r21
    1b60:	20 f0       	brcs	.+8      	; 0x1b6a <__addsf3x+0x1c>
    1b62:	79 f4       	brne	.+30     	; 0x1b82 <__addsf3x+0x34>
    1b64:	a6 f5       	brtc	.+104    	; 0x1bce <__addsf3x+0x80>
    1b66:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__fp_zero>
    1b6a:	0e f4       	brtc	.+2      	; 0x1b6e <__addsf3x+0x20>
    1b6c:	e0 95       	com	r30
    1b6e:	0b 2e       	mov	r0, r27
    1b70:	ba 2f       	mov	r27, r26
    1b72:	a0 2d       	mov	r26, r0
    1b74:	0b 01       	movw	r0, r22
    1b76:	b9 01       	movw	r22, r18
    1b78:	90 01       	movw	r18, r0
    1b7a:	0c 01       	movw	r0, r24
    1b7c:	ca 01       	movw	r24, r20
    1b7e:	a0 01       	movw	r20, r0
    1b80:	11 24       	eor	r1, r1
    1b82:	ff 27       	eor	r31, r31
    1b84:	59 1b       	sub	r21, r25
    1b86:	99 f0       	breq	.+38     	; 0x1bae <__addsf3x+0x60>
    1b88:	59 3f       	cpi	r21, 0xF9	; 249
    1b8a:	50 f4       	brcc	.+20     	; 0x1ba0 <__addsf3x+0x52>
    1b8c:	50 3e       	cpi	r21, 0xE0	; 224
    1b8e:	68 f1       	brcs	.+90     	; 0x1bea <__addsf3x+0x9c>
    1b90:	1a 16       	cp	r1, r26
    1b92:	f0 40       	sbci	r31, 0x00	; 0
    1b94:	a2 2f       	mov	r26, r18
    1b96:	23 2f       	mov	r18, r19
    1b98:	34 2f       	mov	r19, r20
    1b9a:	44 27       	eor	r20, r20
    1b9c:	58 5f       	subi	r21, 0xF8	; 248
    1b9e:	f3 cf       	rjmp	.-26     	; 0x1b86 <__addsf3x+0x38>
    1ba0:	46 95       	lsr	r20
    1ba2:	37 95       	ror	r19
    1ba4:	27 95       	ror	r18
    1ba6:	a7 95       	ror	r26
    1ba8:	f0 40       	sbci	r31, 0x00	; 0
    1baa:	53 95       	inc	r21
    1bac:	c9 f7       	brne	.-14     	; 0x1ba0 <__addsf3x+0x52>
    1bae:	7e f4       	brtc	.+30     	; 0x1bce <__addsf3x+0x80>
    1bb0:	1f 16       	cp	r1, r31
    1bb2:	ba 0b       	sbc	r27, r26
    1bb4:	62 0b       	sbc	r22, r18
    1bb6:	73 0b       	sbc	r23, r19
    1bb8:	84 0b       	sbc	r24, r20
    1bba:	ba f0       	brmi	.+46     	; 0x1bea <__addsf3x+0x9c>
    1bbc:	91 50       	subi	r25, 0x01	; 1
    1bbe:	a1 f0       	breq	.+40     	; 0x1be8 <__addsf3x+0x9a>
    1bc0:	ff 0f       	add	r31, r31
    1bc2:	bb 1f       	adc	r27, r27
    1bc4:	66 1f       	adc	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	88 1f       	adc	r24, r24
    1bca:	c2 f7       	brpl	.-16     	; 0x1bbc <__addsf3x+0x6e>
    1bcc:	0e c0       	rjmp	.+28     	; 0x1bea <__addsf3x+0x9c>
    1bce:	ba 0f       	add	r27, r26
    1bd0:	62 1f       	adc	r22, r18
    1bd2:	73 1f       	adc	r23, r19
    1bd4:	84 1f       	adc	r24, r20
    1bd6:	48 f4       	brcc	.+18     	; 0x1bea <__addsf3x+0x9c>
    1bd8:	87 95       	ror	r24
    1bda:	77 95       	ror	r23
    1bdc:	67 95       	ror	r22
    1bde:	b7 95       	ror	r27
    1be0:	f7 95       	ror	r31
    1be2:	9e 3f       	cpi	r25, 0xFE	; 254
    1be4:	08 f0       	brcs	.+2      	; 0x1be8 <__addsf3x+0x9a>
    1be6:	b0 cf       	rjmp	.-160    	; 0x1b48 <__addsf3+0x28>
    1be8:	93 95       	inc	r25
    1bea:	88 0f       	add	r24, r24
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <__addsf3x+0xa2>
    1bee:	99 27       	eor	r25, r25
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	97 95       	ror	r25
    1bf4:	87 95       	ror	r24
    1bf6:	08 95       	ret

00001bf8 <ceil>:
    1bf8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fp_trunc>
    1bfc:	90 f0       	brcs	.+36     	; 0x1c22 <ceil+0x2a>
    1bfe:	9f 37       	cpi	r25, 0x7F	; 127
    1c00:	48 f4       	brcc	.+18     	; 0x1c14 <ceil+0x1c>
    1c02:	91 11       	cpse	r25, r1
    1c04:	16 f4       	brtc	.+4      	; 0x1c0a <ceil+0x12>
    1c06:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_szero>
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	80 e8       	ldi	r24, 0x80	; 128
    1c10:	9f e3       	ldi	r25, 0x3F	; 63
    1c12:	08 95       	ret
    1c14:	26 f0       	brts	.+8      	; 0x1c1e <ceil+0x26>
    1c16:	1b 16       	cp	r1, r27
    1c18:	61 1d       	adc	r22, r1
    1c1a:	71 1d       	adc	r23, r1
    1c1c:	81 1d       	adc	r24, r1
    1c1e:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__fp_mintl>
    1c22:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__fp_mpack>

00001c26 <__cmpsf2>:
    1c26:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__fp_cmp>
    1c2a:	08 f4       	brcc	.+2      	; 0x1c2e <__cmpsf2+0x8>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	08 95       	ret

00001c30 <__divsf3>:
    1c30:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__divsf3x>
    1c34:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__fp_round>
    1c38:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fp_pscB>
    1c3c:	58 f0       	brcs	.+22     	; 0x1c54 <__divsf3+0x24>
    1c3e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__fp_pscA>
    1c42:	40 f0       	brcs	.+16     	; 0x1c54 <__divsf3+0x24>
    1c44:	29 f4       	brne	.+10     	; 0x1c50 <__divsf3+0x20>
    1c46:	5f 3f       	cpi	r21, 0xFF	; 255
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <__divsf3+0x24>
    1c4a:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_inf>
    1c4e:	51 11       	cpse	r21, r1
    1c50:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_szero>
    1c54:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__fp_nan>

00001c58 <__divsf3x>:
    1c58:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__fp_split3>
    1c5c:	68 f3       	brcs	.-38     	; 0x1c38 <__divsf3+0x8>

00001c5e <__divsf3_pse>:
    1c5e:	99 23       	and	r25, r25
    1c60:	b1 f3       	breq	.-20     	; 0x1c4e <__divsf3+0x1e>
    1c62:	55 23       	and	r21, r21
    1c64:	91 f3       	breq	.-28     	; 0x1c4a <__divsf3+0x1a>
    1c66:	95 1b       	sub	r25, r21
    1c68:	55 0b       	sbc	r21, r21
    1c6a:	bb 27       	eor	r27, r27
    1c6c:	aa 27       	eor	r26, r26
    1c6e:	62 17       	cp	r22, r18
    1c70:	73 07       	cpc	r23, r19
    1c72:	84 07       	cpc	r24, r20
    1c74:	38 f0       	brcs	.+14     	; 0x1c84 <__divsf3_pse+0x26>
    1c76:	9f 5f       	subi	r25, 0xFF	; 255
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	22 0f       	add	r18, r18
    1c7c:	33 1f       	adc	r19, r19
    1c7e:	44 1f       	adc	r20, r20
    1c80:	aa 1f       	adc	r26, r26
    1c82:	a9 f3       	breq	.-22     	; 0x1c6e <__divsf3_pse+0x10>
    1c84:	35 d0       	rcall	.+106    	; 0x1cf0 <__divsf3_pse+0x92>
    1c86:	0e 2e       	mov	r0, r30
    1c88:	3a f0       	brmi	.+14     	; 0x1c98 <__divsf3_pse+0x3a>
    1c8a:	e0 e8       	ldi	r30, 0x80	; 128
    1c8c:	32 d0       	rcall	.+100    	; 0x1cf2 <__divsf3_pse+0x94>
    1c8e:	91 50       	subi	r25, 0x01	; 1
    1c90:	50 40       	sbci	r21, 0x00	; 0
    1c92:	e6 95       	lsr	r30
    1c94:	00 1c       	adc	r0, r0
    1c96:	ca f7       	brpl	.-14     	; 0x1c8a <__divsf3_pse+0x2c>
    1c98:	2b d0       	rcall	.+86     	; 0x1cf0 <__divsf3_pse+0x92>
    1c9a:	fe 2f       	mov	r31, r30
    1c9c:	29 d0       	rcall	.+82     	; 0x1cf0 <__divsf3_pse+0x92>
    1c9e:	66 0f       	add	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	26 17       	cp	r18, r22
    1ca8:	37 07       	cpc	r19, r23
    1caa:	48 07       	cpc	r20, r24
    1cac:	ab 07       	cpc	r26, r27
    1cae:	b0 e8       	ldi	r27, 0x80	; 128
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <__divsf3_pse+0x56>
    1cb2:	bb 0b       	sbc	r27, r27
    1cb4:	80 2d       	mov	r24, r0
    1cb6:	bf 01       	movw	r22, r30
    1cb8:	ff 27       	eor	r31, r31
    1cba:	93 58       	subi	r25, 0x83	; 131
    1cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbe:	3a f0       	brmi	.+14     	; 0x1cce <__divsf3_pse+0x70>
    1cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	78 f0       	brcs	.+30     	; 0x1ce4 <__divsf3_pse+0x86>
    1cc6:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_inf>
    1cca:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_szero>
    1cce:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd0:	e4 f3       	brlt	.-8      	; 0x1cca <__divsf3_pse+0x6c>
    1cd2:	98 3e       	cpi	r25, 0xE8	; 232
    1cd4:	d4 f3       	brlt	.-12     	; 0x1cca <__divsf3_pse+0x6c>
    1cd6:	86 95       	lsr	r24
    1cd8:	77 95       	ror	r23
    1cda:	67 95       	ror	r22
    1cdc:	b7 95       	ror	r27
    1cde:	f7 95       	ror	r31
    1ce0:	9f 5f       	subi	r25, 0xFF	; 255
    1ce2:	c9 f7       	brne	.-14     	; 0x1cd6 <__divsf3_pse+0x78>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	91 1d       	adc	r25, r1
    1ce8:	96 95       	lsr	r25
    1cea:	87 95       	ror	r24
    1cec:	97 f9       	bld	r25, 7
    1cee:	08 95       	ret
    1cf0:	e1 e0       	ldi	r30, 0x01	; 1
    1cf2:	66 0f       	add	r22, r22
    1cf4:	77 1f       	adc	r23, r23
    1cf6:	88 1f       	adc	r24, r24
    1cf8:	bb 1f       	adc	r27, r27
    1cfa:	62 17       	cp	r22, r18
    1cfc:	73 07       	cpc	r23, r19
    1cfe:	84 07       	cpc	r24, r20
    1d00:	ba 07       	cpc	r27, r26
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <__divsf3_pse+0xae>
    1d04:	62 1b       	sub	r22, r18
    1d06:	73 0b       	sbc	r23, r19
    1d08:	84 0b       	sbc	r24, r20
    1d0a:	ba 0b       	sbc	r27, r26
    1d0c:	ee 1f       	adc	r30, r30
    1d0e:	88 f7       	brcc	.-30     	; 0x1cf2 <__divsf3_pse+0x94>
    1d10:	e0 95       	com	r30
    1d12:	08 95       	ret

00001d14 <__fixsfsi>:
    1d14:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fixunssfsi>
    1d18:	68 94       	set
    1d1a:	b1 11       	cpse	r27, r1
    1d1c:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_szero>
    1d20:	08 95       	ret

00001d22 <__fixunssfsi>:
    1d22:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_splitA>
    1d26:	88 f0       	brcs	.+34     	; 0x1d4a <__fixunssfsi+0x28>
    1d28:	9f 57       	subi	r25, 0x7F	; 127
    1d2a:	98 f0       	brcs	.+38     	; 0x1d52 <__fixunssfsi+0x30>
    1d2c:	b9 2f       	mov	r27, r25
    1d2e:	99 27       	eor	r25, r25
    1d30:	b7 51       	subi	r27, 0x17	; 23
    1d32:	b0 f0       	brcs	.+44     	; 0x1d60 <__fixunssfsi+0x3e>
    1d34:	e1 f0       	breq	.+56     	; 0x1d6e <__fixunssfsi+0x4c>
    1d36:	66 0f       	add	r22, r22
    1d38:	77 1f       	adc	r23, r23
    1d3a:	88 1f       	adc	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	1a f0       	brmi	.+6      	; 0x1d46 <__fixunssfsi+0x24>
    1d40:	ba 95       	dec	r27
    1d42:	c9 f7       	brne	.-14     	; 0x1d36 <__fixunssfsi+0x14>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <__fixunssfsi+0x4c>
    1d46:	b1 30       	cpi	r27, 0x01	; 1
    1d48:	91 f0       	breq	.+36     	; 0x1d6e <__fixunssfsi+0x4c>
    1d4a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fp_zero>
    1d4e:	b1 e0       	ldi	r27, 0x01	; 1
    1d50:	08 95       	ret
    1d52:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__fp_zero>
    1d56:	67 2f       	mov	r22, r23
    1d58:	78 2f       	mov	r23, r24
    1d5a:	88 27       	eor	r24, r24
    1d5c:	b8 5f       	subi	r27, 0xF8	; 248
    1d5e:	39 f0       	breq	.+14     	; 0x1d6e <__fixunssfsi+0x4c>
    1d60:	b9 3f       	cpi	r27, 0xF9	; 249
    1d62:	cc f3       	brlt	.-14     	; 0x1d56 <__fixunssfsi+0x34>
    1d64:	86 95       	lsr	r24
    1d66:	77 95       	ror	r23
    1d68:	67 95       	ror	r22
    1d6a:	b3 95       	inc	r27
    1d6c:	d9 f7       	brne	.-10     	; 0x1d64 <__fixunssfsi+0x42>
    1d6e:	3e f4       	brtc	.+14     	; 0x1d7e <__fixunssfsi+0x5c>
    1d70:	90 95       	com	r25
    1d72:	80 95       	com	r24
    1d74:	70 95       	com	r23
    1d76:	61 95       	neg	r22
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	08 95       	ret

00001d80 <__floatunsisf>:
    1d80:	e8 94       	clt
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <__floatsisf+0x12>

00001d84 <__floatsisf>:
    1d84:	97 fb       	bst	r25, 7
    1d86:	3e f4       	brtc	.+14     	; 0x1d96 <__floatsisf+0x12>
    1d88:	90 95       	com	r25
    1d8a:	80 95       	com	r24
    1d8c:	70 95       	com	r23
    1d8e:	61 95       	neg	r22
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	8f 4f       	sbci	r24, 0xFF	; 255
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	99 23       	and	r25, r25
    1d98:	a9 f0       	breq	.+42     	; 0x1dc4 <__floatsisf+0x40>
    1d9a:	f9 2f       	mov	r31, r25
    1d9c:	96 e9       	ldi	r25, 0x96	; 150
    1d9e:	bb 27       	eor	r27, r27
    1da0:	93 95       	inc	r25
    1da2:	f6 95       	lsr	r31
    1da4:	87 95       	ror	r24
    1da6:	77 95       	ror	r23
    1da8:	67 95       	ror	r22
    1daa:	b7 95       	ror	r27
    1dac:	f1 11       	cpse	r31, r1
    1dae:	f8 cf       	rjmp	.-16     	; 0x1da0 <__floatsisf+0x1c>
    1db0:	fa f4       	brpl	.+62     	; 0x1df0 <__floatsisf+0x6c>
    1db2:	bb 0f       	add	r27, r27
    1db4:	11 f4       	brne	.+4      	; 0x1dba <__floatsisf+0x36>
    1db6:	60 ff       	sbrs	r22, 0
    1db8:	1b c0       	rjmp	.+54     	; 0x1df0 <__floatsisf+0x6c>
    1dba:	6f 5f       	subi	r22, 0xFF	; 255
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <__floatsisf+0x6c>
    1dc4:	88 23       	and	r24, r24
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <__floatsisf+0x48>
    1dc8:	96 e9       	ldi	r25, 0x96	; 150
    1dca:	11 c0       	rjmp	.+34     	; 0x1dee <__floatsisf+0x6a>
    1dcc:	77 23       	and	r23, r23
    1dce:	21 f0       	breq	.+8      	; 0x1dd8 <__floatsisf+0x54>
    1dd0:	9e e8       	ldi	r25, 0x8E	; 142
    1dd2:	87 2f       	mov	r24, r23
    1dd4:	76 2f       	mov	r23, r22
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <__floatsisf+0x5e>
    1dd8:	66 23       	and	r22, r22
    1dda:	71 f0       	breq	.+28     	; 0x1df8 <__floatsisf+0x74>
    1ddc:	96 e8       	ldi	r25, 0x86	; 134
    1dde:	86 2f       	mov	r24, r22
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	2a f0       	brmi	.+10     	; 0x1df0 <__floatsisf+0x6c>
    1de6:	9a 95       	dec	r25
    1de8:	66 0f       	add	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	da f7       	brpl	.-10     	; 0x1de6 <__floatsisf+0x62>
    1df0:	88 0f       	add	r24, r24
    1df2:	96 95       	lsr	r25
    1df4:	87 95       	ror	r24
    1df6:	97 f9       	bld	r25, 7
    1df8:	08 95       	ret

00001dfa <__fp_cmp>:
    1dfa:	99 0f       	add	r25, r25
    1dfc:	00 08       	sbc	r0, r0
    1dfe:	55 0f       	add	r21, r21
    1e00:	aa 0b       	sbc	r26, r26
    1e02:	e0 e8       	ldi	r30, 0x80	; 128
    1e04:	fe ef       	ldi	r31, 0xFE	; 254
    1e06:	16 16       	cp	r1, r22
    1e08:	17 06       	cpc	r1, r23
    1e0a:	e8 07       	cpc	r30, r24
    1e0c:	f9 07       	cpc	r31, r25
    1e0e:	c0 f0       	brcs	.+48     	; 0x1e40 <__fp_cmp+0x46>
    1e10:	12 16       	cp	r1, r18
    1e12:	13 06       	cpc	r1, r19
    1e14:	e4 07       	cpc	r30, r20
    1e16:	f5 07       	cpc	r31, r21
    1e18:	98 f0       	brcs	.+38     	; 0x1e40 <__fp_cmp+0x46>
    1e1a:	62 1b       	sub	r22, r18
    1e1c:	73 0b       	sbc	r23, r19
    1e1e:	84 0b       	sbc	r24, r20
    1e20:	95 0b       	sbc	r25, r21
    1e22:	39 f4       	brne	.+14     	; 0x1e32 <__fp_cmp+0x38>
    1e24:	0a 26       	eor	r0, r26
    1e26:	61 f0       	breq	.+24     	; 0x1e40 <__fp_cmp+0x46>
    1e28:	23 2b       	or	r18, r19
    1e2a:	24 2b       	or	r18, r20
    1e2c:	25 2b       	or	r18, r21
    1e2e:	21 f4       	brne	.+8      	; 0x1e38 <__fp_cmp+0x3e>
    1e30:	08 95       	ret
    1e32:	0a 26       	eor	r0, r26
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <__fp_cmp+0x3e>
    1e36:	a1 40       	sbci	r26, 0x01	; 1
    1e38:	a6 95       	lsr	r26
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	81 1d       	adc	r24, r1
    1e3e:	81 1d       	adc	r24, r1
    1e40:	08 95       	ret

00001e42 <__fp_inf>:
    1e42:	97 f9       	bld	r25, 7
    1e44:	9f 67       	ori	r25, 0x7F	; 127
    1e46:	80 e8       	ldi	r24, 0x80	; 128
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	08 95       	ret

00001e4e <__fp_mintl>:
    1e4e:	88 23       	and	r24, r24
    1e50:	71 f4       	brne	.+28     	; 0x1e6e <__fp_mintl+0x20>
    1e52:	77 23       	and	r23, r23
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <__fp_mintl+0x10>
    1e56:	98 50       	subi	r25, 0x08	; 8
    1e58:	87 2b       	or	r24, r23
    1e5a:	76 2f       	mov	r23, r22
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <__fp_mintl+0x1e>
    1e5e:	66 23       	and	r22, r22
    1e60:	11 f4       	brne	.+4      	; 0x1e66 <__fp_mintl+0x18>
    1e62:	99 27       	eor	r25, r25
    1e64:	0d c0       	rjmp	.+26     	; 0x1e80 <__fp_mintl+0x32>
    1e66:	90 51       	subi	r25, 0x10	; 16
    1e68:	86 2b       	or	r24, r22
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	2a f0       	brmi	.+10     	; 0x1e7a <__fp_mintl+0x2c>
    1e70:	9a 95       	dec	r25
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	88 1f       	adc	r24, r24
    1e78:	da f7       	brpl	.-10     	; 0x1e70 <__fp_mintl+0x22>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	96 95       	lsr	r25
    1e7e:	87 95       	ror	r24
    1e80:	97 f9       	bld	r25, 7
    1e82:	08 95       	ret

00001e84 <__fp_mpack>:
    1e84:	9f 3f       	cpi	r25, 0xFF	; 255
    1e86:	31 f0       	breq	.+12     	; 0x1e94 <__fp_mpack_finite+0xc>

00001e88 <__fp_mpack_finite>:
    1e88:	91 50       	subi	r25, 0x01	; 1
    1e8a:	20 f4       	brcc	.+8      	; 0x1e94 <__fp_mpack_finite+0xc>
    1e8c:	87 95       	ror	r24
    1e8e:	77 95       	ror	r23
    1e90:	67 95       	ror	r22
    1e92:	b7 95       	ror	r27
    1e94:	88 0f       	add	r24, r24
    1e96:	91 1d       	adc	r25, r1
    1e98:	96 95       	lsr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	97 f9       	bld	r25, 7
    1e9e:	08 95       	ret

00001ea0 <__fp_nan>:
    1ea0:	9f ef       	ldi	r25, 0xFF	; 255
    1ea2:	80 ec       	ldi	r24, 0xC0	; 192
    1ea4:	08 95       	ret

00001ea6 <__fp_pscA>:
    1ea6:	00 24       	eor	r0, r0
    1ea8:	0a 94       	dec	r0
    1eaa:	16 16       	cp	r1, r22
    1eac:	17 06       	cpc	r1, r23
    1eae:	18 06       	cpc	r1, r24
    1eb0:	09 06       	cpc	r0, r25
    1eb2:	08 95       	ret

00001eb4 <__fp_pscB>:
    1eb4:	00 24       	eor	r0, r0
    1eb6:	0a 94       	dec	r0
    1eb8:	12 16       	cp	r1, r18
    1eba:	13 06       	cpc	r1, r19
    1ebc:	14 06       	cpc	r1, r20
    1ebe:	05 06       	cpc	r0, r21
    1ec0:	08 95       	ret

00001ec2 <__fp_round>:
    1ec2:	09 2e       	mov	r0, r25
    1ec4:	03 94       	inc	r0
    1ec6:	00 0c       	add	r0, r0
    1ec8:	11 f4       	brne	.+4      	; 0x1ece <__fp_round+0xc>
    1eca:	88 23       	and	r24, r24
    1ecc:	52 f0       	brmi	.+20     	; 0x1ee2 <__fp_round+0x20>
    1ece:	bb 0f       	add	r27, r27
    1ed0:	40 f4       	brcc	.+16     	; 0x1ee2 <__fp_round+0x20>
    1ed2:	bf 2b       	or	r27, r31
    1ed4:	11 f4       	brne	.+4      	; 0x1eda <__fp_round+0x18>
    1ed6:	60 ff       	sbrs	r22, 0
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <__fp_round+0x20>
    1eda:	6f 5f       	subi	r22, 0xFF	; 255
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	08 95       	ret

00001ee4 <__fp_split3>:
    1ee4:	57 fd       	sbrc	r21, 7
    1ee6:	90 58       	subi	r25, 0x80	; 128
    1ee8:	44 0f       	add	r20, r20
    1eea:	55 1f       	adc	r21, r21
    1eec:	59 f0       	breq	.+22     	; 0x1f04 <__fp_splitA+0x10>
    1eee:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef0:	71 f0       	breq	.+28     	; 0x1f0e <__fp_splitA+0x1a>
    1ef2:	47 95       	ror	r20

00001ef4 <__fp_splitA>:
    1ef4:	88 0f       	add	r24, r24
    1ef6:	97 fb       	bst	r25, 7
    1ef8:	99 1f       	adc	r25, r25
    1efa:	61 f0       	breq	.+24     	; 0x1f14 <__fp_splitA+0x20>
    1efc:	9f 3f       	cpi	r25, 0xFF	; 255
    1efe:	79 f0       	breq	.+30     	; 0x1f1e <__fp_splitA+0x2a>
    1f00:	87 95       	ror	r24
    1f02:	08 95       	ret
    1f04:	12 16       	cp	r1, r18
    1f06:	13 06       	cpc	r1, r19
    1f08:	14 06       	cpc	r1, r20
    1f0a:	55 1f       	adc	r21, r21
    1f0c:	f2 cf       	rjmp	.-28     	; 0x1ef2 <__fp_split3+0xe>
    1f0e:	46 95       	lsr	r20
    1f10:	f1 df       	rcall	.-30     	; 0x1ef4 <__fp_splitA>
    1f12:	08 c0       	rjmp	.+16     	; 0x1f24 <__fp_splitA+0x30>
    1f14:	16 16       	cp	r1, r22
    1f16:	17 06       	cpc	r1, r23
    1f18:	18 06       	cpc	r1, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	f1 cf       	rjmp	.-30     	; 0x1f00 <__fp_splitA+0xc>
    1f1e:	86 95       	lsr	r24
    1f20:	71 05       	cpc	r23, r1
    1f22:	61 05       	cpc	r22, r1
    1f24:	08 94       	sec
    1f26:	08 95       	ret

00001f28 <__fp_trunc>:
    1f28:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_splitA>
    1f2c:	a0 f0       	brcs	.+40     	; 0x1f56 <__fp_trunc+0x2e>
    1f2e:	be e7       	ldi	r27, 0x7E	; 126
    1f30:	b9 17       	cp	r27, r25
    1f32:	88 f4       	brcc	.+34     	; 0x1f56 <__fp_trunc+0x2e>
    1f34:	bb 27       	eor	r27, r27
    1f36:	9f 38       	cpi	r25, 0x8F	; 143
    1f38:	60 f4       	brcc	.+24     	; 0x1f52 <__fp_trunc+0x2a>
    1f3a:	16 16       	cp	r1, r22
    1f3c:	b1 1d       	adc	r27, r1
    1f3e:	67 2f       	mov	r22, r23
    1f40:	78 2f       	mov	r23, r24
    1f42:	88 27       	eor	r24, r24
    1f44:	98 5f       	subi	r25, 0xF8	; 248
    1f46:	f7 cf       	rjmp	.-18     	; 0x1f36 <__fp_trunc+0xe>
    1f48:	86 95       	lsr	r24
    1f4a:	77 95       	ror	r23
    1f4c:	67 95       	ror	r22
    1f4e:	b1 1d       	adc	r27, r1
    1f50:	93 95       	inc	r25
    1f52:	96 39       	cpi	r25, 0x96	; 150
    1f54:	c8 f3       	brcs	.-14     	; 0x1f48 <__fp_trunc+0x20>
    1f56:	08 95       	ret

00001f58 <__fp_zero>:
    1f58:	e8 94       	clt

00001f5a <__fp_szero>:
    1f5a:	bb 27       	eor	r27, r27
    1f5c:	66 27       	eor	r22, r22
    1f5e:	77 27       	eor	r23, r23
    1f60:	cb 01       	movw	r24, r22
    1f62:	97 f9       	bld	r25, 7
    1f64:	08 95       	ret

00001f66 <__gesf2>:
    1f66:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__fp_cmp>
    1f6a:	08 f4       	brcc	.+2      	; 0x1f6e <__gesf2+0x8>
    1f6c:	8f ef       	ldi	r24, 0xFF	; 255
    1f6e:	08 95       	ret

00001f70 <__mulsf3>:
    1f70:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3x>
    1f74:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__fp_round>
    1f78:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__fp_pscA>
    1f7c:	38 f0       	brcs	.+14     	; 0x1f8c <__mulsf3+0x1c>
    1f7e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fp_pscB>
    1f82:	20 f0       	brcs	.+8      	; 0x1f8c <__mulsf3+0x1c>
    1f84:	95 23       	and	r25, r21
    1f86:	11 f0       	breq	.+4      	; 0x1f8c <__mulsf3+0x1c>
    1f88:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_inf>
    1f8c:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__fp_nan>
    1f90:	11 24       	eor	r1, r1
    1f92:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_szero>

00001f96 <__mulsf3x>:
    1f96:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__fp_split3>
    1f9a:	70 f3       	brcs	.-36     	; 0x1f78 <__mulsf3+0x8>

00001f9c <__mulsf3_pse>:
    1f9c:	95 9f       	mul	r25, r21
    1f9e:	c1 f3       	breq	.-16     	; 0x1f90 <__mulsf3+0x20>
    1fa0:	95 0f       	add	r25, r21
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	55 1f       	adc	r21, r21
    1fa6:	62 9f       	mul	r22, r18
    1fa8:	f0 01       	movw	r30, r0
    1faa:	72 9f       	mul	r23, r18
    1fac:	bb 27       	eor	r27, r27
    1fae:	f0 0d       	add	r31, r0
    1fb0:	b1 1d       	adc	r27, r1
    1fb2:	63 9f       	mul	r22, r19
    1fb4:	aa 27       	eor	r26, r26
    1fb6:	f0 0d       	add	r31, r0
    1fb8:	b1 1d       	adc	r27, r1
    1fba:	aa 1f       	adc	r26, r26
    1fbc:	64 9f       	mul	r22, r20
    1fbe:	66 27       	eor	r22, r22
    1fc0:	b0 0d       	add	r27, r0
    1fc2:	a1 1d       	adc	r26, r1
    1fc4:	66 1f       	adc	r22, r22
    1fc6:	82 9f       	mul	r24, r18
    1fc8:	22 27       	eor	r18, r18
    1fca:	b0 0d       	add	r27, r0
    1fcc:	a1 1d       	adc	r26, r1
    1fce:	62 1f       	adc	r22, r18
    1fd0:	73 9f       	mul	r23, r19
    1fd2:	b0 0d       	add	r27, r0
    1fd4:	a1 1d       	adc	r26, r1
    1fd6:	62 1f       	adc	r22, r18
    1fd8:	83 9f       	mul	r24, r19
    1fda:	a0 0d       	add	r26, r0
    1fdc:	61 1d       	adc	r22, r1
    1fde:	22 1f       	adc	r18, r18
    1fe0:	74 9f       	mul	r23, r20
    1fe2:	33 27       	eor	r19, r19
    1fe4:	a0 0d       	add	r26, r0
    1fe6:	61 1d       	adc	r22, r1
    1fe8:	23 1f       	adc	r18, r19
    1fea:	84 9f       	mul	r24, r20
    1fec:	60 0d       	add	r22, r0
    1fee:	21 1d       	adc	r18, r1
    1ff0:	82 2f       	mov	r24, r18
    1ff2:	76 2f       	mov	r23, r22
    1ff4:	6a 2f       	mov	r22, r26
    1ff6:	11 24       	eor	r1, r1
    1ff8:	9f 57       	subi	r25, 0x7F	; 127
    1ffa:	50 40       	sbci	r21, 0x00	; 0
    1ffc:	9a f0       	brmi	.+38     	; 0x2024 <__mulsf3_pse+0x88>
    1ffe:	f1 f0       	breq	.+60     	; 0x203c <__mulsf3_pse+0xa0>
    2000:	88 23       	and	r24, r24
    2002:	4a f0       	brmi	.+18     	; 0x2016 <__mulsf3_pse+0x7a>
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	bb 1f       	adc	r27, r27
    200a:	66 1f       	adc	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	91 50       	subi	r25, 0x01	; 1
    2012:	50 40       	sbci	r21, 0x00	; 0
    2014:	a9 f7       	brne	.-22     	; 0x2000 <__mulsf3_pse+0x64>
    2016:	9e 3f       	cpi	r25, 0xFE	; 254
    2018:	51 05       	cpc	r21, r1
    201a:	80 f0       	brcs	.+32     	; 0x203c <__mulsf3_pse+0xa0>
    201c:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_inf>
    2020:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_szero>
    2024:	5f 3f       	cpi	r21, 0xFF	; 255
    2026:	e4 f3       	brlt	.-8      	; 0x2020 <__mulsf3_pse+0x84>
    2028:	98 3e       	cpi	r25, 0xE8	; 232
    202a:	d4 f3       	brlt	.-12     	; 0x2020 <__mulsf3_pse+0x84>
    202c:	86 95       	lsr	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b7 95       	ror	r27
    2034:	f7 95       	ror	r31
    2036:	e7 95       	ror	r30
    2038:	9f 5f       	subi	r25, 0xFF	; 255
    203a:	c1 f7       	brne	.-16     	; 0x202c <__mulsf3_pse+0x90>
    203c:	fe 2b       	or	r31, r30
    203e:	88 0f       	add	r24, r24
    2040:	91 1d       	adc	r25, r1
    2042:	96 95       	lsr	r25
    2044:	87 95       	ror	r24
    2046:	97 f9       	bld	r25, 7
    2048:	08 95       	ret

0000204a <__divmodhi4>:
    204a:	97 fb       	bst	r25, 7
    204c:	07 2e       	mov	r0, r23
    204e:	16 f4       	brtc	.+4      	; 0x2054 <__divmodhi4+0xa>
    2050:	00 94       	com	r0
    2052:	07 d0       	rcall	.+14     	; 0x2062 <__divmodhi4_neg1>
    2054:	77 fd       	sbrc	r23, 7
    2056:	09 d0       	rcall	.+18     	; 0x206a <__divmodhi4_neg2>
    2058:	0e 94 3f 10 	call	0x207e	; 0x207e <__udivmodhi4>
    205c:	07 fc       	sbrc	r0, 7
    205e:	05 d0       	rcall	.+10     	; 0x206a <__divmodhi4_neg2>
    2060:	3e f4       	brtc	.+14     	; 0x2070 <__divmodhi4_exit>

00002062 <__divmodhi4_neg1>:
    2062:	90 95       	com	r25
    2064:	81 95       	neg	r24
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	08 95       	ret

0000206a <__divmodhi4_neg2>:
    206a:	70 95       	com	r23
    206c:	61 95       	neg	r22
    206e:	7f 4f       	sbci	r23, 0xFF	; 255

00002070 <__divmodhi4_exit>:
    2070:	08 95       	ret

00002072 <__tablejump2__>:
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	05 90       	lpm	r0, Z+
    2078:	f4 91       	lpm	r31, Z
    207a:	e0 2d       	mov	r30, r0
    207c:	09 94       	ijmp

0000207e <__udivmodhi4>:
    207e:	aa 1b       	sub	r26, r26
    2080:	bb 1b       	sub	r27, r27
    2082:	51 e1       	ldi	r21, 0x11	; 17
    2084:	07 c0       	rjmp	.+14     	; 0x2094 <__udivmodhi4_ep>

00002086 <__udivmodhi4_loop>:
    2086:	aa 1f       	adc	r26, r26
    2088:	bb 1f       	adc	r27, r27
    208a:	a6 17       	cp	r26, r22
    208c:	b7 07       	cpc	r27, r23
    208e:	10 f0       	brcs	.+4      	; 0x2094 <__udivmodhi4_ep>
    2090:	a6 1b       	sub	r26, r22
    2092:	b7 0b       	sbc	r27, r23

00002094 <__udivmodhi4_ep>:
    2094:	88 1f       	adc	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	5a 95       	dec	r21
    209a:	a9 f7       	brne	.-22     	; 0x2086 <__udivmodhi4_loop>
    209c:	80 95       	com	r24
    209e:	90 95       	com	r25
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	08 95       	ret

000020a6 <_exit>:
    20a6:	f8 94       	cli

000020a8 <__stop_program>:
    20a8:	ff cf       	rjmp	.-2      	; 0x20a8 <__stop_program>
