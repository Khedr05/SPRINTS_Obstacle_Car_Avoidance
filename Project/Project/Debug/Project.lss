
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00001e00  00001e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008000f0  008000f0  00001f24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003db5  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015cf  00000000  00000000  000060ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002302  00000000  00000000  0000767c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00009980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000143d  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e97  00000000  00000000  0000b4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000d338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 04 	call	0x838	; 0x838 <main>
      8a:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
extern float64_t obstcaleDistance;
extern Uchar8_t moreThan70Flag;

void app_init()
{
	HLCD_vidInit();
      92:	0e 94 0d 03 	call	0x61a	; 0x61a <HLCD_vidInit>
	PUSH_BTN_intialize();
      96:	0e 94 9c 01 	call	0x338	; 0x338 <PUSH_BTN_intialize>
	TIMER_TMR2NormalModeInit(ENABLED);
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TIMER_TMR2NormalModeInit>
	ultrasonic_vInit();
      a0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <ultrasonic_vInit>
      a4:	08 95       	ret

000000a6 <app_main>:
}

void app_main()
{
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
	switch(state)
      ae:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <state>
      b2:	81 30       	cpi	r24, 0x01	; 1
      b4:	71 f0       	breq	.+28     	; 0xd2 <app_main+0x2c>
      b6:	38 f0       	brcs	.+14     	; 0xc6 <app_main+0x20>
      b8:	82 30       	cpi	r24, 0x02	; 2
      ba:	09 f4       	brne	.+2      	; 0xbe <app_main+0x18>
      bc:	81 c0       	rjmp	.+258    	; 0x1c0 <app_main+0x11a>
      be:	83 30       	cpi	r24, 0x03	; 3
      c0:	09 f4       	brne	.+2      	; 0xc4 <app_main+0x1e>
      c2:	84 c0       	rjmp	.+264    	; 0x1cc <app_main+0x126>
      c4:	85 c0       	rjmp	.+266    	; 0x1d0 <app_main+0x12a>
	{
		case SET_DEFAULT_ROTATION :
		{
			setDefaultRotation();
      c6:	0e 94 ed 00 	call	0x1da	; 0x1da <setDefaultRotation>
			state = CAR_SCANING;
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <state>
			break;
      d0:	7f c0       	rjmp	.+254    	; 0x1d0 <app_main+0x12a>
		} 
		case CAR_SCANING :
		{
			ultrasonic_vGetDistance(&obstcaleDistance);
      d2:	81 ef       	ldi	r24, 0xF1	; 241
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ultrasonic_vGetDistance>
			HLCD_ClrDisplay();
      da:	0e 94 c0 03 	call	0x780	; 0x780 <HLCD_ClrDisplay>
			HLCD_WriteInt(obstcaleDistance);
      de:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <obstcaleDistance>
      e2:	70 91 f2 00 	lds	r23, 0x00F2	; 0x8000f2 <obstcaleDistance+0x1>
      e6:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <obstcaleDistance+0x2>
      ea:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <obstcaleDistance+0x3>
      ee:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
      f2:	cb 01       	movw	r24, r22
      f4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_WriteInt>
			if(obstcaleDistance > 70)
      f8:	c0 90 f1 00 	lds	r12, 0x00F1	; 0x8000f1 <obstcaleDistance>
      fc:	d0 90 f2 00 	lds	r13, 0x00F2	; 0x8000f2 <obstcaleDistance+0x1>
     100:	e0 90 f3 00 	lds	r14, 0x00F3	; 0x8000f3 <obstcaleDistance+0x2>
     104:	f0 90 f4 00 	lds	r15, 0x00F4	; 0x8000f4 <obstcaleDistance+0x3>
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	4c e8       	ldi	r20, 0x8C	; 140
     10e:	52 e4       	ldi	r21, 0x42	; 66
     110:	c7 01       	movw	r24, r14
     112:	b6 01       	movw	r22, r12
     114:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__gesf2>
     118:	18 16       	cp	r1, r24
     11a:	44 f4       	brge	.+16     	; 0x12c <app_main+0x86>
			{
				HLCD_WriteString("akatr 70");
     11c:	8d e8       	ldi	r24, 0x8D	; 141
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
				state = MORE_THAN_70_CM;
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <state>
     12a:	52 c0       	rjmp	.+164    	; 0x1d0 <app_main+0x12a>
			}
			else if(obstcaleDistance <= 70 && obstcaleDistance > 30)
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4c e8       	ldi	r20, 0x8C	; 140
     132:	52 e4       	ldi	r21, 0x42	; 66
     134:	c7 01       	movw	r24, r14
     136:	b6 01       	movw	r22, r12
     138:	0e 94 be 0c 	call	0x197c	; 0x197c <__cmpsf2>
     13c:	18 16       	cp	r1, r24
     13e:	74 f0       	brlt	.+28     	; 0x15c <app_main+0xb6>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	40 ef       	ldi	r20, 0xF0	; 240
     146:	51 e4       	ldi	r21, 0x41	; 65
     148:	c7 01       	movw	r24, r14
     14a:	b6 01       	movw	r22, r12
     14c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	24 f4       	brge	.+8      	; 0x15c <app_main+0xb6>
			{
				state = MORE_THAN_30_CM;
     154:	83 e0       	ldi	r24, 0x03	; 3
     156:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <state>
     15a:	3a c0       	rjmp	.+116    	; 0x1d0 <app_main+0x12a>
			}
			else if(obstcaleDistance <= 30 && obstcaleDistance > 20)
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 ef       	ldi	r20, 0xF0	; 240
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	c7 01       	movw	r24, r14
     166:	b6 01       	movw	r22, r12
     168:	0e 94 be 0c 	call	0x197c	; 0x197c <__cmpsf2>
     16c:	18 16       	cp	r1, r24
     16e:	74 f0       	brlt	.+28     	; 0x18c <app_main+0xe6>
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	40 ea       	ldi	r20, 0xA0	; 160
     176:	51 e4       	ldi	r21, 0x41	; 65
     178:	c7 01       	movw	r24, r14
     17a:	b6 01       	movw	r22, r12
     17c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__gesf2>
     180:	18 16       	cp	r1, r24
     182:	24 f4       	brge	.+8      	; 0x18c <app_main+0xe6>
			{
				state = MORE_THAN_20_CM;
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <state>
     18a:	22 c0       	rjmp	.+68     	; 0x1d0 <app_main+0x12a>
			}
			else if(obstcaleDistance < 20)
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 ea       	ldi	r20, 0xA0	; 160
     192:	51 e4       	ldi	r21, 0x41	; 65
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 be 0c 	call	0x197c	; 0x197c <__cmpsf2>
     19c:	88 23       	and	r24, r24
     19e:	44 f4       	brge	.+16     	; 0x1b0 <app_main+0x10a>
			{
				HLCD_WriteString("less 20");
     1a0:	86 e9       	ldi	r24, 0x96	; 150
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
				state = LESS_THAN_20_CM;
     1a8:	85 e0       	ldi	r24, 0x05	; 5
     1aa:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <state>
     1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <app_main+0x12a>
			}
			else
			{
				HLCD_WriteInt(obstcaleDistance);
     1b0:	c7 01       	movw	r24, r14
     1b2:	b6 01       	movw	r22, r12
     1b4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
     1b8:	cb 01       	movw	r24, r22
     1ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_WriteInt>
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <app_main+0x12a>
			}
			break;
		}
		case MORE_THAN_70_CM :
		{
			obstcaleMoreThan70();
     1c0:	0e 94 48 01 	call	0x290	; 0x290 <obstcaleMoreThan70>
			state = CAR_SCANING;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <state>
			break;
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <app_main+0x12a>
		}
		case MORE_THAN_30_CM:
		{
			moreThan70Flag = 0;
     1cc:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__data_end>
			break;
		}
	}
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	08 95       	ret

000001da <setDefaultRotation>:


void setDefaultRotation()
{
	
	HLCD_gotoXY(0,0);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
	HLCD_WriteString("Set Def. Rot.");
     1e2:	8e e9       	ldi	r24, 0x9E	; 158
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
	HLCD_gotoXY(1,0);
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
	HLCD_WriteString("Right");
     1f2:	8c ea       	ldi	r24, 0xAC	; 172
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
	TMR_intDelay_ms(5000);
     1fa:	88 e8       	ldi	r24, 0x88	; 136
     1fc:	93 e1       	ldi	r25, 0x13	; 19
     1fe:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <TMR_intDelay_ms>
	while(u8_g_timeOut != 1)
     202:	35 c0       	rjmp	.+106    	; 0x26e <setDefaultRotation+0x94>
	{
		PUSH_BTN_read_state(0,&rotationBtnState);
     204:	65 ef       	ldi	r22, 0xF5	; 245
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0e 94 9f 01 	call	0x33e	; 0x33e <PUSH_BTN_read_state>
		if(rotationBtnState == PUSH_BTN_STATE_RELEASED)
     20e:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <rotationBtnState>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	61 f5       	brne	.+88     	; 0x26e <setDefaultRotation+0x94>
     216:	05 c0       	rjmp	.+10     	; 0x222 <setDefaultRotation+0x48>
		{
			while(rotationBtnState == PUSH_BTN_STATE_RELEASED)
			{
				PUSH_BTN_read_state(0,&rotationBtnState);
     218:	65 ef       	ldi	r22, 0xF5	; 245
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 9f 01 	call	0x33e	; 0x33e <PUSH_BTN_read_state>
	while(u8_g_timeOut != 1)
	{
		PUSH_BTN_read_state(0,&rotationBtnState);
		if(rotationBtnState == PUSH_BTN_STATE_RELEASED)
		{
			while(rotationBtnState == PUSH_BTN_STATE_RELEASED)
     222:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <rotationBtnState>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	b9 f3       	breq	.-18     	; 0x218 <setDefaultRotation+0x3e>
			{
				PUSH_BTN_read_state(0,&rotationBtnState);
			}
			if(rotationFlag == 0)
     22a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rotationFlag>
     22e:	81 11       	cpse	r24, r1
     230:	0f c0       	rjmp	.+30     	; 0x250 <setDefaultRotation+0x76>
			{
				rotationFlag = 1;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <rotationFlag>
				rotation = DIRECTION_L;
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				HLCD_gotoXY(1,0);
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
				HLCD_WriteString("Left ");
     246:	82 eb       	ldi	r24, 0xB2	; 178
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
     24e:	0f c0       	rjmp	.+30     	; 0x26e <setDefaultRotation+0x94>
				
			}
			else if(rotationFlag == 1)
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	69 f4       	brne	.+26     	; 0x26e <setDefaultRotation+0x94>
			{
				rotationFlag = 0;
     254:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <rotationFlag>
				rotation = DIRECTION_R;
     258:	83 e0       	ldi	r24, 0x03	; 3
     25a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				HLCD_gotoXY(1,0);
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
				HLCD_WriteString("Right ");
     266:	88 eb       	ldi	r24, 0xB8	; 184
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
	HLCD_gotoXY(0,0);
	HLCD_WriteString("Set Def. Rot.");
	HLCD_gotoXY(1,0);
	HLCD_WriteString("Right");
	TMR_intDelay_ms(5000);
	while(u8_g_timeOut != 1)
     26e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <u8_g_timeOut>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	39 f6       	brne	.-114    	; 0x204 <setDefaultRotation+0x2a>
				HLCD_gotoXY(1,0);
				HLCD_WriteString("Right ");
			}
		}
	}
	u8_g_timeOut = 0;
     276:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <u8_g_timeOut>
	TMR_intDelay_ms(2000);
     27a:	80 ed       	ldi	r24, 0xD0	; 208
     27c:	97 e0       	ldi	r25, 0x07	; 7
     27e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <TMR_intDelay_ms>
	while(u8_g_timeOut !=1);
     282:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <u8_g_timeOut>
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	e1 f7       	brne	.-8      	; 0x282 <setDefaultRotation+0xa8>
	u8_g_timeOut = 0;
     28a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <u8_g_timeOut>
     28e:	08 95       	ret

00000290 <obstcaleMoreThan70>:



void obstcaleMoreThan70()
{
	HLCD_ClrDisplay();
     290:	0e 94 c0 03 	call	0x780	; 0x780 <HLCD_ClrDisplay>
	HLCD_gotoXY(0,0);
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
	HLCD_WriteString("Speed:");
     29c:	8f eb       	ldi	r24, 0xBF	; 191
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
	HLCD_gotoXY(0,10);
     2a4:	6a e0       	ldi	r22, 0x0A	; 10
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
	HLCD_WriteString("Dir:F");
     2ac:	86 ec       	ldi	r24, 0xC6	; 198
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
	HLCD_gotoXY(1,0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
	HLCD_WriteString("Dist:");
     2bc:	8c ec       	ldi	r24, 0xCC	; 204
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
	HLCD_gotoXY(1,5);
     2c4:	65 e0       	ldi	r22, 0x05	; 5
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
	HLCD_WriteInt(obstcaleDistance);
     2cc:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <obstcaleDistance>
     2d0:	70 91 f2 00 	lds	r23, 0x00F2	; 0x8000f2 <obstcaleDistance+0x1>
     2d4:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <obstcaleDistance+0x2>
     2d8:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <obstcaleDistance+0x3>
     2dc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
     2e0:	cb 01       	movw	r24, r22
     2e2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_WriteInt>
	HLCD_WriteString(" Cm");
     2e6:	82 ed       	ldi	r24, 0xD2	; 210
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
	if(moreThan70Flag == 0)
     2ee:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__data_end>
     2f2:	81 11       	cpse	r24, r1
     2f4:	10 c0       	rjmp	.+32     	; 0x316 <obstcaleMoreThan70+0x86>
	{
		moreThan70Flag = 1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__data_end>
		//start motor 30;
		HLCD_gotoXY(0,7);
     2fc:	67 e0       	ldi	r22, 0x07	; 7
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
		HLCD_WriteString("30%");
     304:	86 ed       	ldi	r24, 0xD6	; 214
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
		TMR_intDelay_ms(5000);
     30c:	88 e8       	ldi	r24, 0x88	; 136
     30e:	93 e1       	ldi	r25, 0x13	; 19
     310:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <TMR_intDelay_ms>
     314:	08 95       	ret
	}
	else if(moreThan70Flag == 1 && u8_g_timeOut == 1)
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	71 f4       	brne	.+28     	; 0x336 <obstcaleMoreThan70+0xa6>
     31a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <u8_g_timeOut>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	51 f4       	brne	.+20     	; 0x336 <obstcaleMoreThan70+0xa6>
	{
		//motor 50
		HLCD_gotoXY(0,7);
     322:	67 e0       	ldi	r22, 0x07	; 7
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HLCD_gotoXY>
		HLCD_WriteString("50%");
     32a:	8a ed       	ldi	r24, 0xDA	; 218
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
		u8_g_timeOut = 0;
     332:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <u8_g_timeOut>
     336:	08 95       	ret

00000338 <PUSH_BTN_intialize>:

extern const ST_PUSH_BTN_t A_pbConfig[NUMBER_OF_PUSH_BUTTONS];

void PUSH_BTN_intialize()
{
	DIO_Init(); 
     338:	0e 94 21 04 	call	0x842	; 0x842 <DIO_Init>
     33c:	08 95       	ret

0000033e <PUSH_BTN_read_state>:
}

void PUSH_BTN_read_state(Uchar8_t btnNumber, EN_PUSH_BTN_state_t *btn_state)
{
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	1f 92       	push	r1
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	7b 01       	movw	r14, r22

		en_dio_value_t pin_logic_status = DIO_LOW;
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	99 83       	std	Y+1, r25	; 0x01
		DIO_read(A_pbConfig[btnNumber].PUSH_BTN_pin.dio_port,A_pbConfig[btnNumber].PUSH_BTN_pin.dio_pin,&pin_logic_status);
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	8c 01       	movw	r16, r24
     35a:	00 0f       	add	r16, r16
     35c:	11 1f       	adc	r17, r17
     35e:	00 0f       	add	r16, r16
     360:	11 1f       	adc	r17, r17
     362:	00 0f       	add	r16, r16
     364:	11 1f       	adc	r17, r17
     366:	08 1b       	sub	r16, r24
     368:	19 0b       	sbc	r17, r25
     36a:	02 52       	subi	r16, 0x22	; 34
     36c:	1f 4f       	sbci	r17, 0xFF	; 255
     36e:	ae 01       	movw	r20, r28
     370:	4f 5f       	subi	r20, 0xFF	; 255
     372:	5f 4f       	sbci	r21, 0xFF	; 255
     374:	f8 01       	movw	r30, r16
     376:	61 81       	ldd	r22, Z+1	; 0x01
     378:	80 81       	ld	r24, Z
     37a:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_read>
		
		if(PUSH_BTN_PULL_UP == A_pbConfig[btnNumber].PUSH_BTN_connection)
     37e:	f8 01       	movw	r30, r16
     380:	86 81       	ldd	r24, Z+6	; 0x06
     382:	81 11       	cpse	r24, r1
     384:	0a c0       	rjmp	.+20     	; 0x39a <PUSH_BTN_read_state+0x5c>
		{
			if(DIO_HIGH == pin_logic_status)
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	81 11       	cpse	r24, r1
     38a:	04 c0       	rjmp	.+8      	; 0x394 <PUSH_BTN_read_state+0x56>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	f7 01       	movw	r30, r14
     390:	80 83       	st	Z, r24
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     394:	f7 01       	movw	r30, r14
     396:	10 82       	st	Z, r1
     398:	0b c0       	rjmp	.+22     	; 0x3b0 <PUSH_BTN_read_state+0x72>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == A_pbConfig[btnNumber].PUSH_BTN_connection)
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	49 f4       	brne	.+18     	; 0x3b0 <PUSH_BTN_read_state+0x72>
		{
			if(DIO_HIGH == pin_logic_status)
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	81 11       	cpse	r24, r1
     3a2:	03 c0       	rjmp	.+6      	; 0x3aa <PUSH_BTN_read_state+0x6c>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     3a4:	f7 01       	movw	r30, r14
     3a6:	10 82       	st	Z, r1
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	f7 01       	movw	r30, r14
     3ae:	80 83       	st	Z, r24
			}
		}
}
     3b0:	0f 90       	pop	r0
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	08 95       	ret

000003c0 <ultrasonic_vInit>:
};

void ultrasonic_vInit()
{
	
	DIO_Initpin(&(ultra.echopin));
     3c0:	86 e6       	ldi	r24, 0x66	; 102
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_Initpin>
	DIO_Initpin(&(ultra.triggerpin));
     3c8:	81 e6       	ldi	r24, 0x61	; 97
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_Initpin>
	MCU_vEnableInterrupt();
     3d0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <MCU_vEnableInterrupt>
     3d4:	08 95       	ret

000003d6 <ultrasonic_vGetDistance>:
}

void ultrasonic_vGetDistance(float64_t *Copy_f64distance)
{
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <ultrasonic_vGetDistance+0xa>
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	8c 01       	movw	r16, r24
	Uint32_t val = 0;
     3e6:	1a 82       	std	Y+2, r1	; 0x02
     3e8:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(DIO_PORTD,DIO_PIN1,DIO_HIGH);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f4:	83 ec       	ldi	r24, 0xC3	; 195
     3f6:	99 e0       	ldi	r25, 0x09	; 9
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <ultrasonic_vGetDistance+0x22>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <ultrasonic_vGetDistance+0x28>
     3fe:	00 00       	nop
	_delay_ms(10);
	DIO_WritePin(DIO_PORTD,DIO_PIN1,DIO_LOW);
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_WritePin>
	ICU_RisingEdgeCapture();
     40a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <ICU_RisingEdgeCapture>

	
	while(ICU_g_flag != 1);
     40e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <ICU_g_flag>
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	ICU_getValue(&val);
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <ICU_getValue>
	
	*Copy_f64distance = val / 466.47;	
     41e:	69 81       	ldd	r22, Y+1	; 0x01
     420:	7a 81       	ldd	r23, Y+2	; 0x02
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__floatunsisf>
     42a:	29 e2       	ldi	r18, 0x29	; 41
     42c:	3c e3       	ldi	r19, 0x3C	; 60
     42e:	49 ee       	ldi	r20, 0xE9	; 233
     430:	53 e4       	ldi	r21, 0x43	; 67
     432:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divsf3>
     436:	f8 01       	movw	r30, r16
     438:	60 83       	st	Z, r22
     43a:	71 83       	std	Z+1, r23	; 0x01
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	93 83       	std	Z+3, r25	; 0x03
	ICU_g_flag = 0;
     440:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <ICU_g_flag>
}
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <DIO_s8SETPinDir>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
     452:	80 32       	cpi	r24, 0x20	; 32
     454:	c0 f5       	brcc	.+112    	; 0x4c6 <DIO_s8SETPinDir+0x74>
     456:	62 30       	cpi	r22, 0x02	; 2
     458:	c0 f5       	brcc	.+112    	; 0x4ca <DIO_s8SETPinDir+0x78>
	{
		portID = enPinCopy/8;
     45a:	e8 2f       	mov	r30, r24
     45c:	e6 95       	lsr	r30
     45e:	e6 95       	lsr	r30
     460:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
     462:	87 70       	andi	r24, 0x07	; 7

		if (enPortDir == INPUT)
     464:	61 11       	cpse	r22, r1
     466:	17 c0       	rjmp	.+46     	; 0x496 <DIO_s8SETPinDir+0x44>
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e5 59       	subi	r30, 0x95	; 149
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	01 90       	ld	r0, Z+
     474:	f0 81       	ld	r31, Z
     476:	e0 2d       	mov	r30, r0
     478:	40 81       	ld	r20, Z
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	b9 01       	movw	r22, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_s8SETPinDir+0x34>
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	8a 95       	dec	r24
     488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_s8SETPinDir+0x30>
     48a:	cb 01       	movw	r24, r22
     48c:	80 95       	com	r24
     48e:	84 23       	and	r24, r20
     490:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret

		if (enPortDir == INPUT)
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
		}
		else if(enPortDir == OUTPUT)
     496:	61 30       	cpi	r22, 0x01	; 1
     498:	d1 f4       	brne	.+52     	; 0x4ce <DIO_s8SETPinDir+0x7c>
		{
			SET_BIT(*ddrReg[portID],pinID);
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	e5 59       	subi	r30, 0x95	; 149
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	01 90       	ld	r0, Z+
     4a6:	f0 81       	ld	r31, Z
     4a8:	e0 2d       	mov	r30, r0
     4aa:	40 81       	ld	r20, Z
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	b9 01       	movw	r22, r18
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_s8SETPinDir+0x66>
     4b4:	66 0f       	add	r22, r22
     4b6:	77 1f       	adc	r23, r23
     4b8:	8a 95       	dec	r24
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_s8SETPinDir+0x62>
     4bc:	cb 01       	movw	r24, r22
     4be:	84 2b       	or	r24, r20
     4c0:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	08 95       	ret
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	08 95       	ret



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
     4d0:	08 95       	ret

000004d2 <DIO_s8SETPinVal>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
     4d2:	80 32       	cpi	r24, 0x20	; 32
     4d4:	c0 f5       	brcc	.+112    	; 0x546 <DIO_s8SETPinVal+0x74>
     4d6:	62 30       	cpi	r22, 0x02	; 2
     4d8:	c0 f5       	brcc	.+112    	; 0x54a <DIO_s8SETPinVal+0x78>
	{
		portID = enPinCopy/8;
     4da:	e8 2f       	mov	r30, r24
     4dc:	e6 95       	lsr	r30
     4de:	e6 95       	lsr	r30
     4e0:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
     4e2:	87 70       	andi	r24, 0x07	; 7

		if (enPortVal == LOW)
     4e4:	61 11       	cpse	r22, r1
     4e6:	17 c0       	rjmp	.+46     	; 0x516 <DIO_s8SETPinVal+0x44>
		{
			CLEAR_BIT(*portReg[portID],pinID);
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	ed 58       	subi	r30, 0x8D	; 141
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	01 90       	ld	r0, Z+
     4f4:	f0 81       	ld	r31, Z
     4f6:	e0 2d       	mov	r30, r0
     4f8:	40 81       	ld	r20, Z
     4fa:	21 e0       	ldi	r18, 0x01	; 1
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	b9 01       	movw	r22, r18
     500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_s8SETPinVal+0x34>
     502:	66 0f       	add	r22, r22
     504:	77 1f       	adc	r23, r23
     506:	8a 95       	dec	r24
     508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_s8SETPinVal+0x30>
     50a:	cb 01       	movw	r24, r22
     50c:	80 95       	com	r24
     50e:	84 23       	and	r24, r20
     510:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	08 95       	ret

		if (enPortVal == LOW)
		{
			CLEAR_BIT(*portReg[portID],pinID);
		}
		else if(enPortVal == HIGH)
     516:	61 30       	cpi	r22, 0x01	; 1
     518:	d1 f4       	brne	.+52     	; 0x54e <DIO_s8SETPinVal+0x7c>
		{
			SET_BIT(*portReg[portID],pinID);
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	ed 58       	subi	r30, 0x8D	; 141
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	01 90       	ld	r0, Z+
     526:	f0 81       	ld	r31, Z
     528:	e0 2d       	mov	r30, r0
     52a:	40 81       	ld	r20, Z
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	b9 01       	movw	r22, r18
     532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_s8SETPinVal+0x66>
     534:	66 0f       	add	r22, r22
     536:	77 1f       	adc	r23, r23
     538:	8a 95       	dec	r24
     53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_s8SETPinVal+0x62>
     53c:	cb 01       	movw	r24, r22
     53e:	84 2b       	or	r24, r20
     540:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	08 95       	ret
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	08 95       	ret
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
     54e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
     550:	08 95       	ret

00000552 <HLCD_vidWritecmd>:
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	d8 2f       	mov	r29, r24
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     56a:	1d 2f       	mov	r17, r29
     56c:	12 95       	swap	r17
     56e:	1f 70       	andi	r17, 0x0F	; 15
     570:	c0 e0       	ldi	r28, 0x00	; 0
     572:	11 c0       	rjmp	.+34     	; 0x596 <HLCD_vidWritecmd+0x44>
     574:	ec 2f       	mov	r30, r28
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	61 2f       	mov	r22, r17
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	0c 2e       	mov	r0, r28
     57e:	02 c0       	rjmp	.+4      	; 0x584 <HLCD_vidWritecmd+0x32>
     580:	75 95       	asr	r23
     582:	67 95       	ror	r22
     584:	0a 94       	dec	r0
     586:	e2 f7       	brpl	.-8      	; 0x580 <HLCD_vidWritecmd+0x2e>
     588:	61 70       	andi	r22, 0x01	; 1
     58a:	e5 58       	subi	r30, 0x85	; 133
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
     58e:	80 81       	ld	r24, Z
     590:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     594:	cf 5f       	subi	r28, 0xFF	; 255
     596:	c4 30       	cpi	r28, 0x04	; 4
     598:	68 f3       	brcs	.-38     	; 0x574 <HLCD_vidWritecmd+0x22>
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     5a2:	89 ef       	ldi	r24, 0xF9	; 249
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <HLCD_vidWritecmd+0x54>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <HLCD_vidWritecmd+0x5a>
     5ac:	00 00       	nop
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     5b6:	92 e4       	ldi	r25, 0x42	; 66
     5b8:	9a 95       	dec	r25
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <HLCD_vidWritecmd+0x66>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <HLCD_vidWritecmd+0x6c>
     5be:	df 70       	andi	r29, 0x0F	; 15
     5c0:	c0 e0       	ldi	r28, 0x00	; 0
     5c2:	11 c0       	rjmp	.+34     	; 0x5e6 <HLCD_vidWritecmd+0x94>
     5c4:	ec 2f       	mov	r30, r28
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	6d 2f       	mov	r22, r29
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	0c 2e       	mov	r0, r28
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <HLCD_vidWritecmd+0x82>
     5d0:	75 95       	asr	r23
     5d2:	67 95       	ror	r22
     5d4:	0a 94       	dec	r0
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <HLCD_vidWritecmd+0x7e>
     5d8:	61 70       	andi	r22, 0x01	; 1
     5da:	e5 58       	subi	r30, 0x85	; 133
     5dc:	ff 4f       	sbci	r31, 0xFF	; 255
     5de:	80 81       	ld	r24, Z
     5e0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     5e4:	cf 5f       	subi	r28, 0xFF	; 255
     5e6:	c4 30       	cpi	r28, 0x04	; 4
     5e8:	68 f3       	brcs	.-38     	; 0x5c4 <HLCD_vidWritecmd+0x72>
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     5f2:	89 ef       	ldi	r24, 0xF9	; 249
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <HLCD_vidWritecmd+0xa4>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <HLCD_vidWritecmd+0xaa>
     5fc:	00 00       	nop
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     606:	83 ef       	ldi	r24, 0xF3	; 243
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <HLCD_vidWritecmd+0xb8>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <HLCD_vidWritecmd+0xbe>
     610:	00 00       	nop
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	08 95       	ret

0000061a <HLCD_vidInit>:
     61a:	cf 93       	push	r28
     61c:	c0 e0       	ldi	r28, 0x00	; 0
     61e:	09 c0       	rjmp	.+18     	; 0x632 <HLCD_vidInit+0x18>
     620:	ec 2f       	mov	r30, r28
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	e5 58       	subi	r30, 0x85	; 133
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	80 81       	ld	r24, Z
     62c:	0e 94 29 02 	call	0x452	; 0x452 <DIO_s8SETPinDir>
     630:	cf 5f       	subi	r28, 0xFF	; 255
     632:	c4 30       	cpi	r28, 0x04	; 4
     634:	a8 f3       	brcs	.-22     	; 0x620 <HLCD_vidInit+0x6>
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 29 02 	call	0x452	; 0x452 <DIO_s8SETPinDir>
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 29 02 	call	0x452	; 0x452 <DIO_s8SETPinDir>
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	0e 94 29 02 	call	0x452	; 0x452 <DIO_s8SETPinDir>
     64e:	8f e0       	ldi	r24, 0x0F	; 15
     650:	97 e2       	ldi	r25, 0x27	; 39
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <HLCD_vidInit+0x38>
     656:	00 c0       	rjmp	.+0      	; 0x658 <HLCD_vidInit+0x3e>
     658:	00 00       	nop
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     660:	89 ef       	ldi	r24, 0xF9	; 249
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <HLCD_vidInit+0x4a>
     668:	00 c0       	rjmp	.+0      	; 0x66a <HLCD_vidInit+0x50>
     66a:	00 00       	nop
     66c:	88 e2       	ldi	r24, 0x28	; 40
     66e:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     672:	89 ef       	ldi	r24, 0xF9	; 249
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <HLCD_vidInit+0x5c>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <HLCD_vidInit+0x62>
     67c:	00 00       	nop
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     684:	87 ee       	ldi	r24, 0xE7	; 231
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <HLCD_vidInit+0x6e>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <HLCD_vidInit+0x74>
     68e:	00 00       	nop
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     696:	89 ef       	ldi	r24, 0xF9	; 249
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <HLCD_vidInit+0x80>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <HLCD_vidInit+0x86>
     6a0:	00 00       	nop
     6a2:	8e e0       	ldi	r24, 0x0E	; 14
     6a4:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     6a8:	89 ef       	ldi	r24, 0xF9	; 249
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <HLCD_vidInit+0x92>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <HLCD_vidInit+0x98>
     6b2:	00 00       	nop
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <HLCD_vidWriteChar>:
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	d8 2f       	mov	r29, r24
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     6d0:	1d 2f       	mov	r17, r29
     6d2:	12 95       	swap	r17
     6d4:	1f 70       	andi	r17, 0x0F	; 15
     6d6:	c0 e0       	ldi	r28, 0x00	; 0
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <HLCD_vidWriteChar+0x44>
     6da:	ec 2f       	mov	r30, r28
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	61 2f       	mov	r22, r17
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0c 2e       	mov	r0, r28
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <HLCD_vidWriteChar+0x32>
     6e6:	75 95       	asr	r23
     6e8:	67 95       	ror	r22
     6ea:	0a 94       	dec	r0
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <HLCD_vidWriteChar+0x2e>
     6ee:	61 70       	andi	r22, 0x01	; 1
     6f0:	e5 58       	subi	r30, 0x85	; 133
     6f2:	ff 4f       	sbci	r31, 0xFF	; 255
     6f4:	80 81       	ld	r24, Z
     6f6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     6fa:	cf 5f       	subi	r28, 0xFF	; 255
     6fc:	c4 30       	cpi	r28, 0x04	; 4
     6fe:	68 f3       	brcs	.-38     	; 0x6da <HLCD_vidWriteChar+0x22>
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     708:	89 ef       	ldi	r24, 0xF9	; 249
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <HLCD_vidWriteChar+0x54>
     710:	00 c0       	rjmp	.+0      	; 0x712 <HLCD_vidWriteChar+0x5a>
     712:	00 00       	nop
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     71c:	92 e4       	ldi	r25, 0x42	; 66
     71e:	9a 95       	dec	r25
     720:	f1 f7       	brne	.-4      	; 0x71e <HLCD_vidWriteChar+0x66>
     722:	00 c0       	rjmp	.+0      	; 0x724 <HLCD_vidWriteChar+0x6c>
     724:	df 70       	andi	r29, 0x0F	; 15
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	11 c0       	rjmp	.+34     	; 0x74c <HLCD_vidWriteChar+0x94>
     72a:	ec 2f       	mov	r30, r28
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	6d 2f       	mov	r22, r29
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	0c 2e       	mov	r0, r28
     734:	02 c0       	rjmp	.+4      	; 0x73a <HLCD_vidWriteChar+0x82>
     736:	75 95       	asr	r23
     738:	67 95       	ror	r22
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <HLCD_vidWriteChar+0x7e>
     73e:	61 70       	andi	r22, 0x01	; 1
     740:	e5 58       	subi	r30, 0x85	; 133
     742:	ff 4f       	sbci	r31, 0xFF	; 255
     744:	80 81       	ld	r24, Z
     746:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     74a:	cf 5f       	subi	r28, 0xFF	; 255
     74c:	c4 30       	cpi	r28, 0x04	; 4
     74e:	68 f3       	brcs	.-38     	; 0x72a <HLCD_vidWriteChar+0x72>
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     758:	89 ef       	ldi	r24, 0xF9	; 249
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <HLCD_vidWriteChar+0xa4>
     760:	00 c0       	rjmp	.+0      	; 0x762 <HLCD_vidWriteChar+0xaa>
     762:	00 00       	nop
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_s8SETPinVal>
     76c:	83 ef       	ldi	r24, 0xF3	; 243
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <HLCD_vidWriteChar+0xb8>
     774:	00 c0       	rjmp	.+0      	; 0x776 <HLCD_vidWriteChar+0xbe>
     776:	00 00       	nop
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	08 95       	ret

00000780 <HLCD_ClrDisplay>:
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     786:	87 ee       	ldi	r24, 0xE7	; 231
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <HLCD_ClrDisplay+0xa>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <HLCD_ClrDisplay+0x10>
     790:	00 00       	nop
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     798:	87 ee       	ldi	r24, 0xE7	; 231
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <HLCD_ClrDisplay+0x1c>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <HLCD_ClrDisplay+0x22>
     7a2:	00 00       	nop
     7a4:	08 95       	ret

000007a6 <HLCD_gotoXY>:
 * 				  pos -> take colom number from 0 ~ 16
 * return		: void
 * */
void HLCD_gotoXY(Uchar8_t row, Uchar8_t pos)
{
	if (row==0 && pos < 16)
     7a6:	81 11       	cpse	r24, r1
     7a8:	08 c0       	rjmp	.+16     	; 0x7ba <HLCD_gotoXY+0x14>
     7aa:	60 31       	cpi	r22, 0x10	; 16
     7ac:	30 f4       	brcc	.+12     	; 0x7ba <HLCD_gotoXY+0x14>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     7ae:	86 2f       	mov	r24, r22
     7b0:	8f 70       	andi	r24, 0x0F	; 15
     7b2:	80 68       	ori	r24, 0x80	; 128
     7b4:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     7b8:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	39 f4       	brne	.+14     	; 0x7cc <HLCD_gotoXY+0x26>
     7be:	60 31       	cpi	r22, 0x10	; 16
     7c0:	28 f4       	brcc	.+10     	; 0x7cc <HLCD_gotoXY+0x26>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     7c2:	86 2f       	mov	r24, r22
     7c4:	8f 70       	andi	r24, 0x0F	; 15
     7c6:	80 6c       	ori	r24, 0xC0	; 192
     7c8:	0e 94 a9 02 	call	0x552	; 0x552 <HLCD_vidWritecmd>
     7cc:	08 95       	ret

000007ce <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	8c 01       	movw	r16, r24
	Uint16_t count = 0;
	Uchar8_t string = str[count];
     7d8:	fc 01       	movw	r30, r24
     7da:	80 81       	ld	r24, Z
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
     7dc:	c0 e0       	ldi	r28, 0x00	; 0
     7de:	d0 e0       	ldi	r29, 0x00	; 0
	Uchar8_t string = str[count];
	while(string)
     7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <HLCD_WriteString+0x22>
	{
		HLCD_vidWriteChar(string);
     7e2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <HLCD_vidWriteChar>
		string = str[++count];
     7e6:	21 96       	adiw	r28, 0x01	; 1
     7e8:	f8 01       	movw	r30, r16
     7ea:	ec 0f       	add	r30, r28
     7ec:	fd 1f       	adc	r31, r29
     7ee:	80 81       	ld	r24, Z
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
	Uchar8_t string = str[count];
	while(string)
     7f0:	81 11       	cpse	r24, r1
     7f2:	f7 cf       	rjmp	.-18     	; 0x7e2 <HLCD_WriteString+0x14>
	{
		HLCD_vidWriteChar(string);
		string = str[++count];
	}
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: void
 * */
void HLCD_WriteInt(Uint32_t number)
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	2a 97       	sbiw	r28, 0x0a	; 10
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     812:	4a e0       	ldi	r20, 0x0A	; 10
     814:	be 01       	movw	r22, r28
     816:	6f 5f       	subi	r22, 0xFF	; 255
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__itoa_ncheck>
	Uchar8_t STR[INDEX];
	itoa(number, STR, 10);
	HLCD_WriteString(STR);
     81e:	ce 01       	movw	r24, r28
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	0e 94 e7 03 	call	0x7ce	; 0x7ce <HLCD_WriteString>
}
     826:	2a 96       	adiw	r28, 0x0a	; 10
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	cd bf       	out	0x3d, r28	; 61
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <main>:


void main(void)
{
	//float64_t val;
	app_init();
     838:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	{
// 			ultrasonic_vGetDistance(&val);
// 			HLCD_WriteInt(val);
// 			_delay_ms(1000);
// 			HLCD_ClrDisplay();
		app_main();
     83c:	0e 94 53 00 	call	0xa6	; 0xa6 <app_main>
     840:	fd cf       	rjmp	.-6      	; 0x83c <main+0x4>

00000842 <DIO_Init>:
			switch(port)
			{
				case DIO_PORTA:	TOGGLE_BIT(DIO_PORTA_PORT_REG,pin);		break;
				case DIO_PORTB:	TOGGLE_BIT(DIO_PORTB_PORT_REG,pin);		break;
				case DIO_PORTC:	TOGGLE_BIT(DIO_PORTC_PORT_REG,pin);		break;
				case DIO_PORTD:	TOGGLE_BIT(DIO_PORTD_PORT_REG,pin);		break;
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	9f c2       	rjmp	.+1342   	; 0xd84 <__stack+0x525>
     846:	82 2f       	mov	r24, r18
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	fc 01       	movw	r30, r24
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	e8 0f       	add	r30, r24
     856:	f9 1f       	adc	r31, r25
     858:	e1 58       	subi	r30, 0x81	; 129
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	32 81       	ldd	r19, Z+2	; 0x02
     85e:	31 11       	cpse	r19, r1
     860:	49 c1       	rjmp	.+658    	; 0xaf4 <__stack+0x295>
     862:	fc 01       	movw	r30, r24
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	e8 0f       	add	r30, r24
     86e:	f9 1f       	adc	r31, r25
     870:	e1 58       	subi	r30, 0x81	; 129
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	30 81       	ld	r19, Z
     876:	31 30       	cpi	r19, 0x01	; 1
     878:	e9 f0       	breq	.+58     	; 0x8b4 <__stack+0x55>
     87a:	30 f0       	brcs	.+12     	; 0x888 <__stack+0x29>
     87c:	32 30       	cpi	r19, 0x02	; 2
     87e:	81 f1       	breq	.+96     	; 0x8e0 <__stack+0x81>
     880:	33 30       	cpi	r19, 0x03	; 3
     882:	09 f4       	brne	.+2      	; 0x886 <__stack+0x27>
     884:	43 c0       	rjmp	.+134    	; 0x90c <__stack+0xad>
     886:	57 c0       	rjmp	.+174    	; 0x936 <__stack+0xd7>
     888:	3a b3       	in	r19, 0x1a	; 26
     88a:	fc 01       	movw	r30, r24
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	e8 0f       	add	r30, r24
     896:	f9 1f       	adc	r31, r25
     898:	e1 58       	subi	r30, 0x81	; 129
     89a:	ff 4f       	sbci	r31, 0xFF	; 255
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	01 80       	ldd	r0, Z+1	; 0x01
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	0a 94       	dec	r0
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	40 95       	com	r20
     8ae:	43 23       	and	r20, r19
     8b0:	4a bb       	out	0x1a, r20	; 26
     8b2:	41 c0       	rjmp	.+130    	; 0x936 <__stack+0xd7>
     8b4:	37 b3       	in	r19, 0x17	; 23
     8b6:	fc 01       	movw	r30, r24
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	e8 0f       	add	r30, r24
     8c2:	f9 1f       	adc	r31, r25
     8c4:	e1 58       	subi	r30, 0x81	; 129
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	01 80       	ldd	r0, Z+1	; 0x01
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	44 0f       	add	r20, r20
     8d2:	55 1f       	adc	r21, r21
     8d4:	0a 94       	dec	r0
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	40 95       	com	r20
     8da:	43 23       	and	r20, r19
     8dc:	47 bb       	out	0x17, r20	; 23
     8de:	2b c0       	rjmp	.+86     	; 0x936 <__stack+0xd7>
     8e0:	34 b3       	in	r19, 0x14	; 20
     8e2:	fc 01       	movw	r30, r24
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	ee 0f       	add	r30, r30
     8ea:	ff 1f       	adc	r31, r31
     8ec:	e8 0f       	add	r30, r24
     8ee:	f9 1f       	adc	r31, r25
     8f0:	e1 58       	subi	r30, 0x81	; 129
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	01 80       	ldd	r0, Z+1	; 0x01
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
     8fc:	44 0f       	add	r20, r20
     8fe:	55 1f       	adc	r21, r21
     900:	0a 94       	dec	r0
     902:	e2 f7       	brpl	.-8      	; 0x8fc <__stack+0x9d>
     904:	40 95       	com	r20
     906:	43 23       	and	r20, r19
     908:	44 bb       	out	0x14, r20	; 20
     90a:	15 c0       	rjmp	.+42     	; 0x936 <__stack+0xd7>
     90c:	31 b3       	in	r19, 0x11	; 17
     90e:	fc 01       	movw	r30, r24
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e8 0f       	add	r30, r24
     91a:	f9 1f       	adc	r31, r25
     91c:	e1 58       	subi	r30, 0x81	; 129
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	01 80       	ldd	r0, Z+1	; 0x01
     926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
     928:	44 0f       	add	r20, r20
     92a:	55 1f       	adc	r21, r21
     92c:	0a 94       	dec	r0
     92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
     930:	40 95       	com	r20
     932:	43 23       	and	r20, r19
     934:	41 bb       	out	0x11, r20	; 17
     936:	fc 01       	movw	r30, r24
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e8 0f       	add	r30, r24
     942:	f9 1f       	adc	r31, r25
     944:	e1 58       	subi	r30, 0x81	; 129
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	33 81       	ldd	r19, Z+3	; 0x03
     94a:	31 30       	cpi	r19, 0x01	; 1
     94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0xf1>
     94e:	67 c0       	rjmp	.+206    	; 0xa1e <__stack+0x1bf>
     950:	fc 01       	movw	r30, r24
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	e8 0f       	add	r30, r24
     95c:	f9 1f       	adc	r31, r25
     95e:	e1 58       	subi	r30, 0x81	; 129
     960:	ff 4f       	sbci	r31, 0xFF	; 255
     962:	30 81       	ld	r19, Z
     964:	31 30       	cpi	r19, 0x01	; 1
     966:	e1 f0       	breq	.+56     	; 0x9a0 <__stack+0x141>
     968:	30 f0       	brcs	.+12     	; 0x976 <__stack+0x117>
     96a:	32 30       	cpi	r19, 0x02	; 2
     96c:	71 f1       	breq	.+92     	; 0x9ca <__stack+0x16b>
     96e:	33 30       	cpi	r19, 0x03	; 3
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x115>
     972:	40 c0       	rjmp	.+128    	; 0x9f4 <__stack+0x195>
     974:	06 c2       	rjmp	.+1036   	; 0xd82 <__stack+0x523>
     976:	3b b3       	in	r19, 0x1b	; 27
     978:	fc 01       	movw	r30, r24
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	e8 0f       	add	r30, r24
     984:	f9 1f       	adc	r31, r25
     986:	e1 58       	subi	r30, 0x81	; 129
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	01 80       	ldd	r0, Z+1	; 0x01
     990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x137>
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	0a 94       	dec	r0
     998:	e2 f7       	brpl	.-8      	; 0x992 <__stack+0x133>
     99a:	83 2b       	or	r24, r19
     99c:	8b bb       	out	0x1b, r24	; 27
     99e:	f1 c1       	rjmp	.+994    	; 0xd82 <__stack+0x523>
     9a0:	38 b3       	in	r19, 0x18	; 24
     9a2:	fc 01       	movw	r30, r24
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 80       	ldd	r0, Z+1	; 0x01
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0x161>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <__stack+0x15d>
     9c4:	83 2b       	or	r24, r19
     9c6:	88 bb       	out	0x18, r24	; 24
     9c8:	dc c1       	rjmp	.+952    	; 0xd82 <__stack+0x523>
     9ca:	35 b3       	in	r19, 0x15	; 21
     9cc:	fc 01       	movw	r30, r24
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	e8 0f       	add	r30, r24
     9d8:	f9 1f       	adc	r31, r25
     9da:	e1 58       	subi	r30, 0x81	; 129
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	01 80       	ldd	r0, Z+1	; 0x01
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__stack+0x18b>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	0a 94       	dec	r0
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <__stack+0x187>
     9ee:	83 2b       	or	r24, r19
     9f0:	85 bb       	out	0x15, r24	; 21
     9f2:	c7 c1       	rjmp	.+910    	; 0xd82 <__stack+0x523>
     9f4:	32 b3       	in	r19, 0x12	; 18
     9f6:	fc 01       	movw	r30, r24
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	e8 0f       	add	r30, r24
     a02:	f9 1f       	adc	r31, r25
     a04:	e1 58       	subi	r30, 0x81	; 129
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	01 80       	ldd	r0, Z+1	; 0x01
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <__stack+0x1b5>
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	0a 94       	dec	r0
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <__stack+0x1b1>
     a18:	83 2b       	or	r24, r19
     a1a:	82 bb       	out	0x12, r24	; 18
     a1c:	b2 c1       	rjmp	.+868    	; 0xd82 <__stack+0x523>
     a1e:	fc 01       	movw	r30, r24
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	e8 0f       	add	r30, r24
     a2a:	f9 1f       	adc	r31, r25
     a2c:	e1 58       	subi	r30, 0x81	; 129
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	30 81       	ld	r19, Z
     a32:	31 30       	cpi	r19, 0x01	; 1
     a34:	e9 f0       	breq	.+58     	; 0xa70 <__stack+0x211>
     a36:	30 f0       	brcs	.+12     	; 0xa44 <__stack+0x1e5>
     a38:	32 30       	cpi	r19, 0x02	; 2
     a3a:	81 f1       	breq	.+96     	; 0xa9c <__stack+0x23d>
     a3c:	33 30       	cpi	r19, 0x03	; 3
     a3e:	09 f4       	brne	.+2      	; 0xa42 <__stack+0x1e3>
     a40:	43 c0       	rjmp	.+134    	; 0xac8 <__stack+0x269>
     a42:	9f c1       	rjmp	.+830    	; 0xd82 <__stack+0x523>
     a44:	3b b3       	in	r19, 0x1b	; 27
     a46:	fc 01       	movw	r30, r24
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e8 0f       	add	r30, r24
     a52:	f9 1f       	adc	r31, r25
     a54:	e1 58       	subi	r30, 0x81	; 129
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	01 80       	ldd	r0, Z+1	; 0x01
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <__stack+0x205>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	0a 94       	dec	r0
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <__stack+0x201>
     a68:	80 95       	com	r24
     a6a:	83 23       	and	r24, r19
     a6c:	8b bb       	out	0x1b, r24	; 27
     a6e:	89 c1       	rjmp	.+786    	; 0xd82 <__stack+0x523>
     a70:	38 b3       	in	r19, 0x18	; 24
     a72:	fc 01       	movw	r30, r24
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	e8 0f       	add	r30, r24
     a7e:	f9 1f       	adc	r31, r25
     a80:	e1 58       	subi	r30, 0x81	; 129
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	01 80       	ldd	r0, Z+1	; 0x01
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x231>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	0a 94       	dec	r0
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <__stack+0x22d>
     a94:	80 95       	com	r24
     a96:	83 23       	and	r24, r19
     a98:	88 bb       	out	0x18, r24	; 24
     a9a:	73 c1       	rjmp	.+742    	; 0xd82 <__stack+0x523>
     a9c:	35 b3       	in	r19, 0x15	; 21
     a9e:	fc 01       	movw	r30, r24
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	e8 0f       	add	r30, r24
     aaa:	f9 1f       	adc	r31, r25
     aac:	e1 58       	subi	r30, 0x81	; 129
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	01 80       	ldd	r0, Z+1	; 0x01
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <__stack+0x25d>
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	0a 94       	dec	r0
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <__stack+0x259>
     ac0:	80 95       	com	r24
     ac2:	83 23       	and	r24, r19
     ac4:	85 bb       	out	0x15, r24	; 21
     ac6:	5d c1       	rjmp	.+698    	; 0xd82 <__stack+0x523>
     ac8:	32 b3       	in	r19, 0x12	; 18
     aca:	fc 01       	movw	r30, r24
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	e8 0f       	add	r30, r24
     ad6:	f9 1f       	adc	r31, r25
     ad8:	e1 58       	subi	r30, 0x81	; 129
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	01 80       	ldd	r0, Z+1	; 0x01
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <__stack+0x289>
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	0a 94       	dec	r0
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <__stack+0x285>
     aec:	80 95       	com	r24
     aee:	83 23       	and	r24, r19
     af0:	82 bb       	out	0x12, r24	; 18
     af2:	47 c1       	rjmp	.+654    	; 0xd82 <__stack+0x523>
     af4:	31 30       	cpi	r19, 0x01	; 1
     af6:	09 f0       	breq	.+2      	; 0xafa <__stack+0x29b>
     af8:	44 c1       	rjmp	.+648    	; 0xd82 <__stack+0x523>
     afa:	fc 01       	movw	r30, r24
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	e8 0f       	add	r30, r24
     b06:	f9 1f       	adc	r31, r25
     b08:	e1 58       	subi	r30, 0x81	; 129
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	30 81       	ld	r19, Z
     b0e:	31 30       	cpi	r19, 0x01	; 1
     b10:	e1 f0       	breq	.+56     	; 0xb4a <__stack+0x2eb>
     b12:	30 f0       	brcs	.+12     	; 0xb20 <__stack+0x2c1>
     b14:	32 30       	cpi	r19, 0x02	; 2
     b16:	71 f1       	breq	.+92     	; 0xb74 <__stack+0x315>
     b18:	33 30       	cpi	r19, 0x03	; 3
     b1a:	09 f4       	brne	.+2      	; 0xb1e <__stack+0x2bf>
     b1c:	40 c0       	rjmp	.+128    	; 0xb9e <__stack+0x33f>
     b1e:	53 c0       	rjmp	.+166    	; 0xbc6 <__stack+0x367>
     b20:	3a b3       	in	r19, 0x1a	; 26
     b22:	fc 01       	movw	r30, r24
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	e8 0f       	add	r30, r24
     b2e:	f9 1f       	adc	r31, r25
     b30:	e1 58       	subi	r30, 0x81	; 129
     b32:	ff 4f       	sbci	r31, 0xFF	; 255
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	01 80       	ldd	r0, Z+1	; 0x01
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__stack+0x2e1>
     b3c:	44 0f       	add	r20, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	0a 94       	dec	r0
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <__stack+0x2dd>
     b44:	43 2b       	or	r20, r19
     b46:	4a bb       	out	0x1a, r20	; 26
     b48:	3e c0       	rjmp	.+124    	; 0xbc6 <__stack+0x367>
     b4a:	37 b3       	in	r19, 0x17	; 23
     b4c:	fc 01       	movw	r30, r24
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	e8 0f       	add	r30, r24
     b58:	f9 1f       	adc	r31, r25
     b5a:	e1 58       	subi	r30, 0x81	; 129
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	01 80       	ldd	r0, Z+1	; 0x01
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <__stack+0x30b>
     b66:	44 0f       	add	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	0a 94       	dec	r0
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <__stack+0x307>
     b6e:	43 2b       	or	r20, r19
     b70:	47 bb       	out	0x17, r20	; 23
     b72:	29 c0       	rjmp	.+82     	; 0xbc6 <__stack+0x367>
     b74:	34 b3       	in	r19, 0x14	; 20
     b76:	fc 01       	movw	r30, r24
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	e8 0f       	add	r30, r24
     b82:	f9 1f       	adc	r31, r25
     b84:	e1 58       	subi	r30, 0x81	; 129
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	01 80       	ldd	r0, Z+1	; 0x01
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <__stack+0x335>
     b90:	44 0f       	add	r20, r20
     b92:	55 1f       	adc	r21, r21
     b94:	0a 94       	dec	r0
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <__stack+0x331>
     b98:	43 2b       	or	r20, r19
     b9a:	44 bb       	out	0x14, r20	; 20
     b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <__stack+0x367>
     b9e:	31 b3       	in	r19, 0x11	; 17
     ba0:	fc 01       	movw	r30, r24
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	e8 0f       	add	r30, r24
     bac:	f9 1f       	adc	r31, r25
     bae:	e1 58       	subi	r30, 0x81	; 129
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	01 80       	ldd	r0, Z+1	; 0x01
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <__stack+0x35f>
     bba:	44 0f       	add	r20, r20
     bbc:	55 1f       	adc	r21, r21
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <__stack+0x35b>
     bc2:	43 2b       	or	r20, r19
     bc4:	41 bb       	out	0x11, r20	; 17
     bc6:	fc 01       	movw	r30, r24
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	e8 0f       	add	r30, r24
     bd2:	f9 1f       	adc	r31, r25
     bd4:	e1 58       	subi	r30, 0x81	; 129
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	33 81       	ldd	r19, Z+3	; 0x03
     bda:	31 11       	cpse	r19, r1
     bdc:	67 c0       	rjmp	.+206    	; 0xcac <__stack+0x44d>
     bde:	fc 01       	movw	r30, r24
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	e8 0f       	add	r30, r24
     bea:	f9 1f       	adc	r31, r25
     bec:	e1 58       	subi	r30, 0x81	; 129
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	30 81       	ld	r19, Z
     bf2:	31 30       	cpi	r19, 0x01	; 1
     bf4:	e1 f0       	breq	.+56     	; 0xc2e <__stack+0x3cf>
     bf6:	30 f0       	brcs	.+12     	; 0xc04 <__stack+0x3a5>
     bf8:	32 30       	cpi	r19, 0x02	; 2
     bfa:	71 f1       	breq	.+92     	; 0xc58 <__stack+0x3f9>
     bfc:	33 30       	cpi	r19, 0x03	; 3
     bfe:	09 f4       	brne	.+2      	; 0xc02 <__stack+0x3a3>
     c00:	40 c0       	rjmp	.+128    	; 0xc82 <__stack+0x423>
     c02:	bf c0       	rjmp	.+382    	; 0xd82 <__stack+0x523>
     c04:	3b b3       	in	r19, 0x1b	; 27
     c06:	fc 01       	movw	r30, r24
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	e8 0f       	add	r30, r24
     c12:	f9 1f       	adc	r31, r25
     c14:	e1 58       	subi	r30, 0x81	; 129
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	01 80       	ldd	r0, Z+1	; 0x01
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <__stack+0x3c5>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <__stack+0x3c1>
     c28:	83 2b       	or	r24, r19
     c2a:	8b bb       	out	0x1b, r24	; 27
     c2c:	aa c0       	rjmp	.+340    	; 0xd82 <__stack+0x523>
     c2e:	38 b3       	in	r19, 0x18	; 24
     c30:	fc 01       	movw	r30, r24
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e8 0f       	add	r30, r24
     c3c:	f9 1f       	adc	r31, r25
     c3e:	e1 58       	subi	r30, 0x81	; 129
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	01 80       	ldd	r0, Z+1	; 0x01
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <__stack+0x3ef>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <__stack+0x3eb>
     c52:	83 2b       	or	r24, r19
     c54:	88 bb       	out	0x18, r24	; 24
     c56:	95 c0       	rjmp	.+298    	; 0xd82 <__stack+0x523>
     c58:	35 b3       	in	r19, 0x15	; 21
     c5a:	fc 01       	movw	r30, r24
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	e8 0f       	add	r30, r24
     c66:	f9 1f       	adc	r31, r25
     c68:	e1 58       	subi	r30, 0x81	; 129
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	01 80       	ldd	r0, Z+1	; 0x01
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <__stack+0x419>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <__stack+0x415>
     c7c:	83 2b       	or	r24, r19
     c7e:	85 bb       	out	0x15, r24	; 21
     c80:	80 c0       	rjmp	.+256    	; 0xd82 <__stack+0x523>
     c82:	32 b3       	in	r19, 0x12	; 18
     c84:	fc 01       	movw	r30, r24
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	e8 0f       	add	r30, r24
     c90:	f9 1f       	adc	r31, r25
     c92:	e1 58       	subi	r30, 0x81	; 129
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	01 80       	ldd	r0, Z+1	; 0x01
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <__stack+0x443>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <__stack+0x43f>
     ca6:	83 2b       	or	r24, r19
     ca8:	82 bb       	out	0x12, r24	; 18
     caa:	6b c0       	rjmp	.+214    	; 0xd82 <__stack+0x523>
     cac:	fc 01       	movw	r30, r24
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	e8 0f       	add	r30, r24
     cb8:	f9 1f       	adc	r31, r25
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	30 81       	ld	r19, Z
     cc0:	31 30       	cpi	r19, 0x01	; 1
     cc2:	e9 f0       	breq	.+58     	; 0xcfe <__stack+0x49f>
     cc4:	30 f0       	brcs	.+12     	; 0xcd2 <__stack+0x473>
     cc6:	32 30       	cpi	r19, 0x02	; 2
     cc8:	81 f1       	breq	.+96     	; 0xd2a <__stack+0x4cb>
     cca:	33 30       	cpi	r19, 0x03	; 3
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__stack+0x471>
     cce:	43 c0       	rjmp	.+134    	; 0xd56 <__stack+0x4f7>
     cd0:	58 c0       	rjmp	.+176    	; 0xd82 <__stack+0x523>
     cd2:	3b b3       	in	r19, 0x1b	; 27
     cd4:	fc 01       	movw	r30, r24
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	ee 0f       	add	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	e8 0f       	add	r30, r24
     ce0:	f9 1f       	adc	r31, r25
     ce2:	e1 58       	subi	r30, 0x81	; 129
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	01 80       	ldd	r0, Z+1	; 0x01
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <__stack+0x493>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <__stack+0x48f>
     cf6:	80 95       	com	r24
     cf8:	83 23       	and	r24, r19
     cfa:	8b bb       	out	0x1b, r24	; 27
     cfc:	42 c0       	rjmp	.+132    	; 0xd82 <__stack+0x523>
     cfe:	38 b3       	in	r19, 0x18	; 24
     d00:	fc 01       	movw	r30, r24
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	e8 0f       	add	r30, r24
     d0c:	f9 1f       	adc	r31, r25
     d0e:	e1 58       	subi	r30, 0x81	; 129
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	01 80       	ldd	r0, Z+1	; 0x01
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <__stack+0x4bf>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <__stack+0x4bb>
     d22:	80 95       	com	r24
     d24:	83 23       	and	r24, r19
     d26:	88 bb       	out	0x18, r24	; 24
     d28:	2c c0       	rjmp	.+88     	; 0xd82 <__stack+0x523>
     d2a:	35 b3       	in	r19, 0x15	; 21
     d2c:	fc 01       	movw	r30, r24
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	e8 0f       	add	r30, r24
     d38:	f9 1f       	adc	r31, r25
     d3a:	e1 58       	subi	r30, 0x81	; 129
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	01 80       	ldd	r0, Z+1	; 0x01
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <__stack+0x4eb>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <__stack+0x4e7>
     d4e:	80 95       	com	r24
     d50:	83 23       	and	r24, r19
     d52:	85 bb       	out	0x15, r24	; 21
     d54:	16 c0       	rjmp	.+44     	; 0xd82 <__stack+0x523>
     d56:	32 b3       	in	r19, 0x12	; 18
     d58:	fc 01       	movw	r30, r24
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	8e 0f       	add	r24, r30
     d64:	9f 1f       	adc	r25, r31
     d66:	fc 01       	movw	r30, r24
     d68:	e1 58       	subi	r30, 0x81	; 129
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	01 80       	ldd	r0, Z+1	; 0x01
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <__stack+0x519>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <__stack+0x515>
     d7c:	80 95       	com	r24
     d7e:	83 23       	and	r24, r19
     d80:	82 bb       	out	0x12, r24	; 18
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__stack+0x52b>
     d88:	5e cd       	rjmp	.-1348   	; 0x846 <DIO_Init+0x4>
     d8a:	08 95       	ret

00000d8c <DIO_WritePin>:
     d8c:	44 23       	and	r20, r20
     d8e:	19 f0       	breq	.+6      	; 0xd96 <DIO_WritePin+0xa>
     d90:	41 30       	cpi	r20, 0x01	; 1
     d92:	a9 f1       	breq	.+106    	; 0xdfe <DIO_WritePin+0x72>
     d94:	08 95       	ret
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	89 f0       	breq	.+34     	; 0xdbc <DIO_WritePin+0x30>
     d9a:	28 f0       	brcs	.+10     	; 0xda6 <DIO_WritePin+0x1a>
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	c9 f0       	breq	.+50     	; 0xdd2 <DIO_WritePin+0x46>
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	11 f1       	breq	.+68     	; 0xde8 <DIO_WritePin+0x5c>
     da4:	08 95       	ret
     da6:	2b b3       	in	r18, 0x1b	; 27
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_WritePin+0x26>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	6a 95       	dec	r22
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_WritePin+0x22>
     db6:	82 2b       	or	r24, r18
     db8:	8b bb       	out	0x1b, r24	; 27
     dba:	08 95       	ret
     dbc:	28 b3       	in	r18, 0x18	; 24
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_WritePin+0x3c>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	6a 95       	dec	r22
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_WritePin+0x38>
     dcc:	82 2b       	or	r24, r18
     dce:	88 bb       	out	0x18, r24	; 24
     dd0:	08 95       	ret
     dd2:	25 b3       	in	r18, 0x15	; 21
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_WritePin+0x52>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	6a 95       	dec	r22
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_WritePin+0x4e>
     de2:	82 2b       	or	r24, r18
     de4:	85 bb       	out	0x15, r24	; 21
     de6:	08 95       	ret
     de8:	22 b3       	in	r18, 0x12	; 18
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_WritePin+0x68>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	6a 95       	dec	r22
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_WritePin+0x64>
     df8:	82 2b       	or	r24, r18
     dfa:	82 bb       	out	0x12, r24	; 18
     dfc:	08 95       	ret
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 f0       	breq	.+36     	; 0xe26 <DIO_WritePin+0x9a>
     e02:	28 f0       	brcs	.+10     	; 0xe0e <DIO_WritePin+0x82>
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	d9 f0       	breq	.+54     	; 0xe3e <DIO_WritePin+0xb2>
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	29 f1       	breq	.+74     	; 0xe56 <DIO_WritePin+0xca>
     e0c:	08 95       	ret
     e0e:	2b b3       	in	r18, 0x1b	; 27
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_WritePin+0x8e>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	6a 95       	dec	r22
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_WritePin+0x8a>
     e1e:	80 95       	com	r24
     e20:	82 23       	and	r24, r18
     e22:	8b bb       	out	0x1b, r24	; 27
     e24:	08 95       	ret
     e26:	28 b3       	in	r18, 0x18	; 24
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_WritePin+0xa6>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	6a 95       	dec	r22
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_WritePin+0xa2>
     e36:	80 95       	com	r24
     e38:	82 23       	and	r24, r18
     e3a:	88 bb       	out	0x18, r24	; 24
     e3c:	08 95       	ret
     e3e:	25 b3       	in	r18, 0x15	; 21
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_WritePin+0xbe>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	6a 95       	dec	r22
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_WritePin+0xba>
     e4e:	80 95       	com	r24
     e50:	82 23       	and	r24, r18
     e52:	85 bb       	out	0x15, r24	; 21
     e54:	08 95       	ret
     e56:	22 b3       	in	r18, 0x12	; 18
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_WritePin+0xd6>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	6a 95       	dec	r22
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_WritePin+0xd2>
     e66:	80 95       	com	r24
     e68:	82 23       	and	r24, r18
     e6a:	82 bb       	out	0x12, r24	; 18
     e6c:	08 95       	ret

00000e6e <DIO_read>:
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	89 f0       	breq	.+34     	; 0xe94 <DIO_read+0x26>
     e72:	28 f0       	brcs	.+10     	; 0xe7e <DIO_read+0x10>
     e74:	82 30       	cpi	r24, 0x02	; 2
     e76:	c9 f0       	breq	.+50     	; 0xeaa <DIO_read+0x3c>
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	11 f1       	breq	.+68     	; 0xec0 <DIO_read+0x52>
     e7c:	08 95       	ret
     e7e:	89 b3       	in	r24, 0x19	; 25
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_read+0x1a>
     e84:	95 95       	asr	r25
     e86:	87 95       	ror	r24
     e88:	6a 95       	dec	r22
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_read+0x16>
     e8c:	81 70       	andi	r24, 0x01	; 1
     e8e:	fa 01       	movw	r30, r20
     e90:	80 83       	st	Z, r24
     e92:	08 95       	ret
     e94:	86 b3       	in	r24, 0x16	; 22
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_read+0x30>
     e9a:	95 95       	asr	r25
     e9c:	87 95       	ror	r24
     e9e:	6a 95       	dec	r22
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_read+0x2c>
     ea2:	81 70       	andi	r24, 0x01	; 1
     ea4:	fa 01       	movw	r30, r20
     ea6:	80 83       	st	Z, r24
     ea8:	08 95       	ret
     eaa:	83 b3       	in	r24, 0x13	; 19
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_read+0x46>
     eb0:	95 95       	asr	r25
     eb2:	87 95       	ror	r24
     eb4:	6a 95       	dec	r22
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_read+0x42>
     eb8:	81 70       	andi	r24, 0x01	; 1
     eba:	fa 01       	movw	r30, r20
     ebc:	80 83       	st	Z, r24
     ebe:	08 95       	ret
     ec0:	80 b3       	in	r24, 0x10	; 16
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_read+0x5c>
     ec6:	95 95       	asr	r25
     ec8:	87 95       	ror	r24
     eca:	6a 95       	dec	r22
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_read+0x58>
     ece:	81 70       	andi	r24, 0x01	; 1
     ed0:	fa 01       	movw	r30, r20
     ed2:	80 83       	st	Z, r24
     ed4:	08 95       	ret

00000ed6 <DIO_Initpin>:
	
	
}

void DIO_Initpin(DIO_ConfigType *config_ptr)
{
     ed6:	fc 01       	movw	r30, r24
	if (config_ptr->dio_mode== DIO_MODE_INPUT)
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	81 11       	cpse	r24, r1
     edc:	b5 c0       	rjmp	.+362    	; 0x1048 <DIO_Initpin+0x172>
	{
		
		
		switch(config_ptr->dio_port)
     ede:	80 81       	ld	r24, Z
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	99 f0       	breq	.+38     	; 0xf0a <DIO_Initpin+0x34>
     ee4:	28 f0       	brcs	.+10     	; 0xef0 <DIO_Initpin+0x1a>
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	e9 f0       	breq	.+58     	; 0xf24 <DIO_Initpin+0x4e>
     eea:	83 30       	cpi	r24, 0x03	; 3
     eec:	41 f1       	breq	.+80     	; 0xf3e <DIO_Initpin+0x68>
     eee:	33 c0       	rjmp	.+102    	; 0xf56 <DIO_Initpin+0x80>
		{
			
			
			case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_DDR_REG,config_ptr->dio_pin);	break;
     ef0:	2a b3       	in	r18, 0x1a	; 26
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	01 80       	ldd	r0, Z+1	; 0x01
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_Initpin+0x28>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_Initpin+0x24>
     f02:	80 95       	com	r24
     f04:	82 23       	and	r24, r18
     f06:	8a bb       	out	0x1a, r24	; 26
     f08:	26 c0       	rjmp	.+76     	; 0xf56 <DIO_Initpin+0x80>
			case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_DDR_REG,config_ptr->dio_pin);	break;
     f0a:	27 b3       	in	r18, 0x17	; 23
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	01 80       	ldd	r0, Z+1	; 0x01
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_Initpin+0x42>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_Initpin+0x3e>
     f1c:	80 95       	com	r24
     f1e:	82 23       	and	r24, r18
     f20:	87 bb       	out	0x17, r24	; 23
     f22:	19 c0       	rjmp	.+50     	; 0xf56 <DIO_Initpin+0x80>
			case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_DDR_REG,config_ptr->dio_pin);	break;
     f24:	24 b3       	in	r18, 0x14	; 20
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	01 80       	ldd	r0, Z+1	; 0x01
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_Initpin+0x5c>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_Initpin+0x58>
     f36:	80 95       	com	r24
     f38:	82 23       	and	r24, r18
     f3a:	84 bb       	out	0x14, r24	; 20
     f3c:	0c c0       	rjmp	.+24     	; 0xf56 <DIO_Initpin+0x80>
			case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_DDR_REG,config_ptr->dio_pin);	break;
     f3e:	21 b3       	in	r18, 0x11	; 17
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	01 80       	ldd	r0, Z+1	; 0x01
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_Initpin+0x76>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_Initpin+0x72>
     f50:	80 95       	com	r24
     f52:	82 23       	and	r24, r18
     f54:	81 bb       	out	0x11, r24	; 17
			default:			break;
		}

		if (config_ptr->dio_initial_value == DIOINPUT_PULLUP)
     f56:	83 81       	ldd	r24, Z+3	; 0x03
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	c9 f5       	brne	.+114    	; 0xfce <DIO_Initpin+0xf8>
		{
			switch(config_ptr->dio_port)
     f5c:	80 81       	ld	r24, Z
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 f0       	breq	.+36     	; 0xf86 <DIO_Initpin+0xb0>
     f62:	28 f0       	brcs	.+10     	; 0xf6e <DIO_Initpin+0x98>
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	d9 f0       	breq	.+54     	; 0xf9e <DIO_Initpin+0xc8>
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	29 f1       	breq	.+74     	; 0xfb6 <DIO_Initpin+0xe0>
     f6c:	08 95       	ret
			{
				
				case DIO_PORTA:	SET_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
     f6e:	2b b3       	in	r18, 0x1b	; 27
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	01 80       	ldd	r0, Z+1	; 0x01
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_Initpin+0xa6>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_Initpin+0xa2>
     f80:	82 2b       	or	r24, r18
     f82:	8b bb       	out	0x1b, r24	; 27
     f84:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
     f86:	28 b3       	in	r18, 0x18	; 24
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	01 80       	ldd	r0, Z+1	; 0x01
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_Initpin+0xbe>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_Initpin+0xba>
     f98:	82 2b       	or	r24, r18
     f9a:	88 bb       	out	0x18, r24	; 24
     f9c:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
     f9e:	25 b3       	in	r18, 0x15	; 21
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	01 80       	ldd	r0, Z+1	; 0x01
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_Initpin+0xd6>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_Initpin+0xd2>
     fb0:	82 2b       	or	r24, r18
     fb2:	85 bb       	out	0x15, r24	; 21
     fb4:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
     fb6:	22 b3       	in	r18, 0x12	; 18
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	01 80       	ldd	r0, Z+1	; 0x01
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_Initpin+0xee>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_Initpin+0xea>
     fc8:	82 2b       	or	r24, r18
     fca:	82 bb       	out	0x12, r24	; 18
     fcc:	08 95       	ret
				default:			break;
			}
		}
		else
		{
			switch(config_ptr->dio_port)
     fce:	80 81       	ld	r24, Z
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	99 f0       	breq	.+38     	; 0xffa <DIO_Initpin+0x124>
     fd4:	28 f0       	brcs	.+10     	; 0xfe0 <DIO_Initpin+0x10a>
     fd6:	82 30       	cpi	r24, 0x02	; 2
     fd8:	e9 f0       	breq	.+58     	; 0x1014 <DIO_Initpin+0x13e>
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	41 f1       	breq	.+80     	; 0x102e <DIO_Initpin+0x158>
     fde:	08 95       	ret
			{
				
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
     fe0:	2b b3       	in	r18, 0x1b	; 27
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	01 80       	ldd	r0, Z+1	; 0x01
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_Initpin+0x118>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_Initpin+0x114>
     ff2:	80 95       	com	r24
     ff4:	82 23       	and	r24, r18
     ff6:	8b bb       	out	0x1b, r24	; 27
     ff8:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
     ffa:	28 b3       	in	r18, 0x18	; 24
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	01 80       	ldd	r0, Z+1	; 0x01
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_Initpin+0x132>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_Initpin+0x12e>
    100c:	80 95       	com	r24
    100e:	82 23       	and	r24, r18
    1010:	88 bb       	out	0x18, r24	; 24
    1012:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
    1014:	25 b3       	in	r18, 0x15	; 21
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	01 80       	ldd	r0, Z+1	; 0x01
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_Initpin+0x14c>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_Initpin+0x148>
    1026:	80 95       	com	r24
    1028:	82 23       	and	r24, r18
    102a:	85 bb       	out	0x15, r24	; 21
    102c:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
    102e:	22 b3       	in	r18, 0x12	; 18
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	01 80       	ldd	r0, Z+1	; 0x01
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_Initpin+0x166>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_Initpin+0x162>
    1040:	80 95       	com	r24
    1042:	82 23       	and	r24, r18
    1044:	82 bb       	out	0x12, r24	; 18
    1046:	08 95       	ret
				default:			break;
			}
			
		}
	}
	else if (config_ptr->dio_mode == DIO_MODE_OUTPUT)
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	09 f0       	breq	.+2      	; 0x104e <DIO_Initpin+0x178>
    104c:	b0 c0       	rjmp	.+352    	; 0x11ae <DIO_Initpin+0x2d8>
	{
		
		switch(config_ptr->dio_port)
    104e:	80 81       	ld	r24, Z
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 f0       	breq	.+36     	; 0x1078 <DIO_Initpin+0x1a2>
    1054:	28 f0       	brcs	.+10     	; 0x1060 <DIO_Initpin+0x18a>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	d9 f0       	breq	.+54     	; 0x1090 <DIO_Initpin+0x1ba>
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	29 f1       	breq	.+74     	; 0x10a8 <DIO_Initpin+0x1d2>
    105e:	2f c0       	rjmp	.+94     	; 0x10be <DIO_Initpin+0x1e8>
		{
			
			
			case DIO_PORTA:	SET_BIT(DIO_PORTA_DDR_REG,config_ptr->dio_pin);	break;
    1060:	2a b3       	in	r18, 0x1a	; 26
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	01 80       	ldd	r0, Z+1	; 0x01
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_Initpin+0x198>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_Initpin+0x194>
    1072:	82 2b       	or	r24, r18
    1074:	8a bb       	out	0x1a, r24	; 26
    1076:	23 c0       	rjmp	.+70     	; 0x10be <DIO_Initpin+0x1e8>
			case DIO_PORTB:	SET_BIT(DIO_PORTB_DDR_REG,config_ptr->dio_pin);	break;
    1078:	27 b3       	in	r18, 0x17	; 23
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	01 80       	ldd	r0, Z+1	; 0x01
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_Initpin+0x1b0>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_Initpin+0x1ac>
    108a:	82 2b       	or	r24, r18
    108c:	87 bb       	out	0x17, r24	; 23
    108e:	17 c0       	rjmp	.+46     	; 0x10be <DIO_Initpin+0x1e8>
			case DIO_PORTC:	SET_BIT(DIO_PORTC_DDR_REG,config_ptr->dio_pin);	break;
    1090:	24 b3       	in	r18, 0x14	; 20
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	01 80       	ldd	r0, Z+1	; 0x01
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_Initpin+0x1c8>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_Initpin+0x1c4>
    10a2:	82 2b       	or	r24, r18
    10a4:	84 bb       	out	0x14, r24	; 20
    10a6:	0b c0       	rjmp	.+22     	; 0x10be <DIO_Initpin+0x1e8>
			case DIO_PORTD:	SET_BIT(DIO_PORTD_DDR_REG,config_ptr->dio_pin);	break;
    10a8:	21 b3       	in	r18, 0x11	; 17
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	01 80       	ldd	r0, Z+1	; 0x01
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_Initpin+0x1e0>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_Initpin+0x1dc>
    10ba:	82 2b       	or	r24, r18
    10bc:	81 bb       	out	0x11, r24	; 17
			default:			break;
		}
		
		if (config_ptr->dio_initial_value == DIO_HIGH)
    10be:	83 81       	ldd	r24, Z+3	; 0x03
    10c0:	81 11       	cpse	r24, r1
    10c2:	39 c0       	rjmp	.+114    	; 0x1136 <DIO_Initpin+0x260>
		{
			switch(config_ptr->dio_port)
    10c4:	80 81       	ld	r24, Z
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 f0       	breq	.+36     	; 0x10ee <DIO_Initpin+0x218>
    10ca:	28 f0       	brcs	.+10     	; 0x10d6 <DIO_Initpin+0x200>
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	d9 f0       	breq	.+54     	; 0x1106 <DIO_Initpin+0x230>
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	29 f1       	breq	.+74     	; 0x111e <DIO_Initpin+0x248>
    10d4:	08 95       	ret
			{
				
				case DIO_PORTA:	SET_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
    10d6:	2b b3       	in	r18, 0x1b	; 27
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	01 80       	ldd	r0, Z+1	; 0x01
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_Initpin+0x20e>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_Initpin+0x20a>
    10e8:	82 2b       	or	r24, r18
    10ea:	8b bb       	out	0x1b, r24	; 27
    10ec:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
    10ee:	28 b3       	in	r18, 0x18	; 24
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	01 80       	ldd	r0, Z+1	; 0x01
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_Initpin+0x226>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_Initpin+0x222>
    1100:	82 2b       	or	r24, r18
    1102:	88 bb       	out	0x18, r24	; 24
    1104:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
    1106:	25 b3       	in	r18, 0x15	; 21
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	01 80       	ldd	r0, Z+1	; 0x01
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_Initpin+0x23e>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_Initpin+0x23a>
    1118:	82 2b       	or	r24, r18
    111a:	85 bb       	out	0x15, r24	; 21
    111c:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
    111e:	22 b3       	in	r18, 0x12	; 18
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	01 80       	ldd	r0, Z+1	; 0x01
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_Initpin+0x256>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_Initpin+0x252>
    1130:	82 2b       	or	r24, r18
    1132:	82 bb       	out	0x12, r24	; 18
    1134:	08 95       	ret
			}
			
		}
		else
		{
			switch(config_ptr->dio_port)
    1136:	80 81       	ld	r24, Z
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	99 f0       	breq	.+38     	; 0x1162 <DIO_Initpin+0x28c>
    113c:	28 f0       	brcs	.+10     	; 0x1148 <DIO_Initpin+0x272>
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	e9 f0       	breq	.+58     	; 0x117c <DIO_Initpin+0x2a6>
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	41 f1       	breq	.+80     	; 0x1196 <DIO_Initpin+0x2c0>
    1146:	08 95       	ret
			{
				
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
    1148:	2b b3       	in	r18, 0x1b	; 27
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	01 80       	ldd	r0, Z+1	; 0x01
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_Initpin+0x280>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_Initpin+0x27c>
    115a:	80 95       	com	r24
    115c:	82 23       	and	r24, r18
    115e:	8b bb       	out	0x1b, r24	; 27
    1160:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
    1162:	28 b3       	in	r18, 0x18	; 24
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	01 80       	ldd	r0, Z+1	; 0x01
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_Initpin+0x29a>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_Initpin+0x296>
    1174:	80 95       	com	r24
    1176:	82 23       	and	r24, r18
    1178:	88 bb       	out	0x18, r24	; 24
    117a:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
    117c:	25 b3       	in	r18, 0x15	; 21
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	01 80       	ldd	r0, Z+1	; 0x01
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_Initpin+0x2b4>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_Initpin+0x2b0>
    118e:	80 95       	com	r24
    1190:	82 23       	and	r24, r18
    1192:	85 bb       	out	0x15, r24	; 21
    1194:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
    1196:	22 b3       	in	r18, 0x12	; 18
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	01 80       	ldd	r0, Z+1	; 0x01
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_Initpin+0x2ce>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_Initpin+0x2ca>
    11a8:	80 95       	com	r24
    11aa:	82 23       	and	r24, r18
    11ac:	82 bb       	out	0x12, r24	; 18
    11ae:	08 95       	ret

000011b0 <ICU_getValue>:
{
	//*Enable CTCA and CTCB interrupt  OCIE1A = 4, OCIE1B = 3*//*
	SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_OCIE1A_BIT);
	SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_OCIE1B_BIT);
	//*CTC mode WGM12 = 3*//*
	SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    11b0:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <ICU_g_Count>
    11b4:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <ICU_g_Count+0x1>
    11b8:	fc 01       	movw	r30, r24
    11ba:	31 83       	std	Z+1, r19	; 0x01
    11bc:	20 83       	st	Z, r18
    11be:	08 95       	ret

000011c0 <EXI_enablePIE>:
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <EXI_enablePIE+0x6>
    11c4:	75 c0       	rjmp	.+234    	; 0x12b0 <EXI_enablePIE+0xf0>
    11c6:	64 30       	cpi	r22, 0x04	; 4
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <EXI_enablePIE+0xc>
    11ca:	74 c0       	rjmp	.+232    	; 0x12b4 <EXI_enablePIE+0xf4>
    11cc:	9f b7       	in	r25, 0x3f	; 63
    11ce:	90 68       	ori	r25, 0x80	; 128
    11d0:	9f bf       	out	0x3f, r25	; 63
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	81 f1       	breq	.+96     	; 0x1236 <EXI_enablePIE+0x76>
    11d6:	20 f0       	brcs	.+8      	; 0x11e0 <EXI_enablePIE+0x20>
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	09 f4       	brne	.+2      	; 0x11de <EXI_enablePIE+0x1e>
    11dc:	57 c0       	rjmp	.+174    	; 0x128c <EXI_enablePIE+0xcc>
    11de:	6c c0       	rjmp	.+216    	; 0x12b8 <EXI_enablePIE+0xf8>
    11e0:	8b b7       	in	r24, 0x3b	; 59
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	8b bf       	out	0x3b, r24	; 59
    11e6:	61 30       	cpi	r22, 0x01	; 1
    11e8:	71 f0       	breq	.+28     	; 0x1206 <EXI_enablePIE+0x46>
    11ea:	28 f0       	brcs	.+10     	; 0x11f6 <EXI_enablePIE+0x36>
    11ec:	62 30       	cpi	r22, 0x02	; 2
    11ee:	99 f0       	breq	.+38     	; 0x1216 <EXI_enablePIE+0x56>
    11f0:	63 30       	cpi	r22, 0x03	; 3
    11f2:	c9 f0       	breq	.+50     	; 0x1226 <EXI_enablePIE+0x66>
    11f4:	63 c0       	rjmp	.+198    	; 0x12bc <EXI_enablePIE+0xfc>
    11f6:	85 b7       	in	r24, 0x35	; 53
    11f8:	8e 7f       	andi	r24, 0xFE	; 254
    11fa:	85 bf       	out	0x35, r24	; 53
    11fc:	85 b7       	in	r24, 0x35	; 53
    11fe:	8d 7f       	andi	r24, 0xFD	; 253
    1200:	85 bf       	out	0x35, r24	; 53
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	08 95       	ret
    1206:	85 b7       	in	r24, 0x35	; 53
    1208:	81 60       	ori	r24, 0x01	; 1
    120a:	85 bf       	out	0x35, r24	; 53
    120c:	85 b7       	in	r24, 0x35	; 53
    120e:	8d 7f       	andi	r24, 0xFD	; 253
    1210:	85 bf       	out	0x35, r24	; 53
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	08 95       	ret
    1216:	85 b7       	in	r24, 0x35	; 53
    1218:	8e 7f       	andi	r24, 0xFE	; 254
    121a:	85 bf       	out	0x35, r24	; 53
    121c:	85 b7       	in	r24, 0x35	; 53
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	85 bf       	out	0x35, r24	; 53
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	08 95       	ret
    1226:	85 b7       	in	r24, 0x35	; 53
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	85 bf       	out	0x35, r24	; 53
    122c:	85 b7       	in	r24, 0x35	; 53
    122e:	82 60       	ori	r24, 0x02	; 2
    1230:	85 bf       	out	0x35, r24	; 53
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	08 95       	ret
    1236:	8b b7       	in	r24, 0x3b	; 59
    1238:	80 68       	ori	r24, 0x80	; 128
    123a:	8b bf       	out	0x3b, r24	; 59
    123c:	61 30       	cpi	r22, 0x01	; 1
    123e:	71 f0       	breq	.+28     	; 0x125c <EXI_enablePIE+0x9c>
    1240:	28 f0       	brcs	.+10     	; 0x124c <EXI_enablePIE+0x8c>
    1242:	62 30       	cpi	r22, 0x02	; 2
    1244:	99 f0       	breq	.+38     	; 0x126c <EXI_enablePIE+0xac>
    1246:	63 30       	cpi	r22, 0x03	; 3
    1248:	c9 f0       	breq	.+50     	; 0x127c <EXI_enablePIE+0xbc>
    124a:	3a c0       	rjmp	.+116    	; 0x12c0 <EXI_enablePIE+0x100>
    124c:	85 b7       	in	r24, 0x35	; 53
    124e:	8b 7f       	andi	r24, 0xFB	; 251
    1250:	85 bf       	out	0x35, r24	; 53
    1252:	85 b7       	in	r24, 0x35	; 53
    1254:	87 7f       	andi	r24, 0xF7	; 247
    1256:	85 bf       	out	0x35, r24	; 53
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	08 95       	ret
    125c:	85 b7       	in	r24, 0x35	; 53
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	85 bf       	out	0x35, r24	; 53
    1262:	85 b7       	in	r24, 0x35	; 53
    1264:	87 7f       	andi	r24, 0xF7	; 247
    1266:	85 bf       	out	0x35, r24	; 53
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	08 95       	ret
    126c:	85 b7       	in	r24, 0x35	; 53
    126e:	8b 7f       	andi	r24, 0xFB	; 251
    1270:	85 bf       	out	0x35, r24	; 53
    1272:	85 b7       	in	r24, 0x35	; 53
    1274:	88 60       	ori	r24, 0x08	; 8
    1276:	85 bf       	out	0x35, r24	; 53
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	08 95       	ret
    127c:	85 b7       	in	r24, 0x35	; 53
    127e:	84 60       	ori	r24, 0x04	; 4
    1280:	85 bf       	out	0x35, r24	; 53
    1282:	85 b7       	in	r24, 0x35	; 53
    1284:	88 60       	ori	r24, 0x08	; 8
    1286:	85 bf       	out	0x35, r24	; 53
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	08 95       	ret
    128c:	8b b7       	in	r24, 0x3b	; 59
    128e:	80 62       	ori	r24, 0x20	; 32
    1290:	8b bf       	out	0x3b, r24	; 59
    1292:	62 30       	cpi	r22, 0x02	; 2
    1294:	19 f0       	breq	.+6      	; 0x129c <EXI_enablePIE+0xdc>
    1296:	63 30       	cpi	r22, 0x03	; 3
    1298:	31 f0       	breq	.+12     	; 0x12a6 <EXI_enablePIE+0xe6>
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <EXI_enablePIE+0x104>
    129c:	84 b7       	in	r24, 0x34	; 52
    129e:	8f 7b       	andi	r24, 0xBF	; 191
    12a0:	84 bf       	out	0x34, r24	; 52
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	08 95       	ret
    12a6:	84 b7       	in	r24, 0x34	; 52
    12a8:	80 64       	ori	r24, 0x40	; 64
    12aa:	84 bf       	out	0x34, r24	; 52
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	08 95       	ret
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	08 95       	ret
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	08 95       	ret
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	08 95       	ret
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	08 95       	ret
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	08 95       	ret

000012c8 <TIMER_tmr1NormalModeInit>:
    12c8:	88 23       	and	r24, r24
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <TIMER_tmr1NormalModeInit+0xa>
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	d9 f0       	breq	.+54     	; 0x1306 <TIMER_tmr1NormalModeInit+0x3e>
    12d0:	2e c0       	rjmp	.+92     	; 0x132e <TIMER_tmr1NormalModeInit+0x66>
    12d2:	8f b5       	in	r24, 0x2f	; 47
    12d4:	8e 7f       	andi	r24, 0xFE	; 254
    12d6:	8f bd       	out	0x2f, r24	; 47
    12d8:	8f b5       	in	r24, 0x2f	; 47
    12da:	8d 7f       	andi	r24, 0xFD	; 253
    12dc:	8f bd       	out	0x2f, r24	; 47
    12de:	8e b5       	in	r24, 0x2e	; 46
    12e0:	87 7f       	andi	r24, 0xF7	; 247
    12e2:	8e bd       	out	0x2e, r24	; 46
    12e4:	8e b5       	in	r24, 0x2e	; 46
    12e6:	8f 7e       	andi	r24, 0xEF	; 239
    12e8:	8e bd       	out	0x2e, r24	; 46
    12ea:	8f b5       	in	r24, 0x2f	; 47
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	8f bd       	out	0x2f, r24	; 47
    12f0:	8f b5       	in	r24, 0x2f	; 47
    12f2:	84 60       	ori	r24, 0x04	; 4
    12f4:	8f bd       	out	0x2f, r24	; 47
    12f6:	8f b7       	in	r24, 0x3f	; 63
    12f8:	80 68       	ori	r24, 0x80	; 128
    12fa:	8f bf       	out	0x3f, r24	; 63
    12fc:	89 b7       	in	r24, 0x39	; 57
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	89 bf       	out	0x39, r24	; 57
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	08 95       	ret
    1306:	8f b5       	in	r24, 0x2f	; 47
    1308:	8e 7f       	andi	r24, 0xFE	; 254
    130a:	8f bd       	out	0x2f, r24	; 47
    130c:	8f b5       	in	r24, 0x2f	; 47
    130e:	8d 7f       	andi	r24, 0xFD	; 253
    1310:	8f bd       	out	0x2f, r24	; 47
    1312:	8e b5       	in	r24, 0x2e	; 46
    1314:	87 7f       	andi	r24, 0xF7	; 247
    1316:	8e bd       	out	0x2e, r24	; 46
    1318:	8e b5       	in	r24, 0x2e	; 46
    131a:	8f 7e       	andi	r24, 0xEF	; 239
    131c:	8e bd       	out	0x2e, r24	; 46
    131e:	8f b5       	in	r24, 0x2f	; 47
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	8f bd       	out	0x2f, r24	; 47
    1324:	8f b5       	in	r24, 0x2f	; 47
    1326:	84 60       	ori	r24, 0x04	; 4
    1328:	8f bd       	out	0x2f, r24	; 47
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	08 95       	ret
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	08 95       	ret

00001332 <TIMER_tmr1Start>:
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1Start(Uint16_t u16_a_prescaler)
{
	//select the required prescaler value
	switch(u16_a_prescaler)
    1332:	80 34       	cpi	r24, 0x40	; 64
    1334:	91 05       	cpc	r25, r1
    1336:	29 f1       	breq	.+74     	; 0x1382 <TIMER_tmr1Start+0x50>
    1338:	30 f4       	brcc	.+12     	; 0x1346 <TIMER_tmr1Start+0x14>
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	91 05       	cpc	r25, r1
    133e:	59 f0       	breq	.+22     	; 0x1356 <TIMER_tmr1Start+0x24>
    1340:	08 97       	sbiw	r24, 0x08	; 8
    1342:	a1 f0       	breq	.+40     	; 0x136c <TIMER_tmr1Start+0x3a>
    1344:	3f c0       	rjmp	.+126    	; 0x13c4 <TIMER_tmr1Start+0x92>
    1346:	81 15       	cp	r24, r1
    1348:	21 e0       	ldi	r18, 0x01	; 1
    134a:	92 07       	cpc	r25, r18
    134c:	29 f1       	breq	.+74     	; 0x1398 <TIMER_tmr1Start+0x66>
    134e:	81 15       	cp	r24, r1
    1350:	94 40       	sbci	r25, 0x04	; 4
    1352:	69 f1       	breq	.+90     	; 0x13ae <TIMER_tmr1Start+0x7c>
    1354:	37 c0       	rjmp	.+110    	; 0x13c4 <TIMER_tmr1Start+0x92>
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1356:	8e b5       	in	r24, 0x2e	; 46
    1358:	8d 7f       	andi	r24, 0xFD	; 253
    135a:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    135c:	8e b5       	in	r24, 0x2e	; 46
    135e:	8b 7f       	andi	r24, 0xFB	; 251
    1360:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1362:	8e b5       	in	r24, 0x2e	; 46
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1368:	80 e0       	ldi	r24, 0x00	; 0
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    136a:	08 95       	ret
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    136c:	8e b5       	in	r24, 0x2e	; 46
    136e:	8e 7f       	andi	r24, 0xFE	; 254
    1370:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    1372:	8e b5       	in	r24, 0x2e	; 46
    1374:	8b 7f       	andi	r24, 0xFB	; 251
    1376:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1378:	8e b5       	in	r24, 0x2e	; 46
    137a:	82 60       	ori	r24, 0x02	; 2
    137c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    137e:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		break;
    1380:	08 95       	ret
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    1382:	8e b5       	in	r24, 0x2e	; 46
    1384:	8b 7f       	andi	r24, 0xFB	; 251
    1386:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1388:	8e b5       	in	r24, 0x2e	; 46
    138a:	82 60       	ori	r24, 0x02	; 2
    138c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    138e:	8e b5       	in	r24, 0x2e	; 46
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1394:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    1396:	08 95       	ret
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1398:	8e b5       	in	r24, 0x2e	; 46
    139a:	8d 7f       	andi	r24, 0xFD	; 253
    139c:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    139e:	8e b5       	in	r24, 0x2e	; 46
    13a0:	8e 7f       	andi	r24, 0xFE	; 254
    13a2:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    13a4:	8e b5       	in	r24, 0x2e	; 46
    13a6:	84 60       	ori	r24, 0x04	; 4
    13a8:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		break;
    13ac:	08 95       	ret
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    13ae:	8e b5       	in	r24, 0x2e	; 46
    13b0:	8d 7f       	andi	r24, 0xFD	; 253
    13b2:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    13b4:	8e b5       	in	r24, 0x2e	; 46
    13b6:	84 60       	ori	r24, 0x04	; 4
    13b8:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    13ba:	8e b5       	in	r24, 0x2e	; 46
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	8e bd       	out	0x2e, r24	; 46
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    13c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    13c2:	08 95       	ret
	default:
		return TIMER_ERROR;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    13c6:	08 95       	ret

000013c8 <TIMER_tmr1Stop>:

void TIMER_tmr1Stop(void)
{
 //Stop the timer by clearing the prescaler

	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    13c8:	8e b5       	in	r24, 0x2e	; 46
    13ca:	8e 7f       	andi	r24, 0xFE	; 254
    13cc:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    13ce:	8e b5       	in	r24, 0x2e	; 46
    13d0:	8d 7f       	andi	r24, 0xFD	; 253
    13d2:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    13d4:	8e b5       	in	r24, 0x2e	; 46
    13d6:	8b 7f       	andi	r24, 0xFB	; 251
    13d8:	8e bd       	out	0x2e, r24	; 46
    13da:	08 95       	ret

000013dc <ICU_RisingEdgeCapture>:
 * @param[in] void.
 *
 * @return void.
 */
void ICU_RisingEdgeCapture(void)
{
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
	TIMER_tmr1NormalModeInit(ST_g_softwareICU->timer1_ISR);
    13e0:	c9 e8       	ldi	r28, 0x89	; 137
    13e2:	d0 e0       	ldi	r29, 0x00	; 0
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <TIMER_tmr1NormalModeInit>
	TIMER_tmr1Stop();
    13ea:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TIMER_tmr1Stop>
	EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_firstSenseControl);
    13ee:	69 81       	ldd	r22, Y+1	; 0x01
    13f0:	88 81       	ld	r24, Y
    13f2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <EXI_enablePIE>
	ICU_g_edgeFlag = RISING;
    13f6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ICU_g_edgeFlag>
	TIMER_tmr1Start(1);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 99 09 	call	0x1332	; 0x1332 <TIMER_tmr1Start>
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <__vector_1>:
	
/**
 * ISR function implementation of INT0
 * */
ISR(EXT_INT_0)
{
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	2f 93       	push	r18
    1414:	3f 93       	push	r19
    1416:	4f 93       	push	r20
    1418:	5f 93       	push	r21
    141a:	6f 93       	push	r22
    141c:	7f 93       	push	r23
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
    /* Save the current value of the timer/counter register  */
	TIMER_g_timer1RegValue = TMR_U16_TCNT1_REG;
    142a:	8c b5       	in	r24, 0x2c	; 44
    142c:	9d b5       	in	r25, 0x2d	; 45
    142e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <TIMER_g_timer1RegValue+0x1>
    1432:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TIMER_g_timer1RegValue>
	if(ICU_g_edgeFlag == RISING)
    1436:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ICU_g_edgeFlag>
    143a:	21 11       	cpse	r18, r1
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <__vector_1+0x5e>
	{
		ICU_g_ValueRising = TIMER_g_timer1RegValue;
    143e:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <ICU_g_ValueRising+0x1>
    1442:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <ICU_g_ValueRising>
		/* Clear Timer counter */
		TMR_U16_TCNT1_REG = 0;
    1446:	1d bc       	out	0x2d, r1	; 45
    1448:	1c bc       	out	0x2c, r1	; 44
		/* Set the external interrupt event at falling edge.*/
		EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_secondSenseControl );
    144a:	e9 e8       	ldi	r30, 0x89	; 137
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	62 81       	ldd	r22, Z+2	; 0x02
    1450:	80 81       	ld	r24, Z
    1452:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <EXI_enablePIE>
		/* Clear Timer overflow count */
		u32_g_timer1Overflow = 0;
    1456:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <u32_g_timer1Overflow+0x1>
    145a:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <u32_g_timer1Overflow>
		ICU_g_edgeFlag = FALLING;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ICU_g_edgeFlag>
    1464:	13 c0       	rjmp	.+38     	; 0x148c <__vector_1+0x84>
	}
	else
	{
		ICU_g_ValueFalling = TIMER_g_timer1RegValue;
    1466:	90 93 fc 00 	sts	0x00FC, r25	; 0x8000fc <ICU_g_ValueFalling+0x1>
    146a:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <ICU_g_ValueFalling>
		ICU_g_Count = TIMER_g_timer1RegValue + (65535 * u32_g_timer1Overflow);
    146e:	20 91 ff 00 	lds	r18, 0x00FF	; 0x8000ff <u32_g_timer1Overflow>
    1472:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <u32_g_timer1Overflow+0x1>
    1476:	82 1b       	sub	r24, r18
    1478:	93 0b       	sbc	r25, r19
    147a:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <ICU_g_Count+0x1>
    147e:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <ICU_g_Count>
		/* Stop timer1 */
		TIMER_tmr1Stop();
    1482:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TIMER_tmr1Stop>
		ICU_g_flag = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <ICU_g_flag>
	}

}	
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	bf 91       	pop	r27
    1492:	af 91       	pop	r26
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	7f 91       	pop	r23
    149a:	6f 91       	pop	r22
    149c:	5f 91       	pop	r21
    149e:	4f 91       	pop	r20
    14a0:	3f 91       	pop	r19
    14a2:	2f 91       	pop	r18
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <__vector_9>:
		
ISR(TIM1_OVF_INT)
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	8f 93       	push	r24
    14ba:	9f 93       	push	r25
	u32_g_timer1Overflow++;
    14bc:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <u32_g_timer1Overflow>
    14c0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <u32_g_timer1Overflow+0x1>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <u32_g_timer1Overflow+0x1>
    14ca:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <u32_g_timer1Overflow>
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
    14dc:	8f b7       	in	r24, 0x3f	; 63
    14de:	80 68       	ori	r24, 0x80	; 128
    14e0:	8f bf       	out	0x3f, r24	; 63
    14e2:	08 95       	ret

000014e4 <TIMER0_PWM_ExecutedFunction>:
	u8_g_OnTime =  ((u8_a_dutyCycle * HALF_REG_SIZE)/100)-ERROR_HANDLER;
	u8_g_OffTime = (((100 -u8_a_dutyCycle) * HALF_REG_SIZE)/100)-ERROR_HANDLER;
	TCNT0 = REG_SIZE - u8_g_OnTime ;
	TIMER0_start();
	
}
    14e4:	cf 93       	push	r28
    14e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u8_g_on_off_state>
    14ea:	88 23       	and	r24, r24
    14ec:	a1 f0       	breq	.+40     	; 0x1516 <TIMER0_PWM_ExecutedFunction+0x32>
    14ee:	c0 e0       	ldi	r28, 0x00	; 0
    14f0:	2e c0       	rjmp	.+92     	; 0x154e <TIMER0_PWM_ExecutedFunction+0x6a>
    14f2:	ec 2f       	mov	r30, r28
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	cf 01       	movw	r24, r30
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	e8 0f       	add	r30, r24
    1502:	f9 1f       	adc	r31, r25
    1504:	eb 51       	subi	r30, 0x1B	; 27
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	61 81       	ldd	r22, Z+1	; 0x01
    150c:	80 81       	ld	r24, Z
    150e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_WritePin>
    1512:	cf 5f       	subi	r28, 0xFF	; 255
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <TIMER0_PWM_ExecutedFunction+0x34>
    1516:	c0 e0       	ldi	r28, 0x00	; 0
    1518:	c2 30       	cpi	r28, 0x02	; 2
    151a:	58 f3       	brcs	.-42     	; 0x14f2 <TIMER0_PWM_ExecutedFunction+0xe>
    151c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u8_g_OffTime>
    1520:	81 95       	neg	r24
    1522:	82 bf       	out	0x32, r24	; 50
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <u8_g_on_off_state>
    152a:	19 c0       	rjmp	.+50     	; 0x155e <TIMER0_PWM_ExecutedFunction+0x7a>
    152c:	ec 2f       	mov	r30, r28
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	cf 01       	movw	r24, r30
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	e8 0f       	add	r30, r24
    153c:	f9 1f       	adc	r31, r25
    153e:	eb 51       	subi	r30, 0x1B	; 27
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	61 81       	ldd	r22, Z+1	; 0x01
    1546:	80 81       	ld	r24, Z
    1548:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_WritePin>
    154c:	cf 5f       	subi	r28, 0xFF	; 255
    154e:	c2 30       	cpi	r28, 0x02	; 2
    1550:	68 f3       	brcs	.-38     	; 0x152c <TIMER0_PWM_ExecutedFunction+0x48>
    1552:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u8_g_OnTime>
    1556:	81 95       	neg	r24
    1558:	82 bf       	out	0x32, r24	; 50
    155a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <u8_g_on_off_state>
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <__vector_11>:
	}
}


ISR(TIM0_OVF_INT)
{
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	4f 93       	push	r20
    1572:	5f 93       	push	r21
    1574:	6f 93       	push	r22
    1576:	7f 93       	push	r23
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	ef 93       	push	r30
    1582:	ff 93       	push	r31
	TIMER0_PWM_ExecutedFunction();
    1584:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <TIMER0_PWM_ExecutedFunction>
}
    1588:	ff 91       	pop	r31
    158a:	ef 91       	pop	r30
    158c:	bf 91       	pop	r27
    158e:	af 91       	pop	r26
    1590:	9f 91       	pop	r25
    1592:	8f 91       	pop	r24
    1594:	7f 91       	pop	r23
    1596:	6f 91       	pop	r22
    1598:	5f 91       	pop	r21
    159a:	4f 91       	pop	r20
    159c:	3f 91       	pop	r19
    159e:	2f 91       	pop	r18
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <TIMER_TMR2NormalModeInit>:
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
        return TIMER_OK;
    } else {
        return TIMER_ERROR;
    }
}
    15aa:	88 23       	and	r24, r24
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <TIMER_TMR2NormalModeInit+0xa>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	79 f0       	breq	.+30     	; 0x15d0 <TIMER_TMR2NormalModeInit+0x26>
    15b2:	16 c0       	rjmp	.+44     	; 0x15e0 <TIMER_TMR2NormalModeInit+0x36>
    15b4:	85 b5       	in	r24, 0x25	; 37
    15b6:	8f 7b       	andi	r24, 0xBF	; 191
    15b8:	85 bd       	out	0x25, r24	; 37
    15ba:	85 b5       	in	r24, 0x25	; 37
    15bc:	87 7f       	andi	r24, 0xF7	; 247
    15be:	85 bd       	out	0x25, r24	; 37
    15c0:	8f b7       	in	r24, 0x3f	; 63
    15c2:	80 68       	ori	r24, 0x80	; 128
    15c4:	8f bf       	out	0x3f, r24	; 63
    15c6:	89 b7       	in	r24, 0x39	; 57
    15c8:	80 64       	ori	r24, 0x40	; 64
    15ca:	89 bf       	out	0x39, r24	; 57
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	08 95       	ret
    15d0:	85 b5       	in	r24, 0x25	; 37
    15d2:	8f 7b       	andi	r24, 0xBF	; 191
    15d4:	85 bd       	out	0x25, r24	; 37
    15d6:	85 b5       	in	r24, 0x25	; 37
    15d8:	87 7f       	andi	r24, 0xF7	; 247
    15da:	85 bd       	out	0x25, r24	; 37
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	08 95       	ret
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	08 95       	ret

000015e4 <TIMER_TMR2Start>:
    15e4:	80 34       	cpi	r24, 0x40	; 64
    15e6:	91 05       	cpc	r25, r1
    15e8:	c1 f1       	breq	.+112    	; 0x165a <TIMER_TMR2Start+0x76>
    15ea:	50 f4       	brcc	.+20     	; 0x1600 <TIMER_TMR2Start+0x1c>
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	91 05       	cpc	r25, r1
    15f0:	01 f1       	breq	.+64     	; 0x1632 <TIMER_TMR2Start+0x4e>
    15f2:	80 32       	cpi	r24, 0x20	; 32
    15f4:	91 05       	cpc	r25, r1
    15f6:	41 f1       	breq	.+80     	; 0x1648 <TIMER_TMR2Start+0x64>
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	09 f0       	breq	.+2      	; 0x15fe <TIMER_TMR2Start+0x1a>
    15fc:	58 c0       	rjmp	.+176    	; 0x16ae <TIMER_TMR2Start+0xca>
    15fe:	0e c0       	rjmp	.+28     	; 0x161c <TIMER_TMR2Start+0x38>
    1600:	81 15       	cp	r24, r1
    1602:	21 e0       	ldi	r18, 0x01	; 1
    1604:	92 07       	cpc	r25, r18
    1606:	e9 f1       	breq	.+122    	; 0x1682 <TIMER_TMR2Start+0x9e>
    1608:	81 15       	cp	r24, r1
    160a:	24 e0       	ldi	r18, 0x04	; 4
    160c:	92 07       	cpc	r25, r18
    160e:	09 f4       	brne	.+2      	; 0x1612 <TIMER_TMR2Start+0x2e>
    1610:	43 c0       	rjmp	.+134    	; 0x1698 <TIMER_TMR2Start+0xb4>
    1612:	80 38       	cpi	r24, 0x80	; 128
    1614:	91 05       	cpc	r25, r1
    1616:	09 f0       	breq	.+2      	; 0x161a <TIMER_TMR2Start+0x36>
    1618:	4a c0       	rjmp	.+148    	; 0x16ae <TIMER_TMR2Start+0xca>
    161a:	28 c0       	rjmp	.+80     	; 0x166c <TIMER_TMR2Start+0x88>
    161c:	85 b5       	in	r24, 0x25	; 37
    161e:	8d 7f       	andi	r24, 0xFD	; 253
    1620:	85 bd       	out	0x25, r24	; 37
    1622:	85 b5       	in	r24, 0x25	; 37
    1624:	8b 7f       	andi	r24, 0xFB	; 251
    1626:	85 bd       	out	0x25, r24	; 37
    1628:	85 b5       	in	r24, 0x25	; 37
    162a:	81 60       	ori	r24, 0x01	; 1
    162c:	85 bd       	out	0x25, r24	; 37
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	08 95       	ret
    1632:	85 b5       	in	r24, 0x25	; 37
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	85 bd       	out	0x25, r24	; 37
    1638:	85 b5       	in	r24, 0x25	; 37
    163a:	8b 7f       	andi	r24, 0xFB	; 251
    163c:	85 bd       	out	0x25, r24	; 37
    163e:	85 b5       	in	r24, 0x25	; 37
    1640:	82 60       	ori	r24, 0x02	; 2
    1642:	85 bd       	out	0x25, r24	; 37
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	08 95       	ret
    1648:	85 b5       	in	r24, 0x25	; 37
    164a:	8b 7f       	andi	r24, 0xFB	; 251
    164c:	85 bd       	out	0x25, r24	; 37
    164e:	85 b5       	in	r24, 0x25	; 37
    1650:	82 60       	ori	r24, 0x02	; 2
    1652:	85 bd       	out	0x25, r24	; 37
    1654:	85 b5       	in	r24, 0x25	; 37
    1656:	81 60       	ori	r24, 0x01	; 1
    1658:	85 bd       	out	0x25, r24	; 37
    165a:	85 b5       	in	r24, 0x25	; 37
    165c:	84 60       	ori	r24, 0x04	; 4
    165e:	85 bd       	out	0x25, r24	; 37
    1660:	85 b5       	in	r24, 0x25	; 37
    1662:	8d 7f       	andi	r24, 0xFD	; 253
    1664:	85 bd       	out	0x25, r24	; 37
    1666:	85 b5       	in	r24, 0x25	; 37
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	85 bd       	out	0x25, r24	; 37
    166c:	85 b5       	in	r24, 0x25	; 37
    166e:	8b 7f       	andi	r24, 0xFB	; 251
    1670:	85 bd       	out	0x25, r24	; 37
    1672:	85 b5       	in	r24, 0x25	; 37
    1674:	8d 7f       	andi	r24, 0xFD	; 253
    1676:	85 bd       	out	0x25, r24	; 37
    1678:	85 b5       	in	r24, 0x25	; 37
    167a:	81 60       	ori	r24, 0x01	; 1
    167c:	85 bd       	out	0x25, r24	; 37
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	08 95       	ret
    1682:	85 b5       	in	r24, 0x25	; 37
    1684:	82 60       	ori	r24, 0x02	; 2
    1686:	85 bd       	out	0x25, r24	; 37
    1688:	85 b5       	in	r24, 0x25	; 37
    168a:	8e 7f       	andi	r24, 0xFE	; 254
    168c:	85 bd       	out	0x25, r24	; 37
    168e:	85 b5       	in	r24, 0x25	; 37
    1690:	84 60       	ori	r24, 0x04	; 4
    1692:	85 bd       	out	0x25, r24	; 37
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	08 95       	ret
    1698:	85 b5       	in	r24, 0x25	; 37
    169a:	82 60       	ori	r24, 0x02	; 2
    169c:	85 bd       	out	0x25, r24	; 37
    169e:	85 b5       	in	r24, 0x25	; 37
    16a0:	84 60       	ori	r24, 0x04	; 4
    16a2:	85 bd       	out	0x25, r24	; 37
    16a4:	85 b5       	in	r24, 0x25	; 37
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	85 bd       	out	0x25, r24	; 37
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	08 95       	ret
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	08 95       	ret

000016b2 <TMR_intDelay_ms>:
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	bc 01       	movw	r22, r24
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__floatunsisf>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divsf3>
    16d0:	6b 01       	movw	r12, r22
    16d2:	7c 01       	movw	r14, r24
    16d4:	27 e3       	ldi	r18, 0x37	; 55
    16d6:	37 e3       	ldi	r19, 0x37	; 55
    16d8:	46 e8       	ldi	r20, 0x86	; 134
    16da:	56 e4       	ldi	r21, 0x46	; 70
    16dc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__gesf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	0c f4       	brge	.+2      	; 0x16e6 <TMR_intDelay_ms+0x34>
    16e4:	7c c0       	rjmp	.+248    	; 0x17de <TMR_intDelay_ms+0x12c>
    16e6:	15 bc       	out	0x25, r1	; 37
    16e8:	2d eb       	ldi	r18, 0xBD	; 189
    16ea:	37 e3       	ldi	r19, 0x37	; 55
    16ec:	46 e8       	ldi	r20, 0x86	; 134
    16ee:	5e e3       	ldi	r21, 0x3E	; 62
    16f0:	c7 01       	movw	r24, r14
    16f2:	b6 01       	movw	r22, r12
    16f4:	0e 94 be 0c 	call	0x197c	; 0x197c <__cmpsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	c4 f4       	brge	.+48     	; 0x172c <TMR_intDelay_ms+0x7a>
    16fc:	a7 01       	movw	r20, r14
    16fe:	96 01       	movw	r18, r12
    1700:	6d eb       	ldi	r22, 0xBD	; 189
    1702:	77 e3       	ldi	r23, 0x37	; 55
    1704:	86 e8       	ldi	r24, 0x86	; 134
    1706:	9e e3       	ldi	r25, 0x3E	; 62
    1708:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__subsf3>
    170c:	2d eb       	ldi	r18, 0xBD	; 189
    170e:	37 e3       	ldi	r19, 0x37	; 55
    1710:	46 e8       	ldi	r20, 0x86	; 134
    1712:	5a e3       	ldi	r21, 0x3A	; 58
    1714:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divsf3>
    1718:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
    171c:	64 bd       	out	0x24, r22	; 36
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <u16_g_overflow2Numbers+0x1>
    1726:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <u16_g_overflow2Numbers>
    172a:	4f c0       	rjmp	.+158    	; 0x17ca <TMR_intDelay_ms+0x118>
    172c:	2d eb       	ldi	r18, 0xBD	; 189
    172e:	37 e3       	ldi	r19, 0x37	; 55
    1730:	46 e8       	ldi	r20, 0x86	; 134
    1732:	5e e3       	ldi	r21, 0x3E	; 62
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	0e 94 be 0c 	call	0x197c	; 0x197c <__cmpsf2>
    173c:	81 11       	cpse	r24, r1
    173e:	08 c0       	rjmp	.+16     	; 0x1750 <TMR_intDelay_ms+0x9e>
    1740:	14 bc       	out	0x24, r1	; 36
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <u16_g_overflow2Numbers+0x1>
    174a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <u16_g_overflow2Numbers>
    174e:	3d c0       	rjmp	.+122    	; 0x17ca <TMR_intDelay_ms+0x118>
    1750:	2d eb       	ldi	r18, 0xBD	; 189
    1752:	37 e3       	ldi	r19, 0x37	; 55
    1754:	46 e8       	ldi	r20, 0x86	; 134
    1756:	5e e3       	ldi	r21, 0x3E	; 62
    1758:	c7 01       	movw	r24, r14
    175a:	b6 01       	movw	r22, r12
    175c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divsf3>
    1760:	0e 94 a7 0c 	call	0x194e	; 0x194e <ceil>
    1764:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
    1768:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <u16_g_overflow2Numbers+0x1>
    176c:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <u16_g_overflow2Numbers>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__floatunsisf>
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e8       	ldi	r20, 0x80	; 128
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__subsf3>
    1784:	2d eb       	ldi	r18, 0xBD	; 189
    1786:	37 e3       	ldi	r19, 0x37	; 55
    1788:	46 e8       	ldi	r20, 0x86	; 134
    178a:	5e e3       	ldi	r21, 0x3E	; 62
    178c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__mulsf3>
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	c7 01       	movw	r24, r14
    1796:	b6 01       	movw	r22, r12
    1798:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__subsf3>
    179c:	2d eb       	ldi	r18, 0xBD	; 189
    179e:	37 e3       	ldi	r19, 0x37	; 55
    17a0:	46 e8       	ldi	r20, 0x86	; 134
    17a2:	5a e3       	ldi	r21, 0x3A	; 58
    17a4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divsf3>
    17a8:	9b 01       	movw	r18, r22
    17aa:	ac 01       	movw	r20, r24
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	80 e8       	ldi	r24, 0x80	; 128
    17b2:	93 e4       	ldi	r25, 0x43	; 67
    17b4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__subsf3>
    17b8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
    17bc:	64 bd       	out	0x24, r22	; 36
    17be:	84 b5       	in	r24, 0x24	; 36
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <u16_g_tcnt2InitialVal+0x1>
    17c6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <u16_g_tcnt2InitialVal>
    17ca:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <u16_g_overflow2Ticks+0x1>
    17ce:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <u16_g_overflow2Ticks>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	94 e0       	ldi	r25, 0x04	; 4
    17d6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <TIMER_TMR2Start>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <TMR_intDelay_ms+0x12e>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	08 95       	ret

000017ea <TMR_TMR2Stop>:
    17ea:	85 b5       	in	r24, 0x25	; 37
    17ec:	8e 7f       	andi	r24, 0xFE	; 254
    17ee:	85 bd       	out	0x25, r24	; 37
    17f0:	85 b5       	in	r24, 0x25	; 37
    17f2:	8d 7f       	andi	r24, 0xFD	; 253
    17f4:	85 bd       	out	0x25, r24	; 37
    17f6:	85 b5       	in	r24, 0x25	; 37
    17f8:	8b 7f       	andi	r24, 0xFB	; 251
    17fa:	85 bd       	out	0x25, r24	; 37
    17fc:	08 95       	ret

000017fe <__vector_5>:
 */
//__attribute__((optimize("O0")))
//ISR(TMR_ovfVect)

ISR(TIM2_OVF_INT)
{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
	u16_g_overflow2Ticks++;
    1820:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <u16_g_overflow2Ticks>
    1824:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <u16_g_overflow2Ticks+0x1>
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <u16_g_overflow2Ticks+0x1>
    182e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <u16_g_overflow2Ticks>
	//TMR_U8_TCNT2_REG = u16_g_tcnt2InitialVal;
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers )
    1832:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <u16_g_overflow2Numbers>
    1836:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <u16_g_overflow2Numbers+0x1>
    183a:	82 17       	cp	r24, r18
    183c:	93 07       	cpc	r25, r19
    183e:	48 f0       	brcs	.+18     	; 0x1852 <__vector_5+0x54>
	{
		u16_g_overflow2Ticks = 0;
    1840:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <u16_g_overflow2Ticks+0x1>
    1844:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <u16_g_overflow2Ticks>
		u8_g_timeOut = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <u8_g_timeOut>
		TMR_TMR2Stop();
    184e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <TMR_TMR2Stop>
	}
}
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__subsf3>:
    1874:	50 58       	subi	r21, 0x80	; 128

00001876 <__addsf3>:
    1876:	bb 27       	eor	r27, r27
    1878:	aa 27       	eor	r26, r26
    187a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__addsf3x>
    187e:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_round>
    1882:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_pscA>
    1886:	38 f0       	brcs	.+14     	; 0x1896 <__addsf3+0x20>
    1888:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_pscB>
    188c:	20 f0       	brcs	.+8      	; 0x1896 <__addsf3+0x20>
    188e:	39 f4       	brne	.+14     	; 0x189e <__addsf3+0x28>
    1890:	9f 3f       	cpi	r25, 0xFF	; 255
    1892:	19 f4       	brne	.+6      	; 0x189a <__addsf3+0x24>
    1894:	26 f4       	brtc	.+8      	; 0x189e <__addsf3+0x28>
    1896:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__fp_nan>
    189a:	0e f4       	brtc	.+2      	; 0x189e <__addsf3+0x28>
    189c:	e0 95       	com	r30
    189e:	e7 fb       	bst	r30, 7
    18a0:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_inf>

000018a4 <__addsf3x>:
    18a4:	e9 2f       	mov	r30, r25
    18a6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_split3>
    18aa:	58 f3       	brcs	.-42     	; 0x1882 <__addsf3+0xc>
    18ac:	ba 17       	cp	r27, r26
    18ae:	62 07       	cpc	r22, r18
    18b0:	73 07       	cpc	r23, r19
    18b2:	84 07       	cpc	r24, r20
    18b4:	95 07       	cpc	r25, r21
    18b6:	20 f0       	brcs	.+8      	; 0x18c0 <__addsf3x+0x1c>
    18b8:	79 f4       	brne	.+30     	; 0x18d8 <__addsf3x+0x34>
    18ba:	a6 f5       	brtc	.+104    	; 0x1924 <__addsf3x+0x80>
    18bc:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_zero>
    18c0:	0e f4       	brtc	.+2      	; 0x18c4 <__addsf3x+0x20>
    18c2:	e0 95       	com	r30
    18c4:	0b 2e       	mov	r0, r27
    18c6:	ba 2f       	mov	r27, r26
    18c8:	a0 2d       	mov	r26, r0
    18ca:	0b 01       	movw	r0, r22
    18cc:	b9 01       	movw	r22, r18
    18ce:	90 01       	movw	r18, r0
    18d0:	0c 01       	movw	r0, r24
    18d2:	ca 01       	movw	r24, r20
    18d4:	a0 01       	movw	r20, r0
    18d6:	11 24       	eor	r1, r1
    18d8:	ff 27       	eor	r31, r31
    18da:	59 1b       	sub	r21, r25
    18dc:	99 f0       	breq	.+38     	; 0x1904 <__addsf3x+0x60>
    18de:	59 3f       	cpi	r21, 0xF9	; 249
    18e0:	50 f4       	brcc	.+20     	; 0x18f6 <__addsf3x+0x52>
    18e2:	50 3e       	cpi	r21, 0xE0	; 224
    18e4:	68 f1       	brcs	.+90     	; 0x1940 <__addsf3x+0x9c>
    18e6:	1a 16       	cp	r1, r26
    18e8:	f0 40       	sbci	r31, 0x00	; 0
    18ea:	a2 2f       	mov	r26, r18
    18ec:	23 2f       	mov	r18, r19
    18ee:	34 2f       	mov	r19, r20
    18f0:	44 27       	eor	r20, r20
    18f2:	58 5f       	subi	r21, 0xF8	; 248
    18f4:	f3 cf       	rjmp	.-26     	; 0x18dc <__addsf3x+0x38>
    18f6:	46 95       	lsr	r20
    18f8:	37 95       	ror	r19
    18fa:	27 95       	ror	r18
    18fc:	a7 95       	ror	r26
    18fe:	f0 40       	sbci	r31, 0x00	; 0
    1900:	53 95       	inc	r21
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__addsf3x+0x52>
    1904:	7e f4       	brtc	.+30     	; 0x1924 <__addsf3x+0x80>
    1906:	1f 16       	cp	r1, r31
    1908:	ba 0b       	sbc	r27, r26
    190a:	62 0b       	sbc	r22, r18
    190c:	73 0b       	sbc	r23, r19
    190e:	84 0b       	sbc	r24, r20
    1910:	ba f0       	brmi	.+46     	; 0x1940 <__addsf3x+0x9c>
    1912:	91 50       	subi	r25, 0x01	; 1
    1914:	a1 f0       	breq	.+40     	; 0x193e <__addsf3x+0x9a>
    1916:	ff 0f       	add	r31, r31
    1918:	bb 1f       	adc	r27, r27
    191a:	66 1f       	adc	r22, r22
    191c:	77 1f       	adc	r23, r23
    191e:	88 1f       	adc	r24, r24
    1920:	c2 f7       	brpl	.-16     	; 0x1912 <__addsf3x+0x6e>
    1922:	0e c0       	rjmp	.+28     	; 0x1940 <__addsf3x+0x9c>
    1924:	ba 0f       	add	r27, r26
    1926:	62 1f       	adc	r22, r18
    1928:	73 1f       	adc	r23, r19
    192a:	84 1f       	adc	r24, r20
    192c:	48 f4       	brcc	.+18     	; 0x1940 <__addsf3x+0x9c>
    192e:	87 95       	ror	r24
    1930:	77 95       	ror	r23
    1932:	67 95       	ror	r22
    1934:	b7 95       	ror	r27
    1936:	f7 95       	ror	r31
    1938:	9e 3f       	cpi	r25, 0xFE	; 254
    193a:	08 f0       	brcs	.+2      	; 0x193e <__addsf3x+0x9a>
    193c:	b0 cf       	rjmp	.-160    	; 0x189e <__addsf3+0x28>
    193e:	93 95       	inc	r25
    1940:	88 0f       	add	r24, r24
    1942:	08 f0       	brcs	.+2      	; 0x1946 <__addsf3x+0xa2>
    1944:	99 27       	eor	r25, r25
    1946:	ee 0f       	add	r30, r30
    1948:	97 95       	ror	r25
    194a:	87 95       	ror	r24
    194c:	08 95       	ret

0000194e <ceil>:
    194e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_trunc>
    1952:	90 f0       	brcs	.+36     	; 0x1978 <ceil+0x2a>
    1954:	9f 37       	cpi	r25, 0x7F	; 127
    1956:	48 f4       	brcc	.+18     	; 0x196a <ceil+0x1c>
    1958:	91 11       	cpse	r25, r1
    195a:	16 f4       	brtc	.+4      	; 0x1960 <ceil+0x12>
    195c:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	80 e8       	ldi	r24, 0x80	; 128
    1966:	9f e3       	ldi	r25, 0x3F	; 63
    1968:	08 95       	ret
    196a:	26 f0       	brts	.+8      	; 0x1974 <ceil+0x26>
    196c:	1b 16       	cp	r1, r27
    196e:	61 1d       	adc	r22, r1
    1970:	71 1d       	adc	r23, r1
    1972:	81 1d       	adc	r24, r1
    1974:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_mintl>
    1978:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_mpack>

0000197c <__cmpsf2>:
    197c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__fp_cmp>
    1980:	08 f4       	brcc	.+2      	; 0x1984 <__cmpsf2+0x8>
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	08 95       	ret

00001986 <__divsf3>:
    1986:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3x>
    198a:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_round>
    198e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_pscB>
    1992:	58 f0       	brcs	.+22     	; 0x19aa <__divsf3+0x24>
    1994:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_pscA>
    1998:	40 f0       	brcs	.+16     	; 0x19aa <__divsf3+0x24>
    199a:	29 f4       	brne	.+10     	; 0x19a6 <__divsf3+0x20>
    199c:	5f 3f       	cpi	r21, 0xFF	; 255
    199e:	29 f0       	breq	.+10     	; 0x19aa <__divsf3+0x24>
    19a0:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_inf>
    19a4:	51 11       	cpse	r21, r1
    19a6:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    19aa:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__fp_nan>

000019ae <__divsf3x>:
    19ae:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_split3>
    19b2:	68 f3       	brcs	.-38     	; 0x198e <__divsf3+0x8>

000019b4 <__divsf3_pse>:
    19b4:	99 23       	and	r25, r25
    19b6:	b1 f3       	breq	.-20     	; 0x19a4 <__divsf3+0x1e>
    19b8:	55 23       	and	r21, r21
    19ba:	91 f3       	breq	.-28     	; 0x19a0 <__divsf3+0x1a>
    19bc:	95 1b       	sub	r25, r21
    19be:	55 0b       	sbc	r21, r21
    19c0:	bb 27       	eor	r27, r27
    19c2:	aa 27       	eor	r26, r26
    19c4:	62 17       	cp	r22, r18
    19c6:	73 07       	cpc	r23, r19
    19c8:	84 07       	cpc	r24, r20
    19ca:	38 f0       	brcs	.+14     	; 0x19da <__divsf3_pse+0x26>
    19cc:	9f 5f       	subi	r25, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	44 1f       	adc	r20, r20
    19d6:	aa 1f       	adc	r26, r26
    19d8:	a9 f3       	breq	.-22     	; 0x19c4 <__divsf3_pse+0x10>
    19da:	35 d0       	rcall	.+106    	; 0x1a46 <__divsf3_pse+0x92>
    19dc:	0e 2e       	mov	r0, r30
    19de:	3a f0       	brmi	.+14     	; 0x19ee <__divsf3_pse+0x3a>
    19e0:	e0 e8       	ldi	r30, 0x80	; 128
    19e2:	32 d0       	rcall	.+100    	; 0x1a48 <__divsf3_pse+0x94>
    19e4:	91 50       	subi	r25, 0x01	; 1
    19e6:	50 40       	sbci	r21, 0x00	; 0
    19e8:	e6 95       	lsr	r30
    19ea:	00 1c       	adc	r0, r0
    19ec:	ca f7       	brpl	.-14     	; 0x19e0 <__divsf3_pse+0x2c>
    19ee:	2b d0       	rcall	.+86     	; 0x1a46 <__divsf3_pse+0x92>
    19f0:	fe 2f       	mov	r31, r30
    19f2:	29 d0       	rcall	.+82     	; 0x1a46 <__divsf3_pse+0x92>
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	bb 1f       	adc	r27, r27
    19fc:	26 17       	cp	r18, r22
    19fe:	37 07       	cpc	r19, r23
    1a00:	48 07       	cpc	r20, r24
    1a02:	ab 07       	cpc	r26, r27
    1a04:	b0 e8       	ldi	r27, 0x80	; 128
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <__divsf3_pse+0x56>
    1a08:	bb 0b       	sbc	r27, r27
    1a0a:	80 2d       	mov	r24, r0
    1a0c:	bf 01       	movw	r22, r30
    1a0e:	ff 27       	eor	r31, r31
    1a10:	93 58       	subi	r25, 0x83	; 131
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	3a f0       	brmi	.+14     	; 0x1a24 <__divsf3_pse+0x70>
    1a16:	9e 3f       	cpi	r25, 0xFE	; 254
    1a18:	51 05       	cpc	r21, r1
    1a1a:	78 f0       	brcs	.+30     	; 0x1a3a <__divsf3_pse+0x86>
    1a1c:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_inf>
    1a20:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1a24:	5f 3f       	cpi	r21, 0xFF	; 255
    1a26:	e4 f3       	brlt	.-8      	; 0x1a20 <__divsf3_pse+0x6c>
    1a28:	98 3e       	cpi	r25, 0xE8	; 232
    1a2a:	d4 f3       	brlt	.-12     	; 0x1a20 <__divsf3_pse+0x6c>
    1a2c:	86 95       	lsr	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	b7 95       	ror	r27
    1a34:	f7 95       	ror	r31
    1a36:	9f 5f       	subi	r25, 0xFF	; 255
    1a38:	c9 f7       	brne	.-14     	; 0x1a2c <__divsf3_pse+0x78>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	91 1d       	adc	r25, r1
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	97 f9       	bld	r25, 7
    1a44:	08 95       	ret
    1a46:	e1 e0       	ldi	r30, 0x01	; 1
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	62 17       	cp	r22, r18
    1a52:	73 07       	cpc	r23, r19
    1a54:	84 07       	cpc	r24, r20
    1a56:	ba 07       	cpc	r27, r26
    1a58:	20 f0       	brcs	.+8      	; 0x1a62 <__divsf3_pse+0xae>
    1a5a:	62 1b       	sub	r22, r18
    1a5c:	73 0b       	sbc	r23, r19
    1a5e:	84 0b       	sbc	r24, r20
    1a60:	ba 0b       	sbc	r27, r26
    1a62:	ee 1f       	adc	r30, r30
    1a64:	88 f7       	brcc	.-30     	; 0x1a48 <__divsf3_pse+0x94>
    1a66:	e0 95       	com	r30
    1a68:	08 95       	ret

00001a6a <__fixunssfsi>:
    1a6a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fp_splitA>
    1a6e:	88 f0       	brcs	.+34     	; 0x1a92 <__fixunssfsi+0x28>
    1a70:	9f 57       	subi	r25, 0x7F	; 127
    1a72:	98 f0       	brcs	.+38     	; 0x1a9a <__fixunssfsi+0x30>
    1a74:	b9 2f       	mov	r27, r25
    1a76:	99 27       	eor	r25, r25
    1a78:	b7 51       	subi	r27, 0x17	; 23
    1a7a:	b0 f0       	brcs	.+44     	; 0x1aa8 <__fixunssfsi+0x3e>
    1a7c:	e1 f0       	breq	.+56     	; 0x1ab6 <__fixunssfsi+0x4c>
    1a7e:	66 0f       	add	r22, r22
    1a80:	77 1f       	adc	r23, r23
    1a82:	88 1f       	adc	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	1a f0       	brmi	.+6      	; 0x1a8e <__fixunssfsi+0x24>
    1a88:	ba 95       	dec	r27
    1a8a:	c9 f7       	brne	.-14     	; 0x1a7e <__fixunssfsi+0x14>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <__fixunssfsi+0x4c>
    1a8e:	b1 30       	cpi	r27, 0x01	; 1
    1a90:	91 f0       	breq	.+36     	; 0x1ab6 <__fixunssfsi+0x4c>
    1a92:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fp_zero>
    1a96:	b1 e0       	ldi	r27, 0x01	; 1
    1a98:	08 95       	ret
    1a9a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_zero>
    1a9e:	67 2f       	mov	r22, r23
    1aa0:	78 2f       	mov	r23, r24
    1aa2:	88 27       	eor	r24, r24
    1aa4:	b8 5f       	subi	r27, 0xF8	; 248
    1aa6:	39 f0       	breq	.+14     	; 0x1ab6 <__fixunssfsi+0x4c>
    1aa8:	b9 3f       	cpi	r27, 0xF9	; 249
    1aaa:	cc f3       	brlt	.-14     	; 0x1a9e <__fixunssfsi+0x34>
    1aac:	86 95       	lsr	r24
    1aae:	77 95       	ror	r23
    1ab0:	67 95       	ror	r22
    1ab2:	b3 95       	inc	r27
    1ab4:	d9 f7       	brne	.-10     	; 0x1aac <__fixunssfsi+0x42>
    1ab6:	3e f4       	brtc	.+14     	; 0x1ac6 <__fixunssfsi+0x5c>
    1ab8:	90 95       	com	r25
    1aba:	80 95       	com	r24
    1abc:	70 95       	com	r23
    1abe:	61 95       	neg	r22
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	08 95       	ret

00001ac8 <__floatunsisf>:
    1ac8:	e8 94       	clt
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <__floatsisf+0x12>

00001acc <__floatsisf>:
    1acc:	97 fb       	bst	r25, 7
    1ace:	3e f4       	brtc	.+14     	; 0x1ade <__floatsisf+0x12>
    1ad0:	90 95       	com	r25
    1ad2:	80 95       	com	r24
    1ad4:	70 95       	com	r23
    1ad6:	61 95       	neg	r22
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	8f 4f       	sbci	r24, 0xFF	; 255
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	99 23       	and	r25, r25
    1ae0:	a9 f0       	breq	.+42     	; 0x1b0c <__floatsisf+0x40>
    1ae2:	f9 2f       	mov	r31, r25
    1ae4:	96 e9       	ldi	r25, 0x96	; 150
    1ae6:	bb 27       	eor	r27, r27
    1ae8:	93 95       	inc	r25
    1aea:	f6 95       	lsr	r31
    1aec:	87 95       	ror	r24
    1aee:	77 95       	ror	r23
    1af0:	67 95       	ror	r22
    1af2:	b7 95       	ror	r27
    1af4:	f1 11       	cpse	r31, r1
    1af6:	f8 cf       	rjmp	.-16     	; 0x1ae8 <__floatsisf+0x1c>
    1af8:	fa f4       	brpl	.+62     	; 0x1b38 <__floatsisf+0x6c>
    1afa:	bb 0f       	add	r27, r27
    1afc:	11 f4       	brne	.+4      	; 0x1b02 <__floatsisf+0x36>
    1afe:	60 ff       	sbrs	r22, 0
    1b00:	1b c0       	rjmp	.+54     	; 0x1b38 <__floatsisf+0x6c>
    1b02:	6f 5f       	subi	r22, 0xFF	; 255
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	16 c0       	rjmp	.+44     	; 0x1b38 <__floatsisf+0x6c>
    1b0c:	88 23       	and	r24, r24
    1b0e:	11 f0       	breq	.+4      	; 0x1b14 <__floatsisf+0x48>
    1b10:	96 e9       	ldi	r25, 0x96	; 150
    1b12:	11 c0       	rjmp	.+34     	; 0x1b36 <__floatsisf+0x6a>
    1b14:	77 23       	and	r23, r23
    1b16:	21 f0       	breq	.+8      	; 0x1b20 <__floatsisf+0x54>
    1b18:	9e e8       	ldi	r25, 0x8E	; 142
    1b1a:	87 2f       	mov	r24, r23
    1b1c:	76 2f       	mov	r23, r22
    1b1e:	05 c0       	rjmp	.+10     	; 0x1b2a <__floatsisf+0x5e>
    1b20:	66 23       	and	r22, r22
    1b22:	71 f0       	breq	.+28     	; 0x1b40 <__floatsisf+0x74>
    1b24:	96 e8       	ldi	r25, 0x86	; 134
    1b26:	86 2f       	mov	r24, r22
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	2a f0       	brmi	.+10     	; 0x1b38 <__floatsisf+0x6c>
    1b2e:	9a 95       	dec	r25
    1b30:	66 0f       	add	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	da f7       	brpl	.-10     	; 0x1b2e <__floatsisf+0x62>
    1b38:	88 0f       	add	r24, r24
    1b3a:	96 95       	lsr	r25
    1b3c:	87 95       	ror	r24
    1b3e:	97 f9       	bld	r25, 7
    1b40:	08 95       	ret

00001b42 <__fp_cmp>:
    1b42:	99 0f       	add	r25, r25
    1b44:	00 08       	sbc	r0, r0
    1b46:	55 0f       	add	r21, r21
    1b48:	aa 0b       	sbc	r26, r26
    1b4a:	e0 e8       	ldi	r30, 0x80	; 128
    1b4c:	fe ef       	ldi	r31, 0xFE	; 254
    1b4e:	16 16       	cp	r1, r22
    1b50:	17 06       	cpc	r1, r23
    1b52:	e8 07       	cpc	r30, r24
    1b54:	f9 07       	cpc	r31, r25
    1b56:	c0 f0       	brcs	.+48     	; 0x1b88 <__fp_cmp+0x46>
    1b58:	12 16       	cp	r1, r18
    1b5a:	13 06       	cpc	r1, r19
    1b5c:	e4 07       	cpc	r30, r20
    1b5e:	f5 07       	cpc	r31, r21
    1b60:	98 f0       	brcs	.+38     	; 0x1b88 <__fp_cmp+0x46>
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	84 0b       	sbc	r24, r20
    1b68:	95 0b       	sbc	r25, r21
    1b6a:	39 f4       	brne	.+14     	; 0x1b7a <__fp_cmp+0x38>
    1b6c:	0a 26       	eor	r0, r26
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <__fp_cmp+0x46>
    1b70:	23 2b       	or	r18, r19
    1b72:	24 2b       	or	r18, r20
    1b74:	25 2b       	or	r18, r21
    1b76:	21 f4       	brne	.+8      	; 0x1b80 <__fp_cmp+0x3e>
    1b78:	08 95       	ret
    1b7a:	0a 26       	eor	r0, r26
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__fp_cmp+0x3e>
    1b7e:	a1 40       	sbci	r26, 0x01	; 1
    1b80:	a6 95       	lsr	r26
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	81 1d       	adc	r24, r1
    1b86:	81 1d       	adc	r24, r1
    1b88:	08 95       	ret

00001b8a <__fp_inf>:
    1b8a:	97 f9       	bld	r25, 7
    1b8c:	9f 67       	ori	r25, 0x7F	; 127
    1b8e:	80 e8       	ldi	r24, 0x80	; 128
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	08 95       	ret

00001b96 <__fp_mintl>:
    1b96:	88 23       	and	r24, r24
    1b98:	71 f4       	brne	.+28     	; 0x1bb6 <__fp_mintl+0x20>
    1b9a:	77 23       	and	r23, r23
    1b9c:	21 f0       	breq	.+8      	; 0x1ba6 <__fp_mintl+0x10>
    1b9e:	98 50       	subi	r25, 0x08	; 8
    1ba0:	87 2b       	or	r24, r23
    1ba2:	76 2f       	mov	r23, r22
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <__fp_mintl+0x1e>
    1ba6:	66 23       	and	r22, r22
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__fp_mintl+0x18>
    1baa:	99 27       	eor	r25, r25
    1bac:	0d c0       	rjmp	.+26     	; 0x1bc8 <__fp_mintl+0x32>
    1bae:	90 51       	subi	r25, 0x10	; 16
    1bb0:	86 2b       	or	r24, r22
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	2a f0       	brmi	.+10     	; 0x1bc2 <__fp_mintl+0x2c>
    1bb8:	9a 95       	dec	r25
    1bba:	66 0f       	add	r22, r22
    1bbc:	77 1f       	adc	r23, r23
    1bbe:	88 1f       	adc	r24, r24
    1bc0:	da f7       	brpl	.-10     	; 0x1bb8 <__fp_mintl+0x22>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	96 95       	lsr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	97 f9       	bld	r25, 7
    1bca:	08 95       	ret

00001bcc <__fp_mpack>:
    1bcc:	9f 3f       	cpi	r25, 0xFF	; 255
    1bce:	31 f0       	breq	.+12     	; 0x1bdc <__fp_mpack_finite+0xc>

00001bd0 <__fp_mpack_finite>:
    1bd0:	91 50       	subi	r25, 0x01	; 1
    1bd2:	20 f4       	brcc	.+8      	; 0x1bdc <__fp_mpack_finite+0xc>
    1bd4:	87 95       	ror	r24
    1bd6:	77 95       	ror	r23
    1bd8:	67 95       	ror	r22
    1bda:	b7 95       	ror	r27
    1bdc:	88 0f       	add	r24, r24
    1bde:	91 1d       	adc	r25, r1
    1be0:	96 95       	lsr	r25
    1be2:	87 95       	ror	r24
    1be4:	97 f9       	bld	r25, 7
    1be6:	08 95       	ret

00001be8 <__fp_nan>:
    1be8:	9f ef       	ldi	r25, 0xFF	; 255
    1bea:	80 ec       	ldi	r24, 0xC0	; 192
    1bec:	08 95       	ret

00001bee <__fp_pscA>:
    1bee:	00 24       	eor	r0, r0
    1bf0:	0a 94       	dec	r0
    1bf2:	16 16       	cp	r1, r22
    1bf4:	17 06       	cpc	r1, r23
    1bf6:	18 06       	cpc	r1, r24
    1bf8:	09 06       	cpc	r0, r25
    1bfa:	08 95       	ret

00001bfc <__fp_pscB>:
    1bfc:	00 24       	eor	r0, r0
    1bfe:	0a 94       	dec	r0
    1c00:	12 16       	cp	r1, r18
    1c02:	13 06       	cpc	r1, r19
    1c04:	14 06       	cpc	r1, r20
    1c06:	05 06       	cpc	r0, r21
    1c08:	08 95       	ret

00001c0a <__fp_round>:
    1c0a:	09 2e       	mov	r0, r25
    1c0c:	03 94       	inc	r0
    1c0e:	00 0c       	add	r0, r0
    1c10:	11 f4       	brne	.+4      	; 0x1c16 <__fp_round+0xc>
    1c12:	88 23       	and	r24, r24
    1c14:	52 f0       	brmi	.+20     	; 0x1c2a <__fp_round+0x20>
    1c16:	bb 0f       	add	r27, r27
    1c18:	40 f4       	brcc	.+16     	; 0x1c2a <__fp_round+0x20>
    1c1a:	bf 2b       	or	r27, r31
    1c1c:	11 f4       	brne	.+4      	; 0x1c22 <__fp_round+0x18>
    1c1e:	60 ff       	sbrs	r22, 0
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <__fp_round+0x20>
    1c22:	6f 5f       	subi	r22, 0xFF	; 255
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	8f 4f       	sbci	r24, 0xFF	; 255
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	08 95       	ret

00001c2c <__fp_split3>:
    1c2c:	57 fd       	sbrc	r21, 7
    1c2e:	90 58       	subi	r25, 0x80	; 128
    1c30:	44 0f       	add	r20, r20
    1c32:	55 1f       	adc	r21, r21
    1c34:	59 f0       	breq	.+22     	; 0x1c4c <__fp_splitA+0x10>
    1c36:	5f 3f       	cpi	r21, 0xFF	; 255
    1c38:	71 f0       	breq	.+28     	; 0x1c56 <__fp_splitA+0x1a>
    1c3a:	47 95       	ror	r20

00001c3c <__fp_splitA>:
    1c3c:	88 0f       	add	r24, r24
    1c3e:	97 fb       	bst	r25, 7
    1c40:	99 1f       	adc	r25, r25
    1c42:	61 f0       	breq	.+24     	; 0x1c5c <__fp_splitA+0x20>
    1c44:	9f 3f       	cpi	r25, 0xFF	; 255
    1c46:	79 f0       	breq	.+30     	; 0x1c66 <__fp_splitA+0x2a>
    1c48:	87 95       	ror	r24
    1c4a:	08 95       	ret
    1c4c:	12 16       	cp	r1, r18
    1c4e:	13 06       	cpc	r1, r19
    1c50:	14 06       	cpc	r1, r20
    1c52:	55 1f       	adc	r21, r21
    1c54:	f2 cf       	rjmp	.-28     	; 0x1c3a <__fp_split3+0xe>
    1c56:	46 95       	lsr	r20
    1c58:	f1 df       	rcall	.-30     	; 0x1c3c <__fp_splitA>
    1c5a:	08 c0       	rjmp	.+16     	; 0x1c6c <__fp_splitA+0x30>
    1c5c:	16 16       	cp	r1, r22
    1c5e:	17 06       	cpc	r1, r23
    1c60:	18 06       	cpc	r1, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	f1 cf       	rjmp	.-30     	; 0x1c48 <__fp_splitA+0xc>
    1c66:	86 95       	lsr	r24
    1c68:	71 05       	cpc	r23, r1
    1c6a:	61 05       	cpc	r22, r1
    1c6c:	08 94       	sec
    1c6e:	08 95       	ret

00001c70 <__fp_trunc>:
    1c70:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fp_splitA>
    1c74:	a0 f0       	brcs	.+40     	; 0x1c9e <__fp_trunc+0x2e>
    1c76:	be e7       	ldi	r27, 0x7E	; 126
    1c78:	b9 17       	cp	r27, r25
    1c7a:	88 f4       	brcc	.+34     	; 0x1c9e <__fp_trunc+0x2e>
    1c7c:	bb 27       	eor	r27, r27
    1c7e:	9f 38       	cpi	r25, 0x8F	; 143
    1c80:	60 f4       	brcc	.+24     	; 0x1c9a <__fp_trunc+0x2a>
    1c82:	16 16       	cp	r1, r22
    1c84:	b1 1d       	adc	r27, r1
    1c86:	67 2f       	mov	r22, r23
    1c88:	78 2f       	mov	r23, r24
    1c8a:	88 27       	eor	r24, r24
    1c8c:	98 5f       	subi	r25, 0xF8	; 248
    1c8e:	f7 cf       	rjmp	.-18     	; 0x1c7e <__fp_trunc+0xe>
    1c90:	86 95       	lsr	r24
    1c92:	77 95       	ror	r23
    1c94:	67 95       	ror	r22
    1c96:	b1 1d       	adc	r27, r1
    1c98:	93 95       	inc	r25
    1c9a:	96 39       	cpi	r25, 0x96	; 150
    1c9c:	c8 f3       	brcs	.-14     	; 0x1c90 <__fp_trunc+0x20>
    1c9e:	08 95       	ret

00001ca0 <__fp_zero>:
    1ca0:	e8 94       	clt

00001ca2 <__fp_szero>:
    1ca2:	bb 27       	eor	r27, r27
    1ca4:	66 27       	eor	r22, r22
    1ca6:	77 27       	eor	r23, r23
    1ca8:	cb 01       	movw	r24, r22
    1caa:	97 f9       	bld	r25, 7
    1cac:	08 95       	ret

00001cae <__gesf2>:
    1cae:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__fp_cmp>
    1cb2:	08 f4       	brcc	.+2      	; 0x1cb6 <__gesf2+0x8>
    1cb4:	8f ef       	ldi	r24, 0xFF	; 255
    1cb6:	08 95       	ret

00001cb8 <__mulsf3>:
    1cb8:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__mulsf3x>
    1cbc:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_round>
    1cc0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_pscA>
    1cc4:	38 f0       	brcs	.+14     	; 0x1cd4 <__mulsf3+0x1c>
    1cc6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_pscB>
    1cca:	20 f0       	brcs	.+8      	; 0x1cd4 <__mulsf3+0x1c>
    1ccc:	95 23       	and	r25, r21
    1cce:	11 f0       	breq	.+4      	; 0x1cd4 <__mulsf3+0x1c>
    1cd0:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_inf>
    1cd4:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__fp_nan>
    1cd8:	11 24       	eor	r1, r1
    1cda:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>

00001cde <__mulsf3x>:
    1cde:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_split3>
    1ce2:	70 f3       	brcs	.-36     	; 0x1cc0 <__mulsf3+0x8>

00001ce4 <__mulsf3_pse>:
    1ce4:	95 9f       	mul	r25, r21
    1ce6:	c1 f3       	breq	.-16     	; 0x1cd8 <__mulsf3+0x20>
    1ce8:	95 0f       	add	r25, r21
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	55 1f       	adc	r21, r21
    1cee:	62 9f       	mul	r22, r18
    1cf0:	f0 01       	movw	r30, r0
    1cf2:	72 9f       	mul	r23, r18
    1cf4:	bb 27       	eor	r27, r27
    1cf6:	f0 0d       	add	r31, r0
    1cf8:	b1 1d       	adc	r27, r1
    1cfa:	63 9f       	mul	r22, r19
    1cfc:	aa 27       	eor	r26, r26
    1cfe:	f0 0d       	add	r31, r0
    1d00:	b1 1d       	adc	r27, r1
    1d02:	aa 1f       	adc	r26, r26
    1d04:	64 9f       	mul	r22, r20
    1d06:	66 27       	eor	r22, r22
    1d08:	b0 0d       	add	r27, r0
    1d0a:	a1 1d       	adc	r26, r1
    1d0c:	66 1f       	adc	r22, r22
    1d0e:	82 9f       	mul	r24, r18
    1d10:	22 27       	eor	r18, r18
    1d12:	b0 0d       	add	r27, r0
    1d14:	a1 1d       	adc	r26, r1
    1d16:	62 1f       	adc	r22, r18
    1d18:	73 9f       	mul	r23, r19
    1d1a:	b0 0d       	add	r27, r0
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	62 1f       	adc	r22, r18
    1d20:	83 9f       	mul	r24, r19
    1d22:	a0 0d       	add	r26, r0
    1d24:	61 1d       	adc	r22, r1
    1d26:	22 1f       	adc	r18, r18
    1d28:	74 9f       	mul	r23, r20
    1d2a:	33 27       	eor	r19, r19
    1d2c:	a0 0d       	add	r26, r0
    1d2e:	61 1d       	adc	r22, r1
    1d30:	23 1f       	adc	r18, r19
    1d32:	84 9f       	mul	r24, r20
    1d34:	60 0d       	add	r22, r0
    1d36:	21 1d       	adc	r18, r1
    1d38:	82 2f       	mov	r24, r18
    1d3a:	76 2f       	mov	r23, r22
    1d3c:	6a 2f       	mov	r22, r26
    1d3e:	11 24       	eor	r1, r1
    1d40:	9f 57       	subi	r25, 0x7F	; 127
    1d42:	50 40       	sbci	r21, 0x00	; 0
    1d44:	9a f0       	brmi	.+38     	; 0x1d6c <__mulsf3_pse+0x88>
    1d46:	f1 f0       	breq	.+60     	; 0x1d84 <__mulsf3_pse+0xa0>
    1d48:	88 23       	and	r24, r24
    1d4a:	4a f0       	brmi	.+18     	; 0x1d5e <__mulsf3_pse+0x7a>
    1d4c:	ee 0f       	add	r30, r30
    1d4e:	ff 1f       	adc	r31, r31
    1d50:	bb 1f       	adc	r27, r27
    1d52:	66 1f       	adc	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	91 50       	subi	r25, 0x01	; 1
    1d5a:	50 40       	sbci	r21, 0x00	; 0
    1d5c:	a9 f7       	brne	.-22     	; 0x1d48 <__mulsf3_pse+0x64>
    1d5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d60:	51 05       	cpc	r21, r1
    1d62:	80 f0       	brcs	.+32     	; 0x1d84 <__mulsf3_pse+0xa0>
    1d64:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_inf>
    1d68:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1d6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d6e:	e4 f3       	brlt	.-8      	; 0x1d68 <__mulsf3_pse+0x84>
    1d70:	98 3e       	cpi	r25, 0xE8	; 232
    1d72:	d4 f3       	brlt	.-12     	; 0x1d68 <__mulsf3_pse+0x84>
    1d74:	86 95       	lsr	r24
    1d76:	77 95       	ror	r23
    1d78:	67 95       	ror	r22
    1d7a:	b7 95       	ror	r27
    1d7c:	f7 95       	ror	r31
    1d7e:	e7 95       	ror	r30
    1d80:	9f 5f       	subi	r25, 0xFF	; 255
    1d82:	c1 f7       	brne	.-16     	; 0x1d74 <__mulsf3_pse+0x90>
    1d84:	fe 2b       	or	r31, r30
    1d86:	88 0f       	add	r24, r24
    1d88:	91 1d       	adc	r25, r1
    1d8a:	96 95       	lsr	r25
    1d8c:	87 95       	ror	r24
    1d8e:	97 f9       	bld	r25, 7
    1d90:	08 95       	ret

00001d92 <__itoa_ncheck>:
    1d92:	bb 27       	eor	r27, r27
    1d94:	4a 30       	cpi	r20, 0x0A	; 10
    1d96:	31 f4       	brne	.+12     	; 0x1da4 <__itoa_ncheck+0x12>
    1d98:	99 23       	and	r25, r25
    1d9a:	22 f4       	brpl	.+8      	; 0x1da4 <__itoa_ncheck+0x12>
    1d9c:	bd e2       	ldi	r27, 0x2D	; 45
    1d9e:	90 95       	com	r25
    1da0:	81 95       	neg	r24
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__utoa_common>

00001da8 <__utoa_ncheck>:
    1da8:	bb 27       	eor	r27, r27

00001daa <__utoa_common>:
    1daa:	fb 01       	movw	r30, r22
    1dac:	55 27       	eor	r21, r21
    1dae:	aa 27       	eor	r26, r26
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	aa 1f       	adc	r26, r26
    1db6:	a4 17       	cp	r26, r20
    1db8:	10 f0       	brcs	.+4      	; 0x1dbe <__utoa_common+0x14>
    1dba:	a4 1b       	sub	r26, r20
    1dbc:	83 95       	inc	r24
    1dbe:	50 51       	subi	r21, 0x10	; 16
    1dc0:	b9 f7       	brne	.-18     	; 0x1db0 <__utoa_common+0x6>
    1dc2:	a0 5d       	subi	r26, 0xD0	; 208
    1dc4:	aa 33       	cpi	r26, 0x3A	; 58
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <__utoa_common+0x20>
    1dc8:	a9 5d       	subi	r26, 0xD9	; 217
    1dca:	a1 93       	st	Z+, r26
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	79 f7       	brne	.-34     	; 0x1dae <__utoa_common+0x4>
    1dd0:	b1 11       	cpse	r27, r1
    1dd2:	b1 93       	st	Z+, r27
    1dd4:	11 92       	st	Z+, r1
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <strrev>

00001ddc <strrev>:
    1ddc:	dc 01       	movw	r26, r24
    1dde:	fc 01       	movw	r30, r24
    1de0:	67 2f       	mov	r22, r23
    1de2:	71 91       	ld	r23, Z+
    1de4:	77 23       	and	r23, r23
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <strrev+0x4>
    1de8:	32 97       	sbiw	r30, 0x02	; 2
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <strrev+0x18>
    1dec:	7c 91       	ld	r23, X
    1dee:	6d 93       	st	X+, r22
    1df0:	70 83       	st	Z, r23
    1df2:	62 91       	ld	r22, -Z
    1df4:	ae 17       	cp	r26, r30
    1df6:	bf 07       	cpc	r27, r31
    1df8:	c8 f3       	brcs	.-14     	; 0x1dec <strrev+0x10>
    1dfa:	08 95       	ret

00001dfc <_exit>:
    1dfc:	f8 94       	cli

00001dfe <__stop_program>:
    1dfe:	ff cf       	rjmp	.-2      	; 0x1dfe <__stop_program>
