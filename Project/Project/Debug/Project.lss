
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000f70  00001004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800082  00800082  00001026  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b6d  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ba  00000000  00000000  00003e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001893  00000000  00000000  00004f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  000067a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001141  00000000  00000000  00006ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000195b  00000000  00000000  00007e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00009768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_1>
   8:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_2>
   c:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  8a:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ultrasonic_vInit>:
};

void ultrasonic_vInit()
{
	
	DIO_Initpin(&(ultra.echopin));
  92:	85 e6       	ldi	r24, 0x65	; 101
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 14 03 	call	0x628	; 0x628 <DIO_Initpin>
	DIO_Initpin(&(ultra.triggerpin));
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 14 03 	call	0x628	; 0x628 <DIO_Initpin>
	MCU_vEnableInterrupt();
  a2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <MCU_vEnableInterrupt>
  a6:	08 95       	ret

000000a8 <ultrasonic_vGetDistance>:
}

void ultrasonic_vGetDistance(float64_t *Copy_f64distance)
{
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <ultrasonic_vGetDistance+0xa>
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	8c 01       	movw	r16, r24
	Uint32_t val = 0;
  b8:	1a 82       	std	Y+2, r1	; 0x02
  ba:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(DIO_PORTD,DIO_PIN1,DIO_HIGH);
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 a3 02 	call	0x546	; 0x546 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	83 ec       	ldi	r24, 0xC3	; 195
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <ultrasonic_vGetDistance+0x22>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <ultrasonic_vGetDistance+0x28>
  d0:	00 00       	nop
	_delay_ms(10);
	DIO_WritePin(DIO_PORTD,DIO_PIN1,DIO_LOW);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 a3 02 	call	0x546	; 0x546 <DIO_WritePin>
	ICU_RisingEdgeCapture();
  dc:	0e 94 e5 05 	call	0xbca	; 0xbca <ICU_RisingEdgeCapture>

	
	while(ICU_g_flag != 1);
  e0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <ICU_g_flag>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	e1 f7       	brne	.-8      	; 0xe0 <ultrasonic_vGetDistance+0x38>
	ICU_getValue(&val);
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 cf 04 	call	0x99e	; 0x99e <ICU_getValue>
	
	*Copy_f64distance = val / 466.47;	
  f0:	69 81       	ldd	r22, Y+1	; 0x01
  f2:	7a 81       	ldd	r23, Y+2	; 0x02
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatunsisf>
  fc:	29 e2       	ldi	r18, 0x29	; 41
  fe:	3c e3       	ldi	r19, 0x3C	; 60
 100:	49 ee       	ldi	r20, 0xE9	; 233
 102:	53 e4       	ldi	r21, 0x43	; 67
 104:	0e 94 52 06 	call	0xca4	; 0xca4 <__divsf3>
 108:	f8 01       	movw	r30, r16
 10a:	60 83       	st	Z, r22
 10c:	71 83       	std	Z+1, r23	; 0x01
 10e:	82 83       	std	Z+2, r24	; 0x02
 110:	93 83       	std	Z+3, r25	; 0x03
}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <DIO_s8SETPinDir>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
 120:	80 32       	cpi	r24, 0x20	; 32
 122:	c0 f5       	brcc	.+112    	; 0x194 <DIO_s8SETPinDir+0x74>
 124:	62 30       	cpi	r22, 0x02	; 2
 126:	c0 f5       	brcc	.+112    	; 0x198 <DIO_s8SETPinDir+0x78>
	{
		portID = enPinCopy/8;
 128:	e8 2f       	mov	r30, r24
 12a:	e6 95       	lsr	r30
 12c:	e6 95       	lsr	r30
 12e:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 130:	87 70       	andi	r24, 0x07	; 7

		if (enPortDir == INPUT)
 132:	61 11       	cpse	r22, r1
 134:	17 c0       	rjmp	.+46     	; 0x164 <DIO_s8SETPinDir+0x44>
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	e6 59       	subi	r30, 0x96	; 150
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	01 90       	ld	r0, Z+
 142:	f0 81       	ld	r31, Z
 144:	e0 2d       	mov	r30, r0
 146:	40 81       	ld	r20, Z
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	b9 01       	movw	r22, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_s8SETPinDir+0x34>
 150:	66 0f       	add	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_s8SETPinDir+0x30>
 158:	cb 01       	movw	r24, r22
 15a:	80 95       	com	r24
 15c:	84 23       	and	r24, r20
 15e:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret

		if (enPortDir == INPUT)
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
		}
		else if(enPortDir == OUTPUT)
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	d1 f4       	brne	.+52     	; 0x19c <DIO_s8SETPinDir+0x7c>
		{
			SET_BIT(*ddrReg[portID],pinID);
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	e6 59       	subi	r30, 0x96	; 150
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	01 90       	ld	r0, Z+
 174:	f0 81       	ld	r31, Z
 176:	e0 2d       	mov	r30, r0
 178:	40 81       	ld	r20, Z
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_s8SETPinDir+0x66>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_s8SETPinDir+0x62>
 18a:	cb 01       	movw	r24, r22
 18c:	84 2b       	or	r24, r20
 18e:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	08 95       	ret
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	08 95       	ret



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 19c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 19e:	08 95       	ret

000001a0 <DIO_s8SETPinVal>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
 1a0:	80 32       	cpi	r24, 0x20	; 32
 1a2:	c0 f5       	brcc	.+112    	; 0x214 <DIO_s8SETPinVal+0x74>
 1a4:	62 30       	cpi	r22, 0x02	; 2
 1a6:	c0 f5       	brcc	.+112    	; 0x218 <DIO_s8SETPinVal+0x78>
	{
		portID = enPinCopy/8;
 1a8:	e8 2f       	mov	r30, r24
 1aa:	e6 95       	lsr	r30
 1ac:	e6 95       	lsr	r30
 1ae:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 1b0:	87 70       	andi	r24, 0x07	; 7

		if (enPortVal == LOW)
 1b2:	61 11       	cpse	r22, r1
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <DIO_s8SETPinVal+0x44>
		{
			CLEAR_BIT(*portReg[portID],pinID);
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ee 58       	subi	r30, 0x8E	; 142
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	01 90       	ld	r0, Z+
 1c2:	f0 81       	ld	r31, Z
 1c4:	e0 2d       	mov	r30, r0
 1c6:	40 81       	ld	r20, Z
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_s8SETPinVal+0x34>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_s8SETPinVal+0x30>
 1d8:	cb 01       	movw	r24, r22
 1da:	80 95       	com	r24
 1dc:	84 23       	and	r24, r20
 1de:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret

		if (enPortVal == LOW)
		{
			CLEAR_BIT(*portReg[portID],pinID);
		}
		else if(enPortVal == HIGH)
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	d1 f4       	brne	.+52     	; 0x21c <DIO_s8SETPinVal+0x7c>
		{
			SET_BIT(*portReg[portID],pinID);
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	ee 58       	subi	r30, 0x8E	; 142
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	01 90       	ld	r0, Z+
 1f4:	f0 81       	ld	r31, Z
 1f6:	e0 2d       	mov	r30, r0
 1f8:	40 81       	ld	r20, Z
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_s8SETPinVal+0x66>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	8a 95       	dec	r24
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_s8SETPinVal+0x62>
 20a:	cb 01       	movw	r24, r22
 20c:	84 2b       	or	r24, r20
 20e:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	08 95       	ret
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	08 95       	ret
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 21c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 21e:	08 95       	ret

00000220 <HLCD_vidWritecmd>:
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0x80);
	}
	else if (row==1 && pos < 16)
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	d8 2f       	mov	r29, r24
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 238:	1d 2f       	mov	r17, r29
 23a:	12 95       	swap	r17
 23c:	1f 70       	andi	r17, 0x0F	; 15
 23e:	c0 e0       	ldi	r28, 0x00	; 0
 240:	11 c0       	rjmp	.+34     	; 0x264 <HLCD_vidWritecmd+0x44>
 242:	ec 2f       	mov	r30, r28
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	61 2f       	mov	r22, r17
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	0c 2e       	mov	r0, r28
 24c:	02 c0       	rjmp	.+4      	; 0x252 <HLCD_vidWritecmd+0x32>
 24e:	75 95       	asr	r23
 250:	67 95       	ror	r22
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <HLCD_vidWritecmd+0x2e>
 256:	61 70       	andi	r22, 0x01	; 1
 258:	e6 58       	subi	r30, 0x86	; 134
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	80 81       	ld	r24, Z
 25e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 262:	cf 5f       	subi	r28, 0xFF	; 255
 264:	c4 30       	cpi	r28, 0x04	; 4
 266:	68 f3       	brcs	.-38     	; 0x242 <HLCD_vidWritecmd+0x22>
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 270:	89 ef       	ldi	r24, 0xF9	; 249
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <HLCD_vidWritecmd+0x54>
 278:	00 c0       	rjmp	.+0      	; 0x27a <HLCD_vidWritecmd+0x5a>
 27a:	00 00       	nop
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 284:	92 e4       	ldi	r25, 0x42	; 66
 286:	9a 95       	dec	r25
 288:	f1 f7       	brne	.-4      	; 0x286 <HLCD_vidWritecmd+0x66>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <HLCD_vidWritecmd+0x6c>
 28c:	df 70       	andi	r29, 0x0F	; 15
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	11 c0       	rjmp	.+34     	; 0x2b4 <HLCD_vidWritecmd+0x94>
 292:	ec 2f       	mov	r30, r28
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	6d 2f       	mov	r22, r29
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	0c 2e       	mov	r0, r28
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <HLCD_vidWritecmd+0x82>
 29e:	75 95       	asr	r23
 2a0:	67 95       	ror	r22
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <HLCD_vidWritecmd+0x7e>
 2a6:	61 70       	andi	r22, 0x01	; 1
 2a8:	e6 58       	subi	r30, 0x86	; 134
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	80 81       	ld	r24, Z
 2ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 2b2:	cf 5f       	subi	r28, 0xFF	; 255
 2b4:	c4 30       	cpi	r28, 0x04	; 4
 2b6:	68 f3       	brcs	.-38     	; 0x292 <HLCD_vidWritecmd+0x72>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 2c0:	89 ef       	ldi	r24, 0xF9	; 249
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <HLCD_vidWritecmd+0xa4>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <HLCD_vidWritecmd+0xaa>
 2ca:	00 00       	nop
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 2d4:	83 ef       	ldi	r24, 0xF3	; 243
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <HLCD_vidWritecmd+0xb8>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <HLCD_vidWritecmd+0xbe>
 2de:	00 00       	nop
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	08 95       	ret

000002e8 <HLCD_vidInit>:
 2e8:	cf 93       	push	r28
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <HLCD_vidInit+0x18>
 2ee:	ec 2f       	mov	r30, r28
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	e6 58       	subi	r30, 0x86	; 134
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	80 81       	ld	r24, Z
 2fa:	0e 94 90 00 	call	0x120	; 0x120 <DIO_s8SETPinDir>
 2fe:	cf 5f       	subi	r28, 0xFF	; 255
 300:	c4 30       	cpi	r28, 0x04	; 4
 302:	a8 f3       	brcs	.-22     	; 0x2ee <HLCD_vidInit+0x6>
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 90 00 	call	0x120	; 0x120 <DIO_s8SETPinDir>
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 90 00 	call	0x120	; 0x120 <DIO_s8SETPinDir>
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	0e 94 90 00 	call	0x120	; 0x120 <DIO_s8SETPinDir>
 31c:	8f e0       	ldi	r24, 0x0F	; 15
 31e:	97 e2       	ldi	r25, 0x27	; 39
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <HLCD_vidInit+0x38>
 324:	00 c0       	rjmp	.+0      	; 0x326 <HLCD_vidInit+0x3e>
 326:	00 00       	nop
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 10 01 	call	0x220	; 0x220 <HLCD_vidWritecmd>
 32e:	89 ef       	ldi	r24, 0xF9	; 249
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <HLCD_vidInit+0x4a>
 336:	00 c0       	rjmp	.+0      	; 0x338 <HLCD_vidInit+0x50>
 338:	00 00       	nop
 33a:	88 e2       	ldi	r24, 0x28	; 40
 33c:	0e 94 10 01 	call	0x220	; 0x220 <HLCD_vidWritecmd>
 340:	89 ef       	ldi	r24, 0xF9	; 249
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <HLCD_vidInit+0x5c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <HLCD_vidInit+0x62>
 34a:	00 00       	nop
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 10 01 	call	0x220	; 0x220 <HLCD_vidWritecmd>
 352:	87 ee       	ldi	r24, 0xE7	; 231
 354:	93 e0       	ldi	r25, 0x03	; 3
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <HLCD_vidInit+0x6e>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <HLCD_vidInit+0x74>
 35c:	00 00       	nop
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	0e 94 10 01 	call	0x220	; 0x220 <HLCD_vidWritecmd>
 364:	89 ef       	ldi	r24, 0xF9	; 249
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <HLCD_vidInit+0x80>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <HLCD_vidInit+0x86>
 36e:	00 00       	nop
 370:	8e e0       	ldi	r24, 0x0E	; 14
 372:	0e 94 10 01 	call	0x220	; 0x220 <HLCD_vidWritecmd>
 376:	89 ef       	ldi	r24, 0xF9	; 249
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <HLCD_vidInit+0x92>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <HLCD_vidInit+0x98>
 380:	00 00       	nop
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <HLCD_vidWriteChar>:
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	d8 2f       	mov	r29, r24
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 39e:	1d 2f       	mov	r17, r29
 3a0:	12 95       	swap	r17
 3a2:	1f 70       	andi	r17, 0x0F	; 15
 3a4:	c0 e0       	ldi	r28, 0x00	; 0
 3a6:	11 c0       	rjmp	.+34     	; 0x3ca <HLCD_vidWriteChar+0x44>
 3a8:	ec 2f       	mov	r30, r28
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	61 2f       	mov	r22, r17
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	0c 2e       	mov	r0, r28
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <HLCD_vidWriteChar+0x32>
 3b4:	75 95       	asr	r23
 3b6:	67 95       	ror	r22
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <HLCD_vidWriteChar+0x2e>
 3bc:	61 70       	andi	r22, 0x01	; 1
 3be:	e6 58       	subi	r30, 0x86	; 134
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	80 81       	ld	r24, Z
 3c4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 3c8:	cf 5f       	subi	r28, 0xFF	; 255
 3ca:	c4 30       	cpi	r28, 0x04	; 4
 3cc:	68 f3       	brcs	.-38     	; 0x3a8 <HLCD_vidWriteChar+0x22>
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 3d6:	89 ef       	ldi	r24, 0xF9	; 249
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <HLCD_vidWriteChar+0x54>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <HLCD_vidWriteChar+0x5a>
 3e0:	00 00       	nop
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 3ea:	92 e4       	ldi	r25, 0x42	; 66
 3ec:	9a 95       	dec	r25
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <HLCD_vidWriteChar+0x66>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <HLCD_vidWriteChar+0x6c>
 3f2:	df 70       	andi	r29, 0x0F	; 15
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	11 c0       	rjmp	.+34     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f8:	ec 2f       	mov	r30, r28
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	6d 2f       	mov	r22, r29
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0c 2e       	mov	r0, r28
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	75 95       	asr	r23
 406:	67 95       	ror	r22
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	61 70       	andi	r22, 0x01	; 1
 40e:	e6 58       	subi	r30, 0x86	; 134
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	80 81       	ld	r24, Z
 414:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 418:	cf 5f       	subi	r28, 0xFF	; 255
 41a:	c4 30       	cpi	r28, 0x04	; 4
 41c:	68 f3       	brcs	.-38     	; 0x3f8 <HLCD_vidWriteChar+0x72>
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 426:	89 ef       	ldi	r24, 0xF9	; 249
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_s8SETPinVal>
 43a:	83 ef       	ldi	r24, 0xF3	; 243
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 444:	00 00       	nop
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	08 95       	ret

0000044e <HLCD_ClrDisplay>:
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 10 01 	call	0x220	; 0x220 <HLCD_vidWritecmd>
 454:	87 ee       	ldi	r24, 0xE7	; 231
 456:	93 e0       	ldi	r25, 0x03	; 3
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <HLCD_ClrDisplay+0xa>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <HLCD_ClrDisplay+0x10>
 45e:	00 00       	nop
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 10 01 	call	0x220	; 0x220 <HLCD_vidWritecmd>
 466:	87 ee       	ldi	r24, 0xE7	; 231
 468:	93 e0       	ldi	r25, 0x03	; 3
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <HLCD_ClrDisplay+0x1c>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <HLCD_ClrDisplay+0x22>
 470:	00 00       	nop
 472:	08 95       	ret

00000474 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	8c 01       	movw	r16, r24
	Uint16_t count = 0;
	Uchar8_t string = str[count];
 47e:	fc 01       	movw	r30, r24
 480:	80 81       	ld	r24, Z
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
	Uchar8_t string = str[count];
	while(string)
 486:	07 c0       	rjmp	.+14     	; 0x496 <HLCD_WriteString+0x22>
	{
		HLCD_vidWriteChar(string);
 488:	0e 94 c3 01 	call	0x386	; 0x386 <HLCD_vidWriteChar>
		string = str[++count];
 48c:	21 96       	adiw	r28, 0x01	; 1
 48e:	f8 01       	movw	r30, r16
 490:	ec 0f       	add	r30, r28
 492:	fd 1f       	adc	r31, r29
 494:	80 81       	ld	r24, Z
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
	Uchar8_t string = str[count];
	while(string)
 496:	81 11       	cpse	r24, r1
 498:	f7 cf       	rjmp	.-18     	; 0x488 <HLCD_WriteString+0x14>
	{
		HLCD_vidWriteChar(string);
		string = str[++count];
	}
}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: void
 * */
void HLCD_WriteInt(Uint32_t number)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	2a 97       	sbiw	r28, 0x0a	; 10
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4b8:	4a e0       	ldi	r20, 0x0A	; 10
 4ba:	be 01       	movw	r22, r28
 4bc:	6f 5f       	subi	r22, 0xFF	; 255
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	0e 94 81 07 	call	0xf02	; 0xf02 <__itoa_ncheck>
	Uchar8_t STR[INDEX];
	itoa(number, STR, 10);
	HLCD_WriteString(STR);
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	0e 94 3a 02 	call	0x474	; 0x474 <HLCD_WriteString>
}
 4cc:	2a 96       	adiw	r28, 0x0a	; 10
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <main>:
#include "COMMON/STD_Types.h"
#include <util/delay.h>


void main(void)
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <main+0x6>
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <main+0x8>
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
	float64_t dis = 0; 
 4ea:	19 82       	std	Y+1, r1	; 0x01
 4ec:	1a 82       	std	Y+2, r1	; 0x02
 4ee:	1b 82       	std	Y+3, r1	; 0x03
 4f0:	1c 82       	std	Y+4, r1	; 0x04
	HLCD_vidInit();
 4f2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <HLCD_vidInit>
	ultrasonic_vInit();
 4f6:	0e 94 49 00 	call	0x92	; 0x92 <ultrasonic_vInit>
	ultrasonic_vGetDistance(&dis);
 4fa:	ce 01       	movw	r24, r28
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	0e 94 54 00 	call	0xa8	; 0xa8 <ultrasonic_vGetDistance>
	HLCD_WriteInt(dis);
 502:	69 81       	ldd	r22, Y+1	; 0x01
 504:	7a 81       	ldd	r23, Y+2	; 0x02
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	9c 81       	ldd	r25, Y+4	; 0x04
 50a:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
 50e:	cb 01       	movw	r24, r22
 510:	0e 94 52 02 	call	0x4a4	; 0x4a4 <HLCD_WriteInt>
	while(1)
	{
		ultrasonic_vGetDistance(&dis);
 514:	ce 01       	movw	r24, r28
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	0e 94 54 00 	call	0xa8	; 0xa8 <ultrasonic_vGetDistance>
		HLCD_WriteInt(dis);
 51c:	69 81       	ldd	r22, Y+1	; 0x01
 51e:	7a 81       	ldd	r23, Y+2	; 0x02
 520:	8b 81       	ldd	r24, Y+3	; 0x03
 522:	9c 81       	ldd	r25, Y+4	; 0x04
 524:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
 528:	cb 01       	movw	r24, r22
 52a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <HLCD_WriteInt>
 52e:	2f e7       	ldi	r18, 0x7F	; 127
 530:	8a e1       	ldi	r24, 0x1A	; 26
 532:	96 e0       	ldi	r25, 0x06	; 6
 534:	21 50       	subi	r18, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x56>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <main+0x60>
 53e:	00 00       	nop
		_delay_ms(2000);
		HLCD_ClrDisplay();
 540:	0e 94 27 02 	call	0x44e	; 0x44e <HLCD_ClrDisplay>
 544:	e7 cf       	rjmp	.-50     	; 0x514 <main+0x36>

00000546 <DIO_WritePin>:
			switch(port)
			{
				case DIO_PORTA:	TOGGLE_BIT(DIO_PORTA_PORT_REG,pin);		break;
				case DIO_PORTB:	TOGGLE_BIT(DIO_PORTB_PORT_REG,pin);		break;
				case DIO_PORTC:	TOGGLE_BIT(DIO_PORTC_PORT_REG,pin);		break;
				case DIO_PORTD:	TOGGLE_BIT(DIO_PORTD_PORT_REG,pin);		break;
 546:	44 23       	and	r20, r20
 548:	19 f0       	breq	.+6      	; 0x550 <DIO_WritePin+0xa>
 54a:	41 30       	cpi	r20, 0x01	; 1
 54c:	a9 f1       	breq	.+106    	; 0x5b8 <DIO_WritePin+0x72>
 54e:	08 95       	ret
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	89 f0       	breq	.+34     	; 0x576 <DIO_WritePin+0x30>
 554:	28 f0       	brcs	.+10     	; 0x560 <DIO_WritePin+0x1a>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	c9 f0       	breq	.+50     	; 0x58c <DIO_WritePin+0x46>
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	11 f1       	breq	.+68     	; 0x5a2 <DIO_WritePin+0x5c>
 55e:	08 95       	ret
 560:	2b b3       	in	r18, 0x1b	; 27
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_WritePin+0x26>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_WritePin+0x22>
 570:	82 2b       	or	r24, r18
 572:	8b bb       	out	0x1b, r24	; 27
 574:	08 95       	ret
 576:	28 b3       	in	r18, 0x18	; 24
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_WritePin+0x3c>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_WritePin+0x38>
 586:	82 2b       	or	r24, r18
 588:	88 bb       	out	0x18, r24	; 24
 58a:	08 95       	ret
 58c:	25 b3       	in	r18, 0x15	; 21
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_WritePin+0x52>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_WritePin+0x4e>
 59c:	82 2b       	or	r24, r18
 59e:	85 bb       	out	0x15, r24	; 21
 5a0:	08 95       	ret
 5a2:	22 b3       	in	r18, 0x12	; 18
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_WritePin+0x68>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_WritePin+0x64>
 5b2:	82 2b       	or	r24, r18
 5b4:	82 bb       	out	0x12, r24	; 18
 5b6:	08 95       	ret
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	91 f0       	breq	.+36     	; 0x5e0 <DIO_WritePin+0x9a>
 5bc:	28 f0       	brcs	.+10     	; 0x5c8 <DIO_WritePin+0x82>
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	d9 f0       	breq	.+54     	; 0x5f8 <DIO_WritePin+0xb2>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	29 f1       	breq	.+74     	; 0x610 <DIO_WritePin+0xca>
 5c6:	08 95       	ret
 5c8:	2b b3       	in	r18, 0x1b	; 27
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_WritePin+0x8e>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_WritePin+0x8a>
 5d8:	80 95       	com	r24
 5da:	82 23       	and	r24, r18
 5dc:	8b bb       	out	0x1b, r24	; 27
 5de:	08 95       	ret
 5e0:	28 b3       	in	r18, 0x18	; 24
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_WritePin+0xa6>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_WritePin+0xa2>
 5f0:	80 95       	com	r24
 5f2:	82 23       	and	r24, r18
 5f4:	88 bb       	out	0x18, r24	; 24
 5f6:	08 95       	ret
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_WritePin+0xbe>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_WritePin+0xba>
 608:	80 95       	com	r24
 60a:	82 23       	and	r24, r18
 60c:	85 bb       	out	0x15, r24	; 21
 60e:	08 95       	ret
 610:	22 b3       	in	r18, 0x12	; 18
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_WritePin+0xd6>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_WritePin+0xd2>
 620:	80 95       	com	r24
 622:	82 23       	and	r24, r18
 624:	82 bb       	out	0x12, r24	; 18
 626:	08 95       	ret

00000628 <DIO_Initpin>:
	
	
}

void DIO_Initpin(DIO_ConfigType *config_ptr)
{
 628:	fc 01       	movw	r30, r24
	if (config_ptr->dio_mode== DIO_MODE_INPUT)
 62a:	82 81       	ldd	r24, Z+2	; 0x02
 62c:	81 11       	cpse	r24, r1
 62e:	b5 c0       	rjmp	.+362    	; 0x79a <DIO_Initpin+0x172>
	{
		
		
		switch(config_ptr->dio_port)
 630:	80 81       	ld	r24, Z
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	99 f0       	breq	.+38     	; 0x65c <DIO_Initpin+0x34>
 636:	28 f0       	brcs	.+10     	; 0x642 <DIO_Initpin+0x1a>
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	e9 f0       	breq	.+58     	; 0x676 <DIO_Initpin+0x4e>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	41 f1       	breq	.+80     	; 0x690 <DIO_Initpin+0x68>
 640:	33 c0       	rjmp	.+102    	; 0x6a8 <DIO_Initpin+0x80>
		{
			
			
			case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_DDR_REG,config_ptr->dio_pin);	break;
 642:	2a b3       	in	r18, 0x1a	; 26
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	01 80       	ldd	r0, Z+1	; 0x01
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_Initpin+0x28>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	0a 94       	dec	r0
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_Initpin+0x24>
 654:	80 95       	com	r24
 656:	82 23       	and	r24, r18
 658:	8a bb       	out	0x1a, r24	; 26
 65a:	26 c0       	rjmp	.+76     	; 0x6a8 <DIO_Initpin+0x80>
			case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_DDR_REG,config_ptr->dio_pin);	break;
 65c:	27 b3       	in	r18, 0x17	; 23
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	01 80       	ldd	r0, Z+1	; 0x01
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_Initpin+0x42>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	0a 94       	dec	r0
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_Initpin+0x3e>
 66e:	80 95       	com	r24
 670:	82 23       	and	r24, r18
 672:	87 bb       	out	0x17, r24	; 23
 674:	19 c0       	rjmp	.+50     	; 0x6a8 <DIO_Initpin+0x80>
			case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_DDR_REG,config_ptr->dio_pin);	break;
 676:	24 b3       	in	r18, 0x14	; 20
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	01 80       	ldd	r0, Z+1	; 0x01
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_Initpin+0x5c>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_Initpin+0x58>
 688:	80 95       	com	r24
 68a:	82 23       	and	r24, r18
 68c:	84 bb       	out	0x14, r24	; 20
 68e:	0c c0       	rjmp	.+24     	; 0x6a8 <DIO_Initpin+0x80>
			case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_DDR_REG,config_ptr->dio_pin);	break;
 690:	21 b3       	in	r18, 0x11	; 17
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	01 80       	ldd	r0, Z+1	; 0x01
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_Initpin+0x76>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	0a 94       	dec	r0
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_Initpin+0x72>
 6a2:	80 95       	com	r24
 6a4:	82 23       	and	r24, r18
 6a6:	81 bb       	out	0x11, r24	; 17
			default:			break;
		}

		if (config_ptr->dio_initial_value == DIOINPUT_PULLUP)
 6a8:	83 81       	ldd	r24, Z+3	; 0x03
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	c9 f5       	brne	.+114    	; 0x720 <DIO_Initpin+0xf8>
		{
			switch(config_ptr->dio_port)
 6ae:	80 81       	ld	r24, Z
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	91 f0       	breq	.+36     	; 0x6d8 <DIO_Initpin+0xb0>
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <DIO_Initpin+0x98>
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	d9 f0       	breq	.+54     	; 0x6f0 <DIO_Initpin+0xc8>
 6ba:	83 30       	cpi	r24, 0x03	; 3
 6bc:	29 f1       	breq	.+74     	; 0x708 <DIO_Initpin+0xe0>
 6be:	08 95       	ret
			{
				
				case DIO_PORTA:	SET_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
 6c0:	2b b3       	in	r18, 0x1b	; 27
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	01 80       	ldd	r0, Z+1	; 0x01
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_Initpin+0xa6>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	0a 94       	dec	r0
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_Initpin+0xa2>
 6d2:	82 2b       	or	r24, r18
 6d4:	8b bb       	out	0x1b, r24	; 27
 6d6:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
 6d8:	28 b3       	in	r18, 0x18	; 24
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	01 80       	ldd	r0, Z+1	; 0x01
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_Initpin+0xbe>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	0a 94       	dec	r0
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_Initpin+0xba>
 6ea:	82 2b       	or	r24, r18
 6ec:	88 bb       	out	0x18, r24	; 24
 6ee:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
 6f0:	25 b3       	in	r18, 0x15	; 21
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	01 80       	ldd	r0, Z+1	; 0x01
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_Initpin+0xd6>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	0a 94       	dec	r0
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_Initpin+0xd2>
 702:	82 2b       	or	r24, r18
 704:	85 bb       	out	0x15, r24	; 21
 706:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
 708:	22 b3       	in	r18, 0x12	; 18
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	01 80       	ldd	r0, Z+1	; 0x01
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_Initpin+0xee>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	0a 94       	dec	r0
 718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_Initpin+0xea>
 71a:	82 2b       	or	r24, r18
 71c:	82 bb       	out	0x12, r24	; 18
 71e:	08 95       	ret
				default:			break;
			}
		}
		else
		{
			switch(config_ptr->dio_port)
 720:	80 81       	ld	r24, Z
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	99 f0       	breq	.+38     	; 0x74c <DIO_Initpin+0x124>
 726:	28 f0       	brcs	.+10     	; 0x732 <DIO_Initpin+0x10a>
 728:	82 30       	cpi	r24, 0x02	; 2
 72a:	e9 f0       	breq	.+58     	; 0x766 <DIO_Initpin+0x13e>
 72c:	83 30       	cpi	r24, 0x03	; 3
 72e:	41 f1       	breq	.+80     	; 0x780 <DIO_Initpin+0x158>
 730:	08 95       	ret
			{
				
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
 732:	2b b3       	in	r18, 0x1b	; 27
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	01 80       	ldd	r0, Z+1	; 0x01
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_Initpin+0x118>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	0a 94       	dec	r0
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_Initpin+0x114>
 744:	80 95       	com	r24
 746:	82 23       	and	r24, r18
 748:	8b bb       	out	0x1b, r24	; 27
 74a:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
 74c:	28 b3       	in	r18, 0x18	; 24
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	01 80       	ldd	r0, Z+1	; 0x01
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_Initpin+0x132>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	0a 94       	dec	r0
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_Initpin+0x12e>
 75e:	80 95       	com	r24
 760:	82 23       	and	r24, r18
 762:	88 bb       	out	0x18, r24	; 24
 764:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
 766:	25 b3       	in	r18, 0x15	; 21
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	01 80       	ldd	r0, Z+1	; 0x01
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_Initpin+0x14c>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	0a 94       	dec	r0
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_Initpin+0x148>
 778:	80 95       	com	r24
 77a:	82 23       	and	r24, r18
 77c:	85 bb       	out	0x15, r24	; 21
 77e:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
 780:	22 b3       	in	r18, 0x12	; 18
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	01 80       	ldd	r0, Z+1	; 0x01
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_Initpin+0x166>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	0a 94       	dec	r0
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_Initpin+0x162>
 792:	80 95       	com	r24
 794:	82 23       	and	r24, r18
 796:	82 bb       	out	0x12, r24	; 18
 798:	08 95       	ret
				default:			break;
			}
			
		}
	}
	else if (config_ptr->dio_mode == DIO_MODE_OUTPUT)
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	09 f0       	breq	.+2      	; 0x7a0 <DIO_Initpin+0x178>
 79e:	b0 c0       	rjmp	.+352    	; 0x900 <__stack+0xa1>
	{
		
		switch(config_ptr->dio_port)
 7a0:	80 81       	ld	r24, Z
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	91 f0       	breq	.+36     	; 0x7ca <DIO_Initpin+0x1a2>
 7a6:	28 f0       	brcs	.+10     	; 0x7b2 <DIO_Initpin+0x18a>
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	d9 f0       	breq	.+54     	; 0x7e2 <DIO_Initpin+0x1ba>
 7ac:	83 30       	cpi	r24, 0x03	; 3
 7ae:	29 f1       	breq	.+74     	; 0x7fa <DIO_Initpin+0x1d2>
 7b0:	2f c0       	rjmp	.+94     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		{
			
			
			case DIO_PORTA:	SET_BIT(DIO_PORTA_DDR_REG,config_ptr->dio_pin);	break;
 7b2:	2a b3       	in	r18, 0x1a	; 26
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	01 80       	ldd	r0, Z+1	; 0x01
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_Initpin+0x198>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	0a 94       	dec	r0
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_Initpin+0x194>
 7c4:	82 2b       	or	r24, r18
 7c6:	8a bb       	out	0x1a, r24	; 26
 7c8:	23 c0       	rjmp	.+70     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
			case DIO_PORTB:	SET_BIT(DIO_PORTB_DDR_REG,config_ptr->dio_pin);	break;
 7ca:	27 b3       	in	r18, 0x17	; 23
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	01 80       	ldd	r0, Z+1	; 0x01
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_Initpin+0x1b0>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	0a 94       	dec	r0
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_Initpin+0x1ac>
 7dc:	82 2b       	or	r24, r18
 7de:	87 bb       	out	0x17, r24	; 23
 7e0:	17 c0       	rjmp	.+46     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
			case DIO_PORTC:	SET_BIT(DIO_PORTC_DDR_REG,config_ptr->dio_pin);	break;
 7e2:	24 b3       	in	r18, 0x14	; 20
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	01 80       	ldd	r0, Z+1	; 0x01
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_Initpin+0x1c8>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	0a 94       	dec	r0
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_Initpin+0x1c4>
 7f4:	82 2b       	or	r24, r18
 7f6:	84 bb       	out	0x14, r24	; 20
 7f8:	0b c0       	rjmp	.+22     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
			case DIO_PORTD:	SET_BIT(DIO_PORTD_DDR_REG,config_ptr->dio_pin);	break;
 7fa:	21 b3       	in	r18, 0x11	; 17
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	01 80       	ldd	r0, Z+1	; 0x01
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	0a 94       	dec	r0
 80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	82 2b       	or	r24, r18
 80e:	81 bb       	out	0x11, r24	; 17
			default:			break;
		}
		
		if (config_ptr->dio_initial_value == DIOOUTPUT_HIGH)
 810:	83 81       	ldd	r24, Z+3	; 0x03
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	c9 f5       	brne	.+114    	; 0x888 <__stack+0x29>
		{
			switch(config_ptr->dio_port)
 816:	80 81       	ld	r24, Z
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	91 f0       	breq	.+36     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 81c:	28 f0       	brcs	.+10     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 81e:	82 30       	cpi	r24, 0x02	; 2
 820:	d9 f0       	breq	.+54     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 822:	83 30       	cpi	r24, 0x03	; 3
 824:	29 f1       	breq	.+74     	; 0x870 <__stack+0x11>
 826:	08 95       	ret
			{
				
				case DIO_PORTA:	SET_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
 828:	2b b3       	in	r18, 0x1b	; 27
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	01 80       	ldd	r0, Z+1	; 0x01
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	0a 94       	dec	r0
 838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 83a:	82 2b       	or	r24, r18
 83c:	8b bb       	out	0x1b, r24	; 27
 83e:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
 840:	28 b3       	in	r18, 0x18	; 24
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	01 80       	ldd	r0, Z+1	; 0x01
 848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 852:	82 2b       	or	r24, r18
 854:	88 bb       	out	0x18, r24	; 24
 856:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
 858:	25 b3       	in	r18, 0x15	; 21
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	01 80       	ldd	r0, Z+1	; 0x01
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	0a 94       	dec	r0
 868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
 86a:	82 2b       	or	r24, r18
 86c:	85 bb       	out	0x15, r24	; 21
 86e:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
 870:	22 b3       	in	r18, 0x12	; 18
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	01 80       	ldd	r0, Z+1	; 0x01
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	82 2b       	or	r24, r18
 884:	82 bb       	out	0x12, r24	; 18
 886:	08 95       	ret
			}
			
		}
		else
		{
			switch(config_ptr->dio_port)
 888:	80 81       	ld	r24, Z
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	99 f0       	breq	.+38     	; 0x8b4 <__stack+0x55>
 88e:	28 f0       	brcs	.+10     	; 0x89a <__stack+0x3b>
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	e9 f0       	breq	.+58     	; 0x8ce <__stack+0x6f>
 894:	83 30       	cpi	r24, 0x03	; 3
 896:	41 f1       	breq	.+80     	; 0x8e8 <__stack+0x89>
 898:	08 95       	ret
			{
				
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_PORT_REG,config_ptr->dio_pin);	break;
 89a:	2b b3       	in	r18, 0x1b	; 27
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	01 80       	ldd	r0, Z+1	; 0x01
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	0a 94       	dec	r0
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	80 95       	com	r24
 8ae:	82 23       	and	r24, r18
 8b0:	8b bb       	out	0x1b, r24	; 27
 8b2:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_PORT_REG,config_ptr->dio_pin);	break;
 8b4:	28 b3       	in	r18, 0x18	; 24
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	01 80       	ldd	r0, Z+1	; 0x01
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	0a 94       	dec	r0
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
 8c6:	80 95       	com	r24
 8c8:	82 23       	and	r24, r18
 8ca:	88 bb       	out	0x18, r24	; 24
 8cc:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_PORT_REG,config_ptr->dio_pin);	break;
 8ce:	25 b3       	in	r18, 0x15	; 21
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	01 80       	ldd	r0, Z+1	; 0x01
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	0a 94       	dec	r0
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	80 95       	com	r24
 8e2:	82 23       	and	r24, r18
 8e4:	85 bb       	out	0x15, r24	; 21
 8e6:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_PORT_REG,config_ptr->dio_pin);	break;
 8e8:	22 b3       	in	r18, 0x12	; 18
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	01 80       	ldd	r0, Z+1	; 0x01
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__stack+0x97>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	0a 94       	dec	r0
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__stack+0x93>
 8fa:	80 95       	com	r24
 8fc:	82 23       	and	r24, r18
 8fe:	82 bb       	out	0x12, r24	; 18
 900:	08 95       	ret

00000902 <__vector_2>:
/*ISR(EXT_INT0)
{
	INT0_InterruptHandler();
}*/
ISR(EXT_INT1)
{
 902:	1f 92       	push	r1
 904:	0f 92       	push	r0
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	0f 92       	push	r0
 90a:	11 24       	eor	r1, r1
 90c:	2f 93       	push	r18
 90e:	3f 93       	push	r19
 910:	4f 93       	push	r20
 912:	5f 93       	push	r21
 914:	6f 93       	push	r22
 916:	7f 93       	push	r23
 918:	8f 93       	push	r24
 91a:	9f 93       	push	r25
 91c:	af 93       	push	r26
 91e:	bf 93       	push	r27
 920:	ef 93       	push	r30
 922:	ff 93       	push	r31
	INT1_InterruptHandler();
 924:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <INT1_InterruptHandler>
 928:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <INT1_InterruptHandler+0x1>
 92c:	09 95       	icall
}
 92e:	ff 91       	pop	r31
 930:	ef 91       	pop	r30
 932:	bf 91       	pop	r27
 934:	af 91       	pop	r26
 936:	9f 91       	pop	r25
 938:	8f 91       	pop	r24
 93a:	7f 91       	pop	r23
 93c:	6f 91       	pop	r22
 93e:	5f 91       	pop	r21
 940:	4f 91       	pop	r20
 942:	3f 91       	pop	r19
 944:	2f 91       	pop	r18
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <__vector_3>:
ISR(EXT_INT2)
{
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	2f 93       	push	r18
 95c:	3f 93       	push	r19
 95e:	4f 93       	push	r20
 960:	5f 93       	push	r21
 962:	6f 93       	push	r22
 964:	7f 93       	push	r23
 966:	8f 93       	push	r24
 968:	9f 93       	push	r25
 96a:	af 93       	push	r26
 96c:	bf 93       	push	r27
 96e:	ef 93       	push	r30
 970:	ff 93       	push	r31
	INT2_InterruptHandler();
 972:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <__data_end>
 976:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <__data_end+0x1>
 97a:	09 95       	icall
}
 97c:	ff 91       	pop	r31
 97e:	ef 91       	pop	r30
 980:	bf 91       	pop	r27
 982:	af 91       	pop	r26
 984:	9f 91       	pop	r25
 986:	8f 91       	pop	r24
 988:	7f 91       	pop	r23
 98a:	6f 91       	pop	r22
 98c:	5f 91       	pop	r21
 98e:	4f 91       	pop	r20
 990:	3f 91       	pop	r19
 992:	2f 91       	pop	r18
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <ICU_getValue>:
{
	//*Enable CTCA and CTCB interrupt  OCIE1A = 4, OCIE1B = 3*//*
	SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_OCIE1A_BIT);
	SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_OCIE1B_BIT);
	//*CTC mode WGM12 = 3*//*
	SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
 99e:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <ICU_g_Count>
 9a2:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <ICU_g_Count+0x1>
 9a6:	fc 01       	movw	r30, r24
 9a8:	31 83       	std	Z+1, r19	; 0x01
 9aa:	20 83       	st	Z, r18
 9ac:	08 95       	ret

000009ae <EXI_enablePIE>:
 9ae:	83 30       	cpi	r24, 0x03	; 3
 9b0:	08 f0       	brcs	.+2      	; 0x9b4 <EXI_enablePIE+0x6>
 9b2:	75 c0       	rjmp	.+234    	; 0xa9e <EXI_enablePIE+0xf0>
 9b4:	64 30       	cpi	r22, 0x04	; 4
 9b6:	08 f0       	brcs	.+2      	; 0x9ba <EXI_enablePIE+0xc>
 9b8:	74 c0       	rjmp	.+232    	; 0xaa2 <EXI_enablePIE+0xf4>
 9ba:	9f b7       	in	r25, 0x3f	; 63
 9bc:	90 68       	ori	r25, 0x80	; 128
 9be:	9f bf       	out	0x3f, r25	; 63
 9c0:	81 30       	cpi	r24, 0x01	; 1
 9c2:	81 f1       	breq	.+96     	; 0xa24 <EXI_enablePIE+0x76>
 9c4:	20 f0       	brcs	.+8      	; 0x9ce <EXI_enablePIE+0x20>
 9c6:	82 30       	cpi	r24, 0x02	; 2
 9c8:	09 f4       	brne	.+2      	; 0x9cc <EXI_enablePIE+0x1e>
 9ca:	57 c0       	rjmp	.+174    	; 0xa7a <EXI_enablePIE+0xcc>
 9cc:	6c c0       	rjmp	.+216    	; 0xaa6 <EXI_enablePIE+0xf8>
 9ce:	8b b7       	in	r24, 0x3b	; 59
 9d0:	80 64       	ori	r24, 0x40	; 64
 9d2:	8b bf       	out	0x3b, r24	; 59
 9d4:	61 30       	cpi	r22, 0x01	; 1
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <EXI_enablePIE+0x46>
 9d8:	28 f0       	brcs	.+10     	; 0x9e4 <EXI_enablePIE+0x36>
 9da:	62 30       	cpi	r22, 0x02	; 2
 9dc:	99 f0       	breq	.+38     	; 0xa04 <EXI_enablePIE+0x56>
 9de:	63 30       	cpi	r22, 0x03	; 3
 9e0:	c9 f0       	breq	.+50     	; 0xa14 <EXI_enablePIE+0x66>
 9e2:	63 c0       	rjmp	.+198    	; 0xaaa <EXI_enablePIE+0xfc>
 9e4:	85 b7       	in	r24, 0x35	; 53
 9e6:	8e 7f       	andi	r24, 0xFE	; 254
 9e8:	85 bf       	out	0x35, r24	; 53
 9ea:	85 b7       	in	r24, 0x35	; 53
 9ec:	8d 7f       	andi	r24, 0xFD	; 253
 9ee:	85 bf       	out	0x35, r24	; 53
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	08 95       	ret
 9f4:	85 b7       	in	r24, 0x35	; 53
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	85 bf       	out	0x35, r24	; 53
 9fa:	85 b7       	in	r24, 0x35	; 53
 9fc:	8d 7f       	andi	r24, 0xFD	; 253
 9fe:	85 bf       	out	0x35, r24	; 53
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	08 95       	ret
 a04:	85 b7       	in	r24, 0x35	; 53
 a06:	8e 7f       	andi	r24, 0xFE	; 254
 a08:	85 bf       	out	0x35, r24	; 53
 a0a:	85 b7       	in	r24, 0x35	; 53
 a0c:	82 60       	ori	r24, 0x02	; 2
 a0e:	85 bf       	out	0x35, r24	; 53
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	08 95       	ret
 a14:	85 b7       	in	r24, 0x35	; 53
 a16:	81 60       	ori	r24, 0x01	; 1
 a18:	85 bf       	out	0x35, r24	; 53
 a1a:	85 b7       	in	r24, 0x35	; 53
 a1c:	82 60       	ori	r24, 0x02	; 2
 a1e:	85 bf       	out	0x35, r24	; 53
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	08 95       	ret
 a24:	8b b7       	in	r24, 0x3b	; 59
 a26:	80 68       	ori	r24, 0x80	; 128
 a28:	8b bf       	out	0x3b, r24	; 59
 a2a:	61 30       	cpi	r22, 0x01	; 1
 a2c:	71 f0       	breq	.+28     	; 0xa4a <EXI_enablePIE+0x9c>
 a2e:	28 f0       	brcs	.+10     	; 0xa3a <EXI_enablePIE+0x8c>
 a30:	62 30       	cpi	r22, 0x02	; 2
 a32:	99 f0       	breq	.+38     	; 0xa5a <EXI_enablePIE+0xac>
 a34:	63 30       	cpi	r22, 0x03	; 3
 a36:	c9 f0       	breq	.+50     	; 0xa6a <EXI_enablePIE+0xbc>
 a38:	3a c0       	rjmp	.+116    	; 0xaae <EXI_enablePIE+0x100>
 a3a:	85 b7       	in	r24, 0x35	; 53
 a3c:	8b 7f       	andi	r24, 0xFB	; 251
 a3e:	85 bf       	out	0x35, r24	; 53
 a40:	85 b7       	in	r24, 0x35	; 53
 a42:	87 7f       	andi	r24, 0xF7	; 247
 a44:	85 bf       	out	0x35, r24	; 53
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	08 95       	ret
 a4a:	85 b7       	in	r24, 0x35	; 53
 a4c:	84 60       	ori	r24, 0x04	; 4
 a4e:	85 bf       	out	0x35, r24	; 53
 a50:	85 b7       	in	r24, 0x35	; 53
 a52:	87 7f       	andi	r24, 0xF7	; 247
 a54:	85 bf       	out	0x35, r24	; 53
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	08 95       	ret
 a5a:	85 b7       	in	r24, 0x35	; 53
 a5c:	8b 7f       	andi	r24, 0xFB	; 251
 a5e:	85 bf       	out	0x35, r24	; 53
 a60:	85 b7       	in	r24, 0x35	; 53
 a62:	88 60       	ori	r24, 0x08	; 8
 a64:	85 bf       	out	0x35, r24	; 53
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	08 95       	ret
 a6a:	85 b7       	in	r24, 0x35	; 53
 a6c:	84 60       	ori	r24, 0x04	; 4
 a6e:	85 bf       	out	0x35, r24	; 53
 a70:	85 b7       	in	r24, 0x35	; 53
 a72:	88 60       	ori	r24, 0x08	; 8
 a74:	85 bf       	out	0x35, r24	; 53
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	08 95       	ret
 a7a:	8b b7       	in	r24, 0x3b	; 59
 a7c:	80 62       	ori	r24, 0x20	; 32
 a7e:	8b bf       	out	0x3b, r24	; 59
 a80:	62 30       	cpi	r22, 0x02	; 2
 a82:	19 f0       	breq	.+6      	; 0xa8a <EXI_enablePIE+0xdc>
 a84:	63 30       	cpi	r22, 0x03	; 3
 a86:	31 f0       	breq	.+12     	; 0xa94 <EXI_enablePIE+0xe6>
 a88:	14 c0       	rjmp	.+40     	; 0xab2 <EXI_enablePIE+0x104>
 a8a:	84 b7       	in	r24, 0x34	; 52
 a8c:	8f 7b       	andi	r24, 0xBF	; 191
 a8e:	84 bf       	out	0x34, r24	; 52
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	08 95       	ret
 a94:	84 b7       	in	r24, 0x34	; 52
 a96:	80 64       	ori	r24, 0x40	; 64
 a98:	84 bf       	out	0x34, r24	; 52
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	08 95       	ret
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	08 95       	ret
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	08 95       	ret
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	08 95       	ret
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	08 95       	ret
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	08 95       	ret
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	08 95       	ret

00000ab6 <TIMER_tmr1NormalModeInit>:
 ab6:	88 23       	and	r24, r24
 ab8:	19 f0       	breq	.+6      	; 0xac0 <TIMER_tmr1NormalModeInit+0xa>
 aba:	81 30       	cpi	r24, 0x01	; 1
 abc:	d9 f0       	breq	.+54     	; 0xaf4 <TIMER_tmr1NormalModeInit+0x3e>
 abe:	2e c0       	rjmp	.+92     	; 0xb1c <TIMER_tmr1NormalModeInit+0x66>
 ac0:	8f b5       	in	r24, 0x2f	; 47
 ac2:	8e 7f       	andi	r24, 0xFE	; 254
 ac4:	8f bd       	out	0x2f, r24	; 47
 ac6:	8f b5       	in	r24, 0x2f	; 47
 ac8:	8d 7f       	andi	r24, 0xFD	; 253
 aca:	8f bd       	out	0x2f, r24	; 47
 acc:	8e b5       	in	r24, 0x2e	; 46
 ace:	87 7f       	andi	r24, 0xF7	; 247
 ad0:	8e bd       	out	0x2e, r24	; 46
 ad2:	8e b5       	in	r24, 0x2e	; 46
 ad4:	8f 7e       	andi	r24, 0xEF	; 239
 ad6:	8e bd       	out	0x2e, r24	; 46
 ad8:	8f b5       	in	r24, 0x2f	; 47
 ada:	88 60       	ori	r24, 0x08	; 8
 adc:	8f bd       	out	0x2f, r24	; 47
 ade:	8f b5       	in	r24, 0x2f	; 47
 ae0:	84 60       	ori	r24, 0x04	; 4
 ae2:	8f bd       	out	0x2f, r24	; 47
 ae4:	8f b7       	in	r24, 0x3f	; 63
 ae6:	80 68       	ori	r24, 0x80	; 128
 ae8:	8f bf       	out	0x3f, r24	; 63
 aea:	89 b7       	in	r24, 0x39	; 57
 aec:	84 60       	ori	r24, 0x04	; 4
 aee:	89 bf       	out	0x39, r24	; 57
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	08 95       	ret
 af4:	8f b5       	in	r24, 0x2f	; 47
 af6:	8e 7f       	andi	r24, 0xFE	; 254
 af8:	8f bd       	out	0x2f, r24	; 47
 afa:	8f b5       	in	r24, 0x2f	; 47
 afc:	8d 7f       	andi	r24, 0xFD	; 253
 afe:	8f bd       	out	0x2f, r24	; 47
 b00:	8e b5       	in	r24, 0x2e	; 46
 b02:	87 7f       	andi	r24, 0xF7	; 247
 b04:	8e bd       	out	0x2e, r24	; 46
 b06:	8e b5       	in	r24, 0x2e	; 46
 b08:	8f 7e       	andi	r24, 0xEF	; 239
 b0a:	8e bd       	out	0x2e, r24	; 46
 b0c:	8f b5       	in	r24, 0x2f	; 47
 b0e:	88 60       	ori	r24, 0x08	; 8
 b10:	8f bd       	out	0x2f, r24	; 47
 b12:	8f b5       	in	r24, 0x2f	; 47
 b14:	84 60       	ori	r24, 0x04	; 4
 b16:	8f bd       	out	0x2f, r24	; 47
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	08 95       	ret
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	08 95       	ret

00000b20 <TIMER_tmr1Start>:
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1Start(Uint16_t u16_a_prescaler)
{
	//select the required prescaler value
	switch(u16_a_prescaler)
 b20:	80 34       	cpi	r24, 0x40	; 64
 b22:	91 05       	cpc	r25, r1
 b24:	29 f1       	breq	.+74     	; 0xb70 <TIMER_tmr1Start+0x50>
 b26:	30 f4       	brcc	.+12     	; 0xb34 <TIMER_tmr1Start+0x14>
 b28:	81 30       	cpi	r24, 0x01	; 1
 b2a:	91 05       	cpc	r25, r1
 b2c:	59 f0       	breq	.+22     	; 0xb44 <TIMER_tmr1Start+0x24>
 b2e:	08 97       	sbiw	r24, 0x08	; 8
 b30:	a1 f0       	breq	.+40     	; 0xb5a <TIMER_tmr1Start+0x3a>
 b32:	3f c0       	rjmp	.+126    	; 0xbb2 <TIMER_tmr1Start+0x92>
 b34:	81 15       	cp	r24, r1
 b36:	21 e0       	ldi	r18, 0x01	; 1
 b38:	92 07       	cpc	r25, r18
 b3a:	29 f1       	breq	.+74     	; 0xb86 <TIMER_tmr1Start+0x66>
 b3c:	81 15       	cp	r24, r1
 b3e:	94 40       	sbci	r25, 0x04	; 4
 b40:	69 f1       	breq	.+90     	; 0xb9c <TIMER_tmr1Start+0x7c>
 b42:	37 c0       	rjmp	.+110    	; 0xbb2 <TIMER_tmr1Start+0x92>
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
 b44:	8e b5       	in	r24, 0x2e	; 46
 b46:	8d 7f       	andi	r24, 0xFD	; 253
 b48:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
 b4a:	8e b5       	in	r24, 0x2e	; 46
 b4c:	8b 7f       	andi	r24, 0xFB	; 251
 b4e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
 b50:	8e b5       	in	r24, 0x2e	; 46
 b52:	81 60       	ori	r24, 0x01	; 1
 b54:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
 b56:	80 e0       	ldi	r24, 0x00	; 0
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
 b58:	08 95       	ret
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
 b5a:	8e b5       	in	r24, 0x2e	; 46
 b5c:	8e 7f       	andi	r24, 0xFE	; 254
 b5e:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
 b60:	8e b5       	in	r24, 0x2e	; 46
 b62:	8b 7f       	andi	r24, 0xFB	; 251
 b64:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
 b66:	8e b5       	in	r24, 0x2e	; 46
 b68:	82 60       	ori	r24, 0x02	; 2
 b6a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
 b6c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		break;
 b6e:	08 95       	ret
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
 b70:	8e b5       	in	r24, 0x2e	; 46
 b72:	8b 7f       	andi	r24, 0xFB	; 251
 b74:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
 b76:	8e b5       	in	r24, 0x2e	; 46
 b78:	82 60       	ori	r24, 0x02	; 2
 b7a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
 b7c:	8e b5       	in	r24, 0x2e	; 46
 b7e:	81 60       	ori	r24, 0x01	; 1
 b80:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
 b82:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
 b84:	08 95       	ret
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
 b86:	8e b5       	in	r24, 0x2e	; 46
 b88:	8d 7f       	andi	r24, 0xFD	; 253
 b8a:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
 b8c:	8e b5       	in	r24, 0x2e	; 46
 b8e:	8e 7f       	andi	r24, 0xFE	; 254
 b90:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
 b92:	8e b5       	in	r24, 0x2e	; 46
 b94:	84 60       	ori	r24, 0x04	; 4
 b96:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
 b98:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		break;
 b9a:	08 95       	ret
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
 b9c:	8e b5       	in	r24, 0x2e	; 46
 b9e:	8d 7f       	andi	r24, 0xFD	; 253
 ba0:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
 ba2:	8e b5       	in	r24, 0x2e	; 46
 ba4:	84 60       	ori	r24, 0x04	; 4
 ba6:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
 ba8:	8e b5       	in	r24, 0x2e	; 46
 baa:	81 60       	ori	r24, 0x01	; 1
 bac:	8e bd       	out	0x2e, r24	; 46
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
 bae:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
 bb0:	08 95       	ret
	default:
		return TIMER_ERROR;
 bb2:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
 bb4:	08 95       	ret

00000bb6 <TIMER_tmr1Stop>:

void TIMER_tmr1Stop(void)
{
 //Stop the timer by clearing the prescaler

	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
 bb6:	8e b5       	in	r24, 0x2e	; 46
 bb8:	8e 7f       	andi	r24, 0xFE	; 254
 bba:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
 bbc:	8e b5       	in	r24, 0x2e	; 46
 bbe:	8d 7f       	andi	r24, 0xFD	; 253
 bc0:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
 bc2:	8e b5       	in	r24, 0x2e	; 46
 bc4:	8b 7f       	andi	r24, 0xFB	; 251
 bc6:	8e bd       	out	0x2e, r24	; 46
 bc8:	08 95       	ret

00000bca <ICU_RisingEdgeCapture>:
 * @param[in] void.
 *
 * @return void.
 */
void ICU_RisingEdgeCapture(void)
{
 bca:	cf 93       	push	r28
 bcc:	df 93       	push	r29
	TIMER_tmr1NormalModeInit(ST_g_softwareICU->timer1_ISR);
 bce:	ce e7       	ldi	r28, 0x7E	; 126
 bd0:	d0 e0       	ldi	r29, 0x00	; 0
 bd2:	8b 81       	ldd	r24, Y+3	; 0x03
 bd4:	0e 94 5b 05 	call	0xab6	; 0xab6 <TIMER_tmr1NormalModeInit>
	TIMER_tmr1Stop();
 bd8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TIMER_tmr1Stop>
	EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_firstSenseControl );
 bdc:	69 81       	ldd	r22, Y+1	; 0x01
 bde:	88 81       	ld	r24, Y
 be0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <EXI_enablePIE>
	ICU_g_edgeFlag = RISING;
 be4:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <ICU_g_edgeFlag>
	TIMER_tmr1Start(1);
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 90 05 	call	0xb20	; 0xb20 <TIMER_tmr1Start>
}
 bf0:	df 91       	pop	r29
 bf2:	cf 91       	pop	r28
 bf4:	08 95       	ret

00000bf6 <__vector_1>:
	
/**
 * ISR function implementation of INT0
 * */
void __vector_1( void )
{
 bf6:	1f 92       	push	r1
 bf8:	0f 92       	push	r0
 bfa:	0f b6       	in	r0, 0x3f	; 63
 bfc:	0f 92       	push	r0
 bfe:	11 24       	eor	r1, r1
 c00:	2f 93       	push	r18
 c02:	3f 93       	push	r19
 c04:	4f 93       	push	r20
 c06:	5f 93       	push	r21
 c08:	6f 93       	push	r22
 c0a:	7f 93       	push	r23
 c0c:	8f 93       	push	r24
 c0e:	9f 93       	push	r25
 c10:	af 93       	push	r26
 c12:	bf 93       	push	r27
 c14:	ef 93       	push	r30
 c16:	ff 93       	push	r31
    /* Save the current value of the timer/counter register  */
	TIMER_g_timer1RegValue = TMR_U16_TCNT1_REG;
 c18:	8c b5       	in	r24, 0x2c	; 44
 c1a:	9d b5       	in	r25, 0x2d	; 45
 c1c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <TIMER_g_timer1RegValue+0x1>
 c20:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <TIMER_g_timer1RegValue>
	if(ICU_g_edgeFlag == RISING)
 c24:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <ICU_g_edgeFlag>
 c28:	21 11       	cpse	r18, r1
 c2a:	14 c0       	rjmp	.+40     	; 0xc54 <__vector_1+0x5e>
	{
		ICU_g_ValueRising = TIMER_g_timer1RegValue;
 c2c:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <ICU_g_ValueRising+0x1>
 c30:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <ICU_g_ValueRising>
		/* Clear Timer counter */
		TMR_U16_TCNT1_REG = 0;
 c34:	1d bc       	out	0x2d, r1	; 45
 c36:	1c bc       	out	0x2c, r1	; 44
		/* Set the external interrupt event at falling edge.*/
		EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_secondSenseControl );
 c38:	ee e7       	ldi	r30, 0x7E	; 126
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	62 81       	ldd	r22, Z+2	; 0x02
 c3e:	80 81       	ld	r24, Z
 c40:	0e 94 d7 04 	call	0x9ae	; 0x9ae <EXI_enablePIE>
		/* Clear Timer overflow count */
		u32_g_timer1Overflow = 0;
 c44:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <u32_g_timer1Overflow+0x1>
 c48:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <u32_g_timer1Overflow>
		ICU_g_edgeFlag = FALLING;
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <ICU_g_edgeFlag>
 c52:	13 c0       	rjmp	.+38     	; 0xc7a <__vector_1+0x84>
	}
	else
	{
		ICU_g_ValueFalling = TIMER_g_timer1RegValue;
 c54:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <ICU_g_ValueFalling+0x1>
 c58:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <ICU_g_ValueFalling>
		ICU_g_Count = TIMER_g_timer1RegValue + (65535 * u32_g_timer1Overflow);
 c5c:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <u32_g_timer1Overflow>
 c60:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <u32_g_timer1Overflow+0x1>
 c64:	82 1b       	sub	r24, r18
 c66:	93 0b       	sbc	r25, r19
 c68:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <ICU_g_Count+0x1>
 c6c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <ICU_g_Count>
		/* Stop timer1 */
		TIMER_tmr1Stop();
 c70:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TIMER_tmr1Stop>
		ICU_g_flag = 1;
 c74:	81 e0       	ldi	r24, 0x01	; 1
 c76:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <ICU_g_flag>
	}

}	
 c7a:	ff 91       	pop	r31
 c7c:	ef 91       	pop	r30
 c7e:	bf 91       	pop	r27
 c80:	af 91       	pop	r26
 c82:	9f 91       	pop	r25
 c84:	8f 91       	pop	r24
 c86:	7f 91       	pop	r23
 c88:	6f 91       	pop	r22
 c8a:	5f 91       	pop	r21
 c8c:	4f 91       	pop	r20
 c8e:	3f 91       	pop	r19
 c90:	2f 91       	pop	r18
 c92:	0f 90       	pop	r0
 c94:	0f be       	out	0x3f, r0	; 63
 c96:	0f 90       	pop	r0
 c98:	1f 90       	pop	r1
 c9a:	18 95       	reti

00000c9c <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
 c9c:	8f b7       	in	r24, 0x3f	; 63
 c9e:	80 68       	ori	r24, 0x80	; 128
 ca0:	8f bf       	out	0x3f, r24	; 63
 ca2:	08 95       	ret

00000ca4 <__divsf3>:
 ca4:	0e 94 66 06 	call	0xccc	; 0xccc <__divsf3x>
 ca8:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__fp_round>
 cac:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_pscB>
 cb0:	58 f0       	brcs	.+22     	; 0xcc8 <__divsf3+0x24>
 cb2:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_pscA>
 cb6:	40 f0       	brcs	.+16     	; 0xcc8 <__divsf3+0x24>
 cb8:	29 f4       	brne	.+10     	; 0xcc4 <__divsf3+0x20>
 cba:	5f 3f       	cpi	r21, 0xFF	; 255
 cbc:	29 f0       	breq	.+10     	; 0xcc8 <__divsf3+0x24>
 cbe:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_inf>
 cc2:	51 11       	cpse	r21, r1
 cc4:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_szero>
 cc8:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_nan>

00000ccc <__divsf3x>:
 ccc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fp_split3>
 cd0:	68 f3       	brcs	.-38     	; 0xcac <__divsf3+0x8>

00000cd2 <__divsf3_pse>:
 cd2:	99 23       	and	r25, r25
 cd4:	b1 f3       	breq	.-20     	; 0xcc2 <__divsf3+0x1e>
 cd6:	55 23       	and	r21, r21
 cd8:	91 f3       	breq	.-28     	; 0xcbe <__divsf3+0x1a>
 cda:	95 1b       	sub	r25, r21
 cdc:	55 0b       	sbc	r21, r21
 cde:	bb 27       	eor	r27, r27
 ce0:	aa 27       	eor	r26, r26
 ce2:	62 17       	cp	r22, r18
 ce4:	73 07       	cpc	r23, r19
 ce6:	84 07       	cpc	r24, r20
 ce8:	38 f0       	brcs	.+14     	; 0xcf8 <__divsf3_pse+0x26>
 cea:	9f 5f       	subi	r25, 0xFF	; 255
 cec:	5f 4f       	sbci	r21, 0xFF	; 255
 cee:	22 0f       	add	r18, r18
 cf0:	33 1f       	adc	r19, r19
 cf2:	44 1f       	adc	r20, r20
 cf4:	aa 1f       	adc	r26, r26
 cf6:	a9 f3       	breq	.-22     	; 0xce2 <__divsf3_pse+0x10>
 cf8:	35 d0       	rcall	.+106    	; 0xd64 <__divsf3_pse+0x92>
 cfa:	0e 2e       	mov	r0, r30
 cfc:	3a f0       	brmi	.+14     	; 0xd0c <__divsf3_pse+0x3a>
 cfe:	e0 e8       	ldi	r30, 0x80	; 128
 d00:	32 d0       	rcall	.+100    	; 0xd66 <__divsf3_pse+0x94>
 d02:	91 50       	subi	r25, 0x01	; 1
 d04:	50 40       	sbci	r21, 0x00	; 0
 d06:	e6 95       	lsr	r30
 d08:	00 1c       	adc	r0, r0
 d0a:	ca f7       	brpl	.-14     	; 0xcfe <__divsf3_pse+0x2c>
 d0c:	2b d0       	rcall	.+86     	; 0xd64 <__divsf3_pse+0x92>
 d0e:	fe 2f       	mov	r31, r30
 d10:	29 d0       	rcall	.+82     	; 0xd64 <__divsf3_pse+0x92>
 d12:	66 0f       	add	r22, r22
 d14:	77 1f       	adc	r23, r23
 d16:	88 1f       	adc	r24, r24
 d18:	bb 1f       	adc	r27, r27
 d1a:	26 17       	cp	r18, r22
 d1c:	37 07       	cpc	r19, r23
 d1e:	48 07       	cpc	r20, r24
 d20:	ab 07       	cpc	r26, r27
 d22:	b0 e8       	ldi	r27, 0x80	; 128
 d24:	09 f0       	breq	.+2      	; 0xd28 <__divsf3_pse+0x56>
 d26:	bb 0b       	sbc	r27, r27
 d28:	80 2d       	mov	r24, r0
 d2a:	bf 01       	movw	r22, r30
 d2c:	ff 27       	eor	r31, r31
 d2e:	93 58       	subi	r25, 0x83	; 131
 d30:	5f 4f       	sbci	r21, 0xFF	; 255
 d32:	3a f0       	brmi	.+14     	; 0xd42 <__divsf3_pse+0x70>
 d34:	9e 3f       	cpi	r25, 0xFE	; 254
 d36:	51 05       	cpc	r21, r1
 d38:	78 f0       	brcs	.+30     	; 0xd58 <__divsf3_pse+0x86>
 d3a:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_inf>
 d3e:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_szero>
 d42:	5f 3f       	cpi	r21, 0xFF	; 255
 d44:	e4 f3       	brlt	.-8      	; 0xd3e <__divsf3_pse+0x6c>
 d46:	98 3e       	cpi	r25, 0xE8	; 232
 d48:	d4 f3       	brlt	.-12     	; 0xd3e <__divsf3_pse+0x6c>
 d4a:	86 95       	lsr	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	b7 95       	ror	r27
 d52:	f7 95       	ror	r31
 d54:	9f 5f       	subi	r25, 0xFF	; 255
 d56:	c9 f7       	brne	.-14     	; 0xd4a <__divsf3_pse+0x78>
 d58:	88 0f       	add	r24, r24
 d5a:	91 1d       	adc	r25, r1
 d5c:	96 95       	lsr	r25
 d5e:	87 95       	ror	r24
 d60:	97 f9       	bld	r25, 7
 d62:	08 95       	ret
 d64:	e1 e0       	ldi	r30, 0x01	; 1
 d66:	66 0f       	add	r22, r22
 d68:	77 1f       	adc	r23, r23
 d6a:	88 1f       	adc	r24, r24
 d6c:	bb 1f       	adc	r27, r27
 d6e:	62 17       	cp	r22, r18
 d70:	73 07       	cpc	r23, r19
 d72:	84 07       	cpc	r24, r20
 d74:	ba 07       	cpc	r27, r26
 d76:	20 f0       	brcs	.+8      	; 0xd80 <__divsf3_pse+0xae>
 d78:	62 1b       	sub	r22, r18
 d7a:	73 0b       	sbc	r23, r19
 d7c:	84 0b       	sbc	r24, r20
 d7e:	ba 0b       	sbc	r27, r26
 d80:	ee 1f       	adc	r30, r30
 d82:	88 f7       	brcc	.-30     	; 0xd66 <__divsf3_pse+0x94>
 d84:	e0 95       	com	r30
 d86:	08 95       	ret

00000d88 <__fixunssfsi>:
 d88:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_splitA>
 d8c:	88 f0       	brcs	.+34     	; 0xdb0 <__fixunssfsi+0x28>
 d8e:	9f 57       	subi	r25, 0x7F	; 127
 d90:	98 f0       	brcs	.+38     	; 0xdb8 <__fixunssfsi+0x30>
 d92:	b9 2f       	mov	r27, r25
 d94:	99 27       	eor	r25, r25
 d96:	b7 51       	subi	r27, 0x17	; 23
 d98:	b0 f0       	brcs	.+44     	; 0xdc6 <__fixunssfsi+0x3e>
 d9a:	e1 f0       	breq	.+56     	; 0xdd4 <__fixunssfsi+0x4c>
 d9c:	66 0f       	add	r22, r22
 d9e:	77 1f       	adc	r23, r23
 da0:	88 1f       	adc	r24, r24
 da2:	99 1f       	adc	r25, r25
 da4:	1a f0       	brmi	.+6      	; 0xdac <__fixunssfsi+0x24>
 da6:	ba 95       	dec	r27
 da8:	c9 f7       	brne	.-14     	; 0xd9c <__fixunssfsi+0x14>
 daa:	14 c0       	rjmp	.+40     	; 0xdd4 <__fixunssfsi+0x4c>
 dac:	b1 30       	cpi	r27, 0x01	; 1
 dae:	91 f0       	breq	.+36     	; 0xdd4 <__fixunssfsi+0x4c>
 db0:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_zero>
 db4:	b1 e0       	ldi	r27, 0x01	; 1
 db6:	08 95       	ret
 db8:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_zero>
 dbc:	67 2f       	mov	r22, r23
 dbe:	78 2f       	mov	r23, r24
 dc0:	88 27       	eor	r24, r24
 dc2:	b8 5f       	subi	r27, 0xF8	; 248
 dc4:	39 f0       	breq	.+14     	; 0xdd4 <__fixunssfsi+0x4c>
 dc6:	b9 3f       	cpi	r27, 0xF9	; 249
 dc8:	cc f3       	brlt	.-14     	; 0xdbc <__fixunssfsi+0x34>
 dca:	86 95       	lsr	r24
 dcc:	77 95       	ror	r23
 dce:	67 95       	ror	r22
 dd0:	b3 95       	inc	r27
 dd2:	d9 f7       	brne	.-10     	; 0xdca <__fixunssfsi+0x42>
 dd4:	3e f4       	brtc	.+14     	; 0xde4 <__fixunssfsi+0x5c>
 dd6:	90 95       	com	r25
 dd8:	80 95       	com	r24
 dda:	70 95       	com	r23
 ddc:	61 95       	neg	r22
 dde:	7f 4f       	sbci	r23, 0xFF	; 255
 de0:	8f 4f       	sbci	r24, 0xFF	; 255
 de2:	9f 4f       	sbci	r25, 0xFF	; 255
 de4:	08 95       	ret

00000de6 <__floatunsisf>:
 de6:	e8 94       	clt
 de8:	09 c0       	rjmp	.+18     	; 0xdfc <__floatsisf+0x12>

00000dea <__floatsisf>:
 dea:	97 fb       	bst	r25, 7
 dec:	3e f4       	brtc	.+14     	; 0xdfc <__floatsisf+0x12>
 dee:	90 95       	com	r25
 df0:	80 95       	com	r24
 df2:	70 95       	com	r23
 df4:	61 95       	neg	r22
 df6:	7f 4f       	sbci	r23, 0xFF	; 255
 df8:	8f 4f       	sbci	r24, 0xFF	; 255
 dfa:	9f 4f       	sbci	r25, 0xFF	; 255
 dfc:	99 23       	and	r25, r25
 dfe:	a9 f0       	breq	.+42     	; 0xe2a <__floatsisf+0x40>
 e00:	f9 2f       	mov	r31, r25
 e02:	96 e9       	ldi	r25, 0x96	; 150
 e04:	bb 27       	eor	r27, r27
 e06:	93 95       	inc	r25
 e08:	f6 95       	lsr	r31
 e0a:	87 95       	ror	r24
 e0c:	77 95       	ror	r23
 e0e:	67 95       	ror	r22
 e10:	b7 95       	ror	r27
 e12:	f1 11       	cpse	r31, r1
 e14:	f8 cf       	rjmp	.-16     	; 0xe06 <__floatsisf+0x1c>
 e16:	fa f4       	brpl	.+62     	; 0xe56 <__floatsisf+0x6c>
 e18:	bb 0f       	add	r27, r27
 e1a:	11 f4       	brne	.+4      	; 0xe20 <__floatsisf+0x36>
 e1c:	60 ff       	sbrs	r22, 0
 e1e:	1b c0       	rjmp	.+54     	; 0xe56 <__floatsisf+0x6c>
 e20:	6f 5f       	subi	r22, 0xFF	; 255
 e22:	7f 4f       	sbci	r23, 0xFF	; 255
 e24:	8f 4f       	sbci	r24, 0xFF	; 255
 e26:	9f 4f       	sbci	r25, 0xFF	; 255
 e28:	16 c0       	rjmp	.+44     	; 0xe56 <__floatsisf+0x6c>
 e2a:	88 23       	and	r24, r24
 e2c:	11 f0       	breq	.+4      	; 0xe32 <__floatsisf+0x48>
 e2e:	96 e9       	ldi	r25, 0x96	; 150
 e30:	11 c0       	rjmp	.+34     	; 0xe54 <__floatsisf+0x6a>
 e32:	77 23       	and	r23, r23
 e34:	21 f0       	breq	.+8      	; 0xe3e <__floatsisf+0x54>
 e36:	9e e8       	ldi	r25, 0x8E	; 142
 e38:	87 2f       	mov	r24, r23
 e3a:	76 2f       	mov	r23, r22
 e3c:	05 c0       	rjmp	.+10     	; 0xe48 <__floatsisf+0x5e>
 e3e:	66 23       	and	r22, r22
 e40:	71 f0       	breq	.+28     	; 0xe5e <__floatsisf+0x74>
 e42:	96 e8       	ldi	r25, 0x86	; 134
 e44:	86 2f       	mov	r24, r22
 e46:	70 e0       	ldi	r23, 0x00	; 0
 e48:	60 e0       	ldi	r22, 0x00	; 0
 e4a:	2a f0       	brmi	.+10     	; 0xe56 <__floatsisf+0x6c>
 e4c:	9a 95       	dec	r25
 e4e:	66 0f       	add	r22, r22
 e50:	77 1f       	adc	r23, r23
 e52:	88 1f       	adc	r24, r24
 e54:	da f7       	brpl	.-10     	; 0xe4c <__floatsisf+0x62>
 e56:	88 0f       	add	r24, r24
 e58:	96 95       	lsr	r25
 e5a:	87 95       	ror	r24
 e5c:	97 f9       	bld	r25, 7
 e5e:	08 95       	ret

00000e60 <__fp_inf>:
 e60:	97 f9       	bld	r25, 7
 e62:	9f 67       	ori	r25, 0x7F	; 127
 e64:	80 e8       	ldi	r24, 0x80	; 128
 e66:	70 e0       	ldi	r23, 0x00	; 0
 e68:	60 e0       	ldi	r22, 0x00	; 0
 e6a:	08 95       	ret

00000e6c <__fp_nan>:
 e6c:	9f ef       	ldi	r25, 0xFF	; 255
 e6e:	80 ec       	ldi	r24, 0xC0	; 192
 e70:	08 95       	ret

00000e72 <__fp_pscA>:
 e72:	00 24       	eor	r0, r0
 e74:	0a 94       	dec	r0
 e76:	16 16       	cp	r1, r22
 e78:	17 06       	cpc	r1, r23
 e7a:	18 06       	cpc	r1, r24
 e7c:	09 06       	cpc	r0, r25
 e7e:	08 95       	ret

00000e80 <__fp_pscB>:
 e80:	00 24       	eor	r0, r0
 e82:	0a 94       	dec	r0
 e84:	12 16       	cp	r1, r18
 e86:	13 06       	cpc	r1, r19
 e88:	14 06       	cpc	r1, r20
 e8a:	05 06       	cpc	r0, r21
 e8c:	08 95       	ret

00000e8e <__fp_round>:
 e8e:	09 2e       	mov	r0, r25
 e90:	03 94       	inc	r0
 e92:	00 0c       	add	r0, r0
 e94:	11 f4       	brne	.+4      	; 0xe9a <__fp_round+0xc>
 e96:	88 23       	and	r24, r24
 e98:	52 f0       	brmi	.+20     	; 0xeae <__fp_round+0x20>
 e9a:	bb 0f       	add	r27, r27
 e9c:	40 f4       	brcc	.+16     	; 0xeae <__fp_round+0x20>
 e9e:	bf 2b       	or	r27, r31
 ea0:	11 f4       	brne	.+4      	; 0xea6 <__fp_round+0x18>
 ea2:	60 ff       	sbrs	r22, 0
 ea4:	04 c0       	rjmp	.+8      	; 0xeae <__fp_round+0x20>
 ea6:	6f 5f       	subi	r22, 0xFF	; 255
 ea8:	7f 4f       	sbci	r23, 0xFF	; 255
 eaa:	8f 4f       	sbci	r24, 0xFF	; 255
 eac:	9f 4f       	sbci	r25, 0xFF	; 255
 eae:	08 95       	ret

00000eb0 <__fp_split3>:
 eb0:	57 fd       	sbrc	r21, 7
 eb2:	90 58       	subi	r25, 0x80	; 128
 eb4:	44 0f       	add	r20, r20
 eb6:	55 1f       	adc	r21, r21
 eb8:	59 f0       	breq	.+22     	; 0xed0 <__fp_splitA+0x10>
 eba:	5f 3f       	cpi	r21, 0xFF	; 255
 ebc:	71 f0       	breq	.+28     	; 0xeda <__fp_splitA+0x1a>
 ebe:	47 95       	ror	r20

00000ec0 <__fp_splitA>:
 ec0:	88 0f       	add	r24, r24
 ec2:	97 fb       	bst	r25, 7
 ec4:	99 1f       	adc	r25, r25
 ec6:	61 f0       	breq	.+24     	; 0xee0 <__fp_splitA+0x20>
 ec8:	9f 3f       	cpi	r25, 0xFF	; 255
 eca:	79 f0       	breq	.+30     	; 0xeea <__fp_splitA+0x2a>
 ecc:	87 95       	ror	r24
 ece:	08 95       	ret
 ed0:	12 16       	cp	r1, r18
 ed2:	13 06       	cpc	r1, r19
 ed4:	14 06       	cpc	r1, r20
 ed6:	55 1f       	adc	r21, r21
 ed8:	f2 cf       	rjmp	.-28     	; 0xebe <__fp_split3+0xe>
 eda:	46 95       	lsr	r20
 edc:	f1 df       	rcall	.-30     	; 0xec0 <__fp_splitA>
 ede:	08 c0       	rjmp	.+16     	; 0xef0 <__fp_splitA+0x30>
 ee0:	16 16       	cp	r1, r22
 ee2:	17 06       	cpc	r1, r23
 ee4:	18 06       	cpc	r1, r24
 ee6:	99 1f       	adc	r25, r25
 ee8:	f1 cf       	rjmp	.-30     	; 0xecc <__fp_splitA+0xc>
 eea:	86 95       	lsr	r24
 eec:	71 05       	cpc	r23, r1
 eee:	61 05       	cpc	r22, r1
 ef0:	08 94       	sec
 ef2:	08 95       	ret

00000ef4 <__fp_zero>:
 ef4:	e8 94       	clt

00000ef6 <__fp_szero>:
 ef6:	bb 27       	eor	r27, r27
 ef8:	66 27       	eor	r22, r22
 efa:	77 27       	eor	r23, r23
 efc:	cb 01       	movw	r24, r22
 efe:	97 f9       	bld	r25, 7
 f00:	08 95       	ret

00000f02 <__itoa_ncheck>:
 f02:	bb 27       	eor	r27, r27
 f04:	4a 30       	cpi	r20, 0x0A	; 10
 f06:	31 f4       	brne	.+12     	; 0xf14 <__itoa_ncheck+0x12>
 f08:	99 23       	and	r25, r25
 f0a:	22 f4       	brpl	.+8      	; 0xf14 <__itoa_ncheck+0x12>
 f0c:	bd e2       	ldi	r27, 0x2D	; 45
 f0e:	90 95       	com	r25
 f10:	81 95       	neg	r24
 f12:	9f 4f       	sbci	r25, 0xFF	; 255
 f14:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__utoa_common>

00000f18 <__utoa_ncheck>:
 f18:	bb 27       	eor	r27, r27

00000f1a <__utoa_common>:
 f1a:	fb 01       	movw	r30, r22
 f1c:	55 27       	eor	r21, r21
 f1e:	aa 27       	eor	r26, r26
 f20:	88 0f       	add	r24, r24
 f22:	99 1f       	adc	r25, r25
 f24:	aa 1f       	adc	r26, r26
 f26:	a4 17       	cp	r26, r20
 f28:	10 f0       	brcs	.+4      	; 0xf2e <__utoa_common+0x14>
 f2a:	a4 1b       	sub	r26, r20
 f2c:	83 95       	inc	r24
 f2e:	50 51       	subi	r21, 0x10	; 16
 f30:	b9 f7       	brne	.-18     	; 0xf20 <__utoa_common+0x6>
 f32:	a0 5d       	subi	r26, 0xD0	; 208
 f34:	aa 33       	cpi	r26, 0x3A	; 58
 f36:	08 f0       	brcs	.+2      	; 0xf3a <__utoa_common+0x20>
 f38:	a9 5d       	subi	r26, 0xD9	; 217
 f3a:	a1 93       	st	Z+, r26
 f3c:	00 97       	sbiw	r24, 0x00	; 0
 f3e:	79 f7       	brne	.-34     	; 0xf1e <__utoa_common+0x4>
 f40:	b1 11       	cpse	r27, r1
 f42:	b1 93       	st	Z+, r27
 f44:	11 92       	st	Z+, r1
 f46:	cb 01       	movw	r24, r22
 f48:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <strrev>

00000f4c <strrev>:
 f4c:	dc 01       	movw	r26, r24
 f4e:	fc 01       	movw	r30, r24
 f50:	67 2f       	mov	r22, r23
 f52:	71 91       	ld	r23, Z+
 f54:	77 23       	and	r23, r23
 f56:	e1 f7       	brne	.-8      	; 0xf50 <strrev+0x4>
 f58:	32 97       	sbiw	r30, 0x02	; 2
 f5a:	04 c0       	rjmp	.+8      	; 0xf64 <strrev+0x18>
 f5c:	7c 91       	ld	r23, X
 f5e:	6d 93       	st	X+, r22
 f60:	70 83       	st	Z, r23
 f62:	62 91       	ld	r22, -Z
 f64:	ae 17       	cp	r26, r30
 f66:	bf 07       	cpc	r27, r31
 f68:	c8 f3       	brcs	.-14     	; 0xf5c <strrev+0x10>
 f6a:	08 95       	ret

00000f6c <_exit>:
 f6c:	f8 94       	cli

00000f6e <__stop_program>:
 f6e:	ff cf       	rjmp	.-2      	; 0xf6e <__stop_program>
