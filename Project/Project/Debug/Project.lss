
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  000020a4  00002138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800108  00800108  000021e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049e6  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000181f  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002912  00000000  00000000  00008859  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000084c  00000000  00000000  0000b16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000158a  00000000  00000000  0000b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b5  00000000  00000000  0000cf42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000f2f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	15 01       	movw	r2, r10
      56:	90 00       	.word	0x0090	; ????
      58:	96 00       	.word	0x0096	; ????
      5a:	ee 00       	.word	0x00ee	; ????
      5c:	f6 00       	.word	0x00f6	; ????
      5e:	00 01       	movw	r0, r0
      60:	0a 01       	movw	r0, r20
      62:	12 01       	movw	r2, r4

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ea       	ldi	r30, 0xA4	; 164
      78:	f0 e2       	ldi	r31, 0x20	; 32
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	a8 e0       	ldi	r26, 0x08	; 8
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ab 32       	cpi	r26, 0x2B	; 43
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 05 06 	call	0xc0a	; 0xc0a <main>
      9a:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <app_init>:
Uchar8_t u8_g_startFlag = 0;
Uchar8_t u8_g_stopFlag = 0;

void app_init()
{
	ultrasonic_vInit();
      a2:	0e 94 b4 05 	call	0xb68	; 0xb68 <ultrasonic_vInit>
	LCD_Init();
      a6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_Init>
	PUSH_BTN_intialize();
      aa:	0e 94 6e 05 	call	0xadc	; 0xadc <PUSH_BTN_intialize>
	TIMER_TMR2NormalModeInit(ENABLED);
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 27 0c 	call	0x184e	; 0x184e <TIMER_TMR2NormalModeInit>
	KEYPAD_init();
      b4:	0e 94 9c 02 	call	0x538	; 0x538 <KEYPAD_init>
	DCM_motorInit(ST_g_carMotors);
      b8:	81 e6       	ldi	r24, 0x61	; 97
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 ad 04 	call	0x95a	; 0x95a <DCM_motorInit>
      c0:	08 95       	ret

000000c2 <app_main>:
}

void app_main()
{
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
	keyState = KEYPAD_getButton();
      ca:	0e 94 c3 02 	call	0x586	; 0x586 <KEYPAD_getButton>
      ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <keyState>
	if(keyState == KEY_1 && u8_g_startFlag==0)
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	49 f4       	brne	.+18     	; 0xe8 <app_main+0x26>
      d6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
      da:	91 11       	cpse	r25, r1
      dc:	05 c0       	rjmp	.+10     	; 0xe8 <app_main+0x26>
	{
	
	     state = SET_DEFAULT_ROTATION;
      de:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
		 u8_g_startFlag = 1;
      e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
      e6:	0f c0       	rjmp	.+30     	; 0x106 <app_main+0x44>
	}
	else if(keyState == KEY_2)
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	21 f4       	brne	.+8      	; 0xf4 <app_main+0x32>
	{ 
		state = STOP;
      ec:	87 e0       	ldi	r24, 0x07	; 7
      ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
      f2:	09 c0       	rjmp	.+18     	; 0x106 <app_main+0x44>
	}
	
	else if(keyState == KEY_1 && u8_g_startFlag == 1)
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	39 f4       	brne	.+14     	; 0x106 <app_main+0x44>
      f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	19 f4       	brne	.+6      	; 0x106 <app_main+0x44>
	{
		state = CAR_SCANING;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
	}
	
	
	switch(state)
     106:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <state>
     10a:	8e 2f       	mov	r24, r30
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	88 30       	cpi	r24, 0x08	; 8
     110:	91 05       	cpc	r25, r1
     112:	08 f0       	brcs	.+2      	; 0x116 <app_main+0x54>
     114:	9a c0       	rjmp	.+308    	; 0x24a <app_main+0x188>
     116:	fc 01       	movw	r30, r24
     118:	e6 5d       	subi	r30, 0xD6	; 214
     11a:	ff 4f       	sbci	r31, 0xFF	; 255
     11c:	0c 94 36 10 	jmp	0x206c	; 0x206c <__tablejump2__>
	{
		case SET_DEFAULT_ROTATION :
		{
			setDefaultRotation();
     120:	0e 94 2a 01 	call	0x254	; 0x254 <setDefaultRotation>
			state = CAR_SCANING;
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
			break;
     12a:	8f c0       	rjmp	.+286    	; 0x24a <app_main+0x188>
		}
		case CAR_SCANING :
		{
			
			ultrasonic_vGetDistance(&obstcaleDistance);
     12c:	8c e0       	ldi	r24, 0x0C	; 12
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 bb 05 	call	0xb76	; 0xb76 <ultrasonic_vGetDistance>
			if(obstcaleDistance > 70)
     134:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <obstcaleDistance>
     138:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <obstcaleDistance+0x1>
     13c:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <obstcaleDistance+0x2>
     140:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <obstcaleDistance+0x3>
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4c e8       	ldi	r20, 0x8C	; 140
     14a:	52 e4       	ldi	r21, 0x42	; 66
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__gesf2>
     154:	18 16       	cp	r1, r24
     156:	24 f4       	brge	.+8      	; 0x160 <app_main+0x9e>
			{
				state = MORE_THAN_70_CM;
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
     15e:	75 c0       	rjmp	.+234    	; 0x24a <app_main+0x188>
			}
			else if(obstcaleDistance <= 70 && obstcaleDistance > 30)
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	4c e8       	ldi	r20, 0x8C	; 140
     166:	52 e4       	ldi	r21, 0x42	; 66
     168:	c7 01       	movw	r24, r14
     16a:	b6 01       	movw	r22, r12
     16c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__cmpsf2>
     170:	18 16       	cp	r1, r24
     172:	74 f0       	brlt	.+28     	; 0x190 <app_main+0xce>
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 ef       	ldi	r20, 0xF0	; 240
     17a:	51 e4       	ldi	r21, 0x41	; 65
     17c:	c7 01       	movw	r24, r14
     17e:	b6 01       	movw	r22, r12
     180:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__gesf2>
     184:	18 16       	cp	r1, r24
     186:	24 f4       	brge	.+8      	; 0x190 <app_main+0xce>
			{
				state = MORE_THAN_30_CM;
     188:	84 e0       	ldi	r24, 0x04	; 4
     18a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
     18e:	5d c0       	rjmp	.+186    	; 0x24a <app_main+0x188>
			}
			else if(obstcaleDistance <= 30 && obstcaleDistance > 20)
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 ef       	ldi	r20, 0xF0	; 240
     196:	51 e4       	ldi	r21, 0x41	; 65
     198:	c7 01       	movw	r24, r14
     19a:	b6 01       	movw	r22, r12
     19c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__cmpsf2>
     1a0:	18 16       	cp	r1, r24
     1a2:	74 f0       	brlt	.+28     	; 0x1c0 <app_main+0xfe>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 ea       	ldi	r20, 0xA0	; 160
     1aa:	51 e4       	ldi	r21, 0x41	; 65
     1ac:	c7 01       	movw	r24, r14
     1ae:	b6 01       	movw	r22, r12
     1b0:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__gesf2>
     1b4:	18 16       	cp	r1, r24
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <app_main+0xfe>
			{
				state = MORE_THAN_20_CM;
     1b8:	85 e0       	ldi	r24, 0x05	; 5
     1ba:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
     1be:	45 c0       	rjmp	.+138    	; 0x24a <app_main+0x188>
			}
			else if(obstcaleDistance < 20)
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 ea       	ldi	r20, 0xA0	; 160
     1c6:	51 e4       	ldi	r21, 0x41	; 65
     1c8:	c7 01       	movw	r24, r14
     1ca:	b6 01       	movw	r22, r12
     1cc:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__cmpsf2>
     1d0:	88 23       	and	r24, r24
     1d2:	dc f5       	brge	.+118    	; 0x24a <app_main+0x188>
			{
				state = LESS_THAN_20_CM;
     1d4:	86 e0       	ldi	r24, 0x06	; 6
     1d6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
     1da:	37 c0       	rjmp	.+110    	; 0x24a <app_main+0x188>
			
			break;
		}
		case MORE_THAN_70_CM :
		{
			lessThan20Flag = 0;
     1dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lessThan20Flag>
			obstcaleMoreThan70();
     1e0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <obstcaleMoreThan70>
			state = CAR_SCANING;
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
			break;
     1ea:	2f c0       	rjmp	.+94     	; 0x24a <app_main+0x188>
		}
		case MORE_THAN_30_CM:
		{
			moreThan70Flag = 0;
     1ec:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <moreThan70Flag>
			lessThan20Flag = 0;
     1f0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lessThan20Flag>
			obstcaleMoreThan30();
     1f4:	0e 94 22 02 	call	0x444	; 0x444 <obstcaleMoreThan30>
			state = CAR_SCANING;
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
			break;
     1fe:	25 c0       	rjmp	.+74     	; 0x24a <app_main+0x188>
		}
		
		case MORE_THAN_20_CM:
		{
			moreThan70Flag = 0;
     200:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <moreThan70Flag>
			lessThan20Flag = 0;
     204:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lessThan20Flag>
			obstcaleMoreThan20();
     208:	0e 94 36 02 	call	0x46c	; 0x46c <obstcaleMoreThan20>
			state = CAR_SCANING;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
			break;
     212:	1b c0       	rjmp	.+54     	; 0x24a <app_main+0x188>
		}
		
		
		case LESS_THAN_20_CM:
		{
			moreThan70Flag = 0;
     214:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <moreThan70Flag>
			obstcaleLessThan20();
     218:	0e 94 61 02 	call	0x4c2	; 0x4c2 <obstcaleLessThan20>
			state = CAR_SCANING;
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
			break;
     222:	13 c0       	rjmp	.+38     	; 0x24a <app_main+0x188>
		}
		
		
		case STOP:
		{
			Car_Stop();
     224:	0e 94 91 02 	call	0x522	; 0x522 <Car_Stop>
			break;
     228:	10 c0       	rjmp	.+32     	; 0x24a <app_main+0x188>
		}
		
		case STATE_IDLE:
		{
			LCD_SetCursor(0,0);
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
			LCD_WriteString("Press Key 1");
     232:	85 e7       	ldi	r24, 0x75	; 117
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
			LCD_SetCursor(1,0);
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
			LCD_WriteString("to start");
     242:	81 e8       	ldi	r24, 0x81	; 129
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
			break;
		}
	}
	
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	df 90       	pop	r13
     250:	cf 90       	pop	r12
     252:	08 95       	ret

00000254 <setDefaultRotation>:



void setDefaultRotation()
{
	LCD_Clear();
     254:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_Clear>
	LCD_SetCursor(0,0);
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
     260:	8a e8       	ldi	r24, 0x8A	; 138
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	LCD_SetCursor(1,0);
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Right");
     270:	88 e9       	ldi	r24, 0x98	; 152
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	TMR_intDelay_ms(5000);
     278:	88 e8       	ldi	r24, 0x88	; 136
     27a:	93 e1       	ldi	r25, 0x13	; 19
     27c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TMR_intDelay_ms>
	
	while(u8_g_timeOut != 1)
     280:	31 c0       	rjmp	.+98     	; 0x2e4 <setDefaultRotation+0x90>
	{
		PUSH_BTN_read_state(0,&rotationBtnState);
     282:	60 e1       	ldi	r22, 0x10	; 16
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 73 05 	call	0xae6	; 0xae6 <PUSH_BTN_read_state>
		if(rotationBtnState == PUSH_BTN_STATE_RELEASED)
     28c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rotationBtnState>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	41 f5       	brne	.+80     	; 0x2e4 <setDefaultRotation+0x90>
     294:	05 c0       	rjmp	.+10     	; 0x2a0 <setDefaultRotation+0x4c>
		{
			while(rotationBtnState == PUSH_BTN_STATE_RELEASED)
			{
				PUSH_BTN_read_state(0,&rotationBtnState);
     296:	60 e1       	ldi	r22, 0x10	; 16
     298:	71 e0       	ldi	r23, 0x01	; 1
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 73 05 	call	0xae6	; 0xae6 <PUSH_BTN_read_state>
	while(u8_g_timeOut != 1)
	{
		PUSH_BTN_read_state(0,&rotationBtnState);
		if(rotationBtnState == PUSH_BTN_STATE_RELEASED)
		{
			while(rotationBtnState == PUSH_BTN_STATE_RELEASED)
     2a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rotationBtnState>
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	b9 f3       	breq	.-18     	; 0x296 <setDefaultRotation+0x42>
			{
				PUSH_BTN_read_state(0,&rotationBtnState);
			}
			if(rotationFlag == 0)
     2a8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rotationFlag>
     2ac:	81 11       	cpse	r24, r1
     2ae:	0d c0       	rjmp	.+26     	; 0x2ca <setDefaultRotation+0x76>
			{
				rotationFlag = 1;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rotationFlag>
				rotation = ROTATION_L;
     2b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Left ");
     2c0:	8e e9       	ldi	r24, 0x9E	; 158
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
     2c8:	0d c0       	rjmp	.+26     	; 0x2e4 <setDefaultRotation+0x90>
				
			}
			else if(rotationFlag == 1)
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	59 f4       	brne	.+22     	; 0x2e4 <setDefaultRotation+0x90>
			{
				rotationFlag = 0;
     2ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rotationFlag>
				rotation = ROTATION_R;
     2d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Right ");
     2dc:	84 ea       	ldi	r24, 0xA4	; 164
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
	LCD_SetCursor(1,0);
	LCD_WriteString((Uchar8_t*)"Right");
	TMR_intDelay_ms(5000);
	
	while(u8_g_timeOut != 1)
     2e4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_g_timeOut>
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	59 f6       	brne	.-106    	; 0x282 <setDefaultRotation+0x2e>
				LCD_SetCursor(1,0);
				LCD_WriteString((Uchar8_t*)"Right ");
			}
		}
	}
	u8_g_timeOut = 0;
     2ec:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_g_timeOut>
	TMR_intDelay_ms(2000);
     2f0:	80 ed       	ldi	r24, 0xD0	; 208
     2f2:	97 e0       	ldi	r25, 0x07	; 7
     2f4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TMR_intDelay_ms>
	while(u8_g_timeOut !=1);
     2f8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_g_timeOut>
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <setDefaultRotation+0xa4>
	LCD_Clear();
     300:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_Clear>
	u8_g_timeOut = 0;
     304:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_g_timeOut>
     308:	08 95       	ret

0000030a <LCD_update>:
	}
	
	
}
void LCD_update(EN_speed en_a_speed,EN_direction en_a_direction,float64_t f64_a_distance)
{
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	d8 2f       	mov	r29, r24
     318:	c6 2f       	mov	r28, r22
     31a:	69 01       	movw	r12, r18
     31c:	7a 01       	movw	r14, r20
	
	
	LCD_SetCursor(0,0);
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Speed:");
     326:	8b ea       	ldi	r24, 0xAB	; 171
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
    LCD_SetCursor(0,7);
     32e:	67 e0       	ldi	r22, 0x07	; 7
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	if(en_a_speed == SPEED_0 )
     336:	d1 11       	cpse	r29, r1
     338:	05 c0       	rjmp	.+10     	; 0x344 <LCD_update+0x3a>
	{
		LCD_WriteString((Uchar8_t*)"00% ");
     33a:	82 eb       	ldi	r24, 0xB2	; 178
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
     342:	0b c0       	rjmp	.+22     	; 0x35a <LCD_update+0x50>
	}
	else if (en_a_speed == SPEED_30)
     344:	d1 30       	cpi	r29, 0x01	; 1
     346:	29 f4       	brne	.+10     	; 0x352 <LCD_update+0x48>
	{
		LCD_WriteString((Uchar8_t*)"30% ");
     348:	87 eb       	ldi	r24, 0xB7	; 183
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
     350:	04 c0       	rjmp	.+8      	; 0x35a <LCD_update+0x50>
	}
	else 
	{
		LCD_WriteString((Uchar8_t*)"50% ");
     352:	8c eb       	ldi	r24, 0xBC	; 188
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	}
	LCD_SetCursor(0,11);
     35a:	6b e0       	ldi	r22, 0x0B	; 11
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dir:");
     362:	81 ec       	ldi	r24, 0xC1	; 193
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	LCD_SetCursor(0,15);
     36a:	6f e0       	ldi	r22, 0x0F	; 15
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	if(en_a_direction == DIRECTION_F)
     372:	c1 11       	cpse	r28, r1
     374:	05 c0       	rjmp	.+10     	; 0x380 <LCD_update+0x76>
	{
		LCD_WriteString((Uchar8_t*)"F");
     376:	86 ec       	ldi	r24, 0xC6	; 198
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
     37e:	12 c0       	rjmp	.+36     	; 0x3a4 <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_B)
     380:	c1 30       	cpi	r28, 0x01	; 1
     382:	29 f4       	brne	.+10     	; 0x38e <LCD_update+0x84>
	{
		LCD_WriteString((Uchar8_t*)"B");
     384:	88 ec       	ldi	r24, 0xC8	; 200
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
     38c:	0b c0       	rjmp	.+22     	; 0x3a4 <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_R)
     38e:	c2 30       	cpi	r28, 0x02	; 2
     390:	29 f4       	brne	.+10     	; 0x39c <LCD_update+0x92>
	{
		LCD_WriteString((Uchar8_t*)"R");
     392:	8a ec       	ldi	r24, 0xCA	; 202
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <LCD_update+0x9a>
	}
    else
	{
		LCD_WriteString((Uchar8_t*)"S");
     39c:	8c ec       	ldi	r24, 0xCC	; 204
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	}
	
	LCD_SetCursor(1,0);
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dist:");
     3ac:	8e ec       	ldi	r24, 0xCE	; 206
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	LCD_SetCursor(1,5);
     3b4:	65 e0       	ldi	r22, 0x05	; 5
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	LCD_WriteNumber(f64_a_distance);
     3bc:	c7 01       	movw	r24, r14
     3be:	b6 01       	movw	r22, r12
     3c0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fixsfsi>
     3c4:	cb 01       	movw	r24, r22
     3c6:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_WriteNumber>
	LCD_WriteString((Uchar8_t*)" Cm");
     3ca:	84 ed       	ldi	r24, 0xD4	; 212
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
	
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	08 95       	ret

000003e0 <obstcaleMoreThan70>:
}



void obstcaleMoreThan70()
{
     3e0:	cf 93       	push	r28
	
	
	if(moreThan70Flag == 0)
     3e2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <moreThan70Flag>
     3e6:	81 11       	cpse	r24, r1
     3e8:	0f c0       	rjmp	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		moreThan70Flag = 1;
     3ea:	c1 e0       	ldi	r28, 0x01	; 1
     3ec:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <moreThan70Flag>
		DCM_MoveForward(30);
     3f0:	8e e1       	ldi	r24, 0x1E	; 30
     3f2:	0e 94 34 05 	call	0xa68	; 0xa68 <DCM_MoveForward>
		speed = SPEED_30;
     3f6:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <speed>
		direction = DIRECTION_F;
     3fa:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <direction>
		TMR_intDelay_ms(5000);
     3fe:	88 e8       	ldi	r24, 0x88	; 136
     400:	93 e1       	ldi	r25, 0x13	; 19
     402:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TMR_intDelay_ms>
     406:	0e c0       	rjmp	.+28     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		
	}
	else if(moreThan70Flag == 1 && u8_g_timeOut == 1)
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	61 f4       	brne	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     40c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_g_timeOut>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	41 f4       	brne	.+16     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	{
		
		DCM_MoveForward(50);
     414:	82 e3       	ldi	r24, 0x32	; 50
     416:	0e 94 34 05 	call	0xa68	; 0xa68 <DCM_MoveForward>
		speed = SPEED_50;
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <speed>
		u8_g_timeOut =0;
     420:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_g_timeOut>
	}
 
    LCD_update(speed,direction,obstcaleDistance);
     424:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <obstcaleDistance>
     428:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <obstcaleDistance+0x1>
     42c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <obstcaleDistance+0x2>
     430:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <obstcaleDistance+0x3>
     434:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <direction>
     438:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <speed>
     43c:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_update>
}
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <obstcaleMoreThan30>:

void obstcaleMoreThan30()
{
	DCM_MoveForward(30);
     444:	8e e1       	ldi	r24, 0x1E	; 30
     446:	0e 94 34 05 	call	0xa68	; 0xa68 <DCM_MoveForward>
	speed = SPEED_30;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <speed>
	direction = DIRECTION_F;
     450:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <direction>
	LCD_update(speed,direction,obstcaleDistance);
     454:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <obstcaleDistance>
     458:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <obstcaleDistance+0x1>
     45c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <obstcaleDistance+0x2>
     460:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <obstcaleDistance+0x3>
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_update>
     46a:	08 95       	ret

0000046c <obstcaleMoreThan20>:
}


void obstcaleMoreThan20()
{
	DCM_vdStopDCM();
     46c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DCM_vdStopDCM>
	LCD_update(SPEED_0,DIRECTION_S,obstcaleDistance);
     470:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <obstcaleDistance>
     474:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <obstcaleDistance+0x1>
     478:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <obstcaleDistance+0x2>
     47c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <obstcaleDistance+0x3>
     480:	63 e0       	ldi	r22, 0x03	; 3
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_update>
	TMR_intDelay_ms(1000);
     488:	88 ee       	ldi	r24, 0xE8	; 232
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TMR_intDelay_ms>
	while(u8_g_timeOut == 0 );
     490:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_g_timeOut>
     494:	88 23       	and	r24, r24
     496:	e1 f3       	breq	.-8      	; 0x490 <obstcaleMoreThan20+0x24>
	u8_g_timeOut = 0;
     498:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_g_timeOut>
	
	//rotation
	LCD_update(SPEED_50,DIRECTION_R,obstcaleDistance);
     49c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <obstcaleDistance>
     4a0:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <obstcaleDistance+0x1>
     4a4:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <obstcaleDistance+0x2>
     4a8:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <obstcaleDistance+0x3>
     4ac:	62 e0       	ldi	r22, 0x02	; 2
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_update>
	DCM_rotateDCM(rotation,50);	
     4b4:	62 e3       	ldi	r22, 0x32	; 50
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4bc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DCM_rotateDCM>
     4c0:	08 95       	ret

000004c2 <obstcaleLessThan20>:
}

void obstcaleLessThan20()
{
	if(lessThan20Flag == 0 )
     4c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lessThan20Flag>
     4c6:	81 11       	cpse	r24, r1
     4c8:	1c c0       	rjmp	.+56     	; 0x502 <obstcaleLessThan20+0x40>
	{
		DCM_vdStopDCM();
     4ca:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DCM_vdStopDCM>
		LCD_update(SPEED_0,DIRECTION_S,obstcaleDistance);
     4ce:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <obstcaleDistance>
     4d2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <obstcaleDistance+0x1>
     4d6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <obstcaleDistance+0x2>
     4da:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <obstcaleDistance+0x3>
     4de:	63 e0       	ldi	r22, 0x03	; 3
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_update>
		TMR_intDelay_ms(1000);
     4e6:	88 ee       	ldi	r24, 0xE8	; 232
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TMR_intDelay_ms>
		while(u8_g_timeOut == 0 );
     4ee:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_g_timeOut>
     4f2:	88 23       	and	r24, r24
     4f4:	e1 f3       	breq	.-8      	; 0x4ee <obstcaleLessThan20+0x2c>
		u8_g_timeOut = 0;
     4f6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_g_timeOut>
		lessThan20Flag = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lessThan20Flag>
     500:	08 95       	ret
	}
	
	else {
		LCD_update(SPEED_30,DIRECTION_B,obstcaleDistance);
     502:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <obstcaleDistance>
     506:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <obstcaleDistance+0x1>
     50a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <obstcaleDistance+0x2>
     50e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <obstcaleDistance+0x3>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_update>
		DCM_MoveBackward(30);
     51a:	8e e1       	ldi	r24, 0x1E	; 30
     51c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <DCM_MoveBackward>
     520:	08 95       	ret

00000522 <Car_Stop>:
}


void Car_Stop()
{
	DCM_vdStopDCM();
     522:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DCM_vdStopDCM>
	LCD_SetCursor(0,0);
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetCursor>
	LCD_WriteString("ROBOT STOPED");
     52e:	88 ed       	ldi	r24, 0xD8	; 216
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_WriteString>
     536:	08 95       	ret

00000538 <KEYPAD_init>:
Description : Initializes Rows as Output and Cols as input and put high logic on each pin
Args        : Void
return      : Void
*/
void KEYPAD_init(void)
{
     538:	cf 93       	push	r28
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     53a:	c0 e0       	ldi	r28, 0x00	; 0
     53c:	0e c0       	rjmp	.+28     	; 0x55a <KEYPAD_init+0x22>
		///* set current row pin direction as output */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],OUTPUT);
		///* set current row pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
     53e:	8c 2f       	mov	r24, r28
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	9c 01       	movw	r18, r24
     544:	22 0f       	add	r18, r18
     546:	33 1f       	adc	r19, r19
     548:	22 0f       	add	r18, r18
     54a:	33 1f       	adc	r19, r19
     54c:	82 0f       	add	r24, r18
     54e:	93 1f       	adc	r25, r19
     550:	81 51       	subi	r24, 0x11	; 17
     552:	9f 4f       	sbci	r25, 0xFF	; 255
     554:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_Initpin>
{
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     558:	cf 5f       	subi	r28, 0xFF	; 255
     55a:	cc 23       	and	r28, r28
     55c:	81 f3       	breq	.-32     	; 0x53e <KEYPAD_init+0x6>
     55e:	c0 e0       	ldi	r28, 0x00	; 0
     560:	0e c0       	rjmp	.+28     	; 0x57e <KEYPAD_init+0x46>
	{
		///* set current col pin direction as input */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
     562:	8c 2f       	mov	r24, r28
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9c 01       	movw	r18, r24
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	82 0f       	add	r24, r18
     572:	93 1f       	adc	r25, r19
     574:	8b 51       	subi	r24, 0x1B	; 27
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_Initpin>
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
	}
	
	/* loop from 0 to number of cols defined in config file*/
	for(u8_loc_colsCounter=0;u8_loc_colsCounter<NUMBER_OF_COLS;u8_loc_colsCounter++)
     57c:	cf 5f       	subi	r28, 0xFF	; 255
     57e:	c2 30       	cpi	r28, 0x02	; 2
     580:	80 f3       	brcs	.-32     	; 0x562 <KEYPAD_init+0x2a>
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
	}
}
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <KEYPAD_getButton>:
             
Args        : Void
return      : EN_KEYPADKEYS enum holds all possible keys
*/
EN_KEYPAD_KEYS KEYPAD_getButton()
{
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* initialize pinValue variable to holds pin state*/
	Uchar8_t pinValue = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	89 83       	std	Y+1, r24	; 0x01
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     5a0:	00 e0       	ldi	r16, 0x00	; 0
     5a2:	57 c0       	rjmp	.+174    	; 0x652 <KEYPAD_getButton+0xcc>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
     5a4:	e0 2e       	mov	r14, r16
     5a6:	f1 2c       	mov	r15, r1
     5a8:	f7 01       	movw	r30, r14
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	ee 0d       	add	r30, r14
     5b4:	ff 1d       	adc	r31, r15
     5b6:	eb 51       	subi	r30, 0x1B	; 27
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	63 85       	ldd	r22, Z+11	; 0x0b
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	34 c0       	rjmp	.+104    	; 0x630 <KEYPAD_getButton+0xaa>
		{
			/* Get value of current col pin*/
			//DIO_s8GETPinVal (st_keypad_conf.u8_arr_cols[u8_loc_colsCounter] , &pinValue); 
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     5c8:	c1 2e       	mov	r12, r17
     5ca:	d1 2c       	mov	r13, r1
     5cc:	f6 01       	movw	r30, r12
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ec 0d       	add	r30, r12
     5d8:	fd 1d       	adc	r31, r13
     5da:	eb 51       	subi	r30, 0x1B	; 27
     5dc:	ff 4f       	sbci	r31, 0xFF	; 255
     5de:	ae 01       	movw	r20, r28
     5e0:	4f 5f       	subi	r20, 0xFF	; 255
     5e2:	5f 4f       	sbci	r21, 0xFF	; 255
     5e4:	61 81       	ldd	r22, Z+1	; 0x01
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <DIO_read>
			/* check if pressed*/
			if(pinValue == 0) 
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	81 11       	cpse	r24, r1
     5f0:	1e c0       	rjmp	.+60     	; 0x62e <KEYPAD_getButton+0xa8>
     5f2:	10 c0       	rjmp	.+32     	; 0x614 <KEYPAD_getButton+0x8e>
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     5f4:	f6 01       	movw	r30, r12
     5f6:	ee 0f       	add	r30, r30
     5f8:	ff 1f       	adc	r31, r31
     5fa:	ee 0f       	add	r30, r30
     5fc:	ff 1f       	adc	r31, r31
     5fe:	ec 0d       	add	r30, r12
     600:	fd 1d       	adc	r31, r13
     602:	eb 51       	subi	r30, 0x1B	; 27
     604:	ff 4f       	sbci	r31, 0xFF	; 255
     606:	ae 01       	movw	r20, r28
     608:	4f 5f       	subi	r20, 0xFF	; 255
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	61 81       	ldd	r22, Z+1	; 0x01
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <DIO_read>
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
			/* check if pressed*/
			if(pinValue == 0) 
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	88 23       	and	r24, r24
     618:	69 f3       	breq	.-38     	; 0x5f4 <KEYPAD_getButton+0x6e>
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
				}
				
				/* return current [row][col] position from config array */
				return st_keypad_conf.u8_arr_keys[u8_loc_rowsCounter][u8_loc_colsCounter];
     61a:	c7 01       	movw	r24, r14
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	8b 51       	subi	r24, 0x1B	; 27
     622:	9f 4f       	sbci	r25, 0xFF	; 255
     624:	fc 01       	movw	r30, r24
     626:	ec 0d       	add	r30, r12
     628:	fd 1d       	adc	r31, r13
     62a:	87 85       	ldd	r24, Z+15	; 0x0f
     62c:	16 c0       	rjmp	.+44     	; 0x65a <KEYPAD_getButton+0xd4>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     62e:	1f 5f       	subi	r17, 0xFF	; 255
     630:	12 30       	cpi	r17, 0x02	; 2
     632:	50 f2       	brcs	.-108    	; 0x5c8 <KEYPAD_getButton+0x42>
			}
		}
		
		/* write logic high on current row pin */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
     634:	f7 01       	movw	r30, r14
     636:	ee 0f       	add	r30, r30
     638:	ff 1f       	adc	r31, r31
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	ee 0d       	add	r30, r14
     640:	ff 1d       	adc	r31, r15
     642:	eb 51       	subi	r30, 0x1B	; 27
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	63 85       	ldd	r22, Z+11	; 0x0b
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	/* initialize pinValue variable to holds pin state*/
	Uchar8_t pinValue = 1;
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     650:	0f 5f       	subi	r16, 0xFF	; 255
     652:	00 23       	and	r16, r16
     654:	09 f4       	brne	.+2      	; 0x658 <KEYPAD_getButton+0xd2>
     656:	a6 cf       	rjmp	.-180    	; 0x5a4 <KEYPAD_getButton+0x1e>
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
	}
	
	/* if nothing pressed */
	return KEY_NOTHING;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0f 90       	pop	r0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	08 95       	ret

0000066e <WriteIns>:
	for(Uchar8_t i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     67a:	6c 2f       	mov	r22, r28
     67c:	66 1f       	adc	r22, r22
     67e:	66 27       	eor	r22, r22
     680:	66 1f       	adc	r22, r22
     682:	87 e0       	ldi	r24, 0x07	; 7
     684:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     688:	c6 fb       	bst	r28, 6
     68a:	66 27       	eor	r22, r22
     68c:	60 f9       	bld	r22, 0
     68e:	86 e0       	ldi	r24, 0x06	; 6
     690:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     694:	c5 fb       	bst	r28, 5
     696:	66 27       	eor	r22, r22
     698:	60 f9       	bld	r22, 0
     69a:	85 e0       	ldi	r24, 0x05	; 5
     69c:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     6a0:	c4 fb       	bst	r28, 4
     6a2:	66 27       	eor	r22, r22
     6a4:	60 f9       	bld	r22, 0
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     6b4:	89 ef       	ldi	r24, 0xF9	; 249
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <WriteIns+0x4a>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <WriteIns+0x50>
     6be:	00 00       	nop
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     6c8:	89 ef       	ldi	r24, 0xF9	; 249
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <WriteIns+0x5e>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <WriteIns+0x64>
     6d2:	00 00       	nop
     6d4:	c3 fb       	bst	r28, 3
     6d6:	66 27       	eor	r22, r22
     6d8:	60 f9       	bld	r22, 0
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     6e0:	c2 fb       	bst	r28, 2
     6e2:	66 27       	eor	r22, r22
     6e4:	60 f9       	bld	r22, 0
     6e6:	86 e0       	ldi	r24, 0x06	; 6
     6e8:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     6ec:	c1 fb       	bst	r28, 1
     6ee:	66 27       	eor	r22, r22
     6f0:	60 f9       	bld	r22, 0
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     6f8:	6c 2f       	mov	r22, r28
     6fa:	61 70       	andi	r22, 0x01	; 1
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     70a:	89 ef       	ldi	r24, 0xF9	; 249
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <WriteIns+0xa0>
     712:	00 c0       	rjmp	.+0      	; 0x714 <WriteIns+0xa6>
     714:	00 00       	nop
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     71e:	89 ef       	ldi	r24, 0xF9	; 249
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <WriteIns+0xb4>
     726:	00 c0       	rjmp	.+0      	; 0x728 <WriteIns+0xba>
     728:	00 00       	nop
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <WriteData>:
     72e:	cf 93       	push	r28
     730:	c8 2f       	mov	r28, r24
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     73a:	6c 2f       	mov	r22, r28
     73c:	66 1f       	adc	r22, r22
     73e:	66 27       	eor	r22, r22
     740:	66 1f       	adc	r22, r22
     742:	87 e0       	ldi	r24, 0x07	; 7
     744:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     748:	c6 fb       	bst	r28, 6
     74a:	66 27       	eor	r22, r22
     74c:	60 f9       	bld	r22, 0
     74e:	86 e0       	ldi	r24, 0x06	; 6
     750:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     754:	c5 fb       	bst	r28, 5
     756:	66 27       	eor	r22, r22
     758:	60 f9       	bld	r22, 0
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     760:	c4 fb       	bst	r28, 4
     762:	66 27       	eor	r22, r22
     764:	60 f9       	bld	r22, 0
     766:	84 e0       	ldi	r24, 0x04	; 4
     768:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     774:	89 ef       	ldi	r24, 0xF9	; 249
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <WriteData+0x4a>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <WriteData+0x50>
     77e:	00 00       	nop
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     788:	89 ef       	ldi	r24, 0xF9	; 249
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <WriteData+0x5e>
     790:	00 c0       	rjmp	.+0      	; 0x792 <WriteData+0x64>
     792:	00 00       	nop
     794:	c3 fb       	bst	r28, 3
     796:	66 27       	eor	r22, r22
     798:	60 f9       	bld	r22, 0
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     7a0:	c2 fb       	bst	r28, 2
     7a2:	66 27       	eor	r22, r22
     7a4:	60 f9       	bld	r22, 0
     7a6:	86 e0       	ldi	r24, 0x06	; 6
     7a8:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     7ac:	c1 fb       	bst	r28, 1
     7ae:	66 27       	eor	r22, r22
     7b0:	60 f9       	bld	r22, 0
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     7b8:	6c 2f       	mov	r22, r28
     7ba:	61 70       	andi	r22, 0x01	; 1
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     7ca:	89 ef       	ldi	r24, 0xF9	; 249
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <WriteData+0xa0>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <WriteData+0xa6>
     7d4:	00 00       	nop
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_writepinn>
     7de:	89 ef       	ldi	r24, 0xF9	; 249
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <WriteData+0xb4>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <WriteData+0xba>
     7e8:	00 00       	nop
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <LCD_WriteChar>:
     7ee:	0e 94 97 03 	call	0x72e	; 0x72e <WriteData>
     7f2:	08 95       	ret

000007f4 <LCD_WriteString>:
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	8c 01       	movw	r16, r24
     7fc:	c0 e0       	ldi	r28, 0x00	; 0
     7fe:	03 c0       	rjmp	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     800:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_WriteChar>
     804:	cf 5f       	subi	r28, 0xFF	; 255
     806:	f8 01       	movw	r30, r16
     808:	ec 0f       	add	r30, r28
     80a:	f1 1d       	adc	r31, r1
     80c:	80 81       	ld	r24, Z
     80e:	81 11       	cpse	r24, r1
     810:	f7 cf       	rjmp	.-18     	; 0x800 <__DATA_REGION_LENGTH__>
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <LCD_SetCursor>:
     81a:	81 11       	cpse	r24, r1
     81c:	05 c0       	rjmp	.+10     	; 0x828 <LCD_SetCursor+0xe>
     81e:	86 2f       	mov	r24, r22
     820:	80 68       	ori	r24, 0x80	; 128
     822:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
     826:	08 95       	ret
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	21 f4       	brne	.+8      	; 0x834 <LCD_SetCursor+0x1a>
     82c:	80 ec       	ldi	r24, 0xC0	; 192
     82e:	86 0f       	add	r24, r22
     830:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
     834:	08 95       	ret

00000836 <LCD_Clear>:
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
     83c:	89 ef       	ldi	r24, 0xF9	; 249
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <LCD_Clear+0xa>
     844:	00 c0       	rjmp	.+0      	; 0x846 <LCD_Clear+0x10>
     846:	00 00       	nop
     848:	08 95       	ret

0000084a <LCD_WriteNumber>:
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	2a 97       	sbiw	r28, 0x0a	; 10
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	7c 01       	movw	r14, r24
     866:	00 97       	sbiw	r24, 0x00	; 0
     868:	21 f4       	brne	.+8      	; 0x872 <__stack+0x13>
     86a:	80 e3       	ldi	r24, 0x30	; 48
     86c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_WriteChar>
     870:	2d c0       	rjmp	.+90     	; 0x8cc <__stack+0x6d>
     872:	99 23       	and	r25, r25
     874:	34 f4       	brge	.+12     	; 0x882 <__stack+0x23>
     876:	f1 94       	neg	r15
     878:	e1 94       	neg	r14
     87a:	f1 08       	sbc	r15, r1
     87c:	8d e2       	ldi	r24, 0x2D	; 45
     87e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_WriteChar>
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	10 c0       	rjmp	.+32     	; 0x8a6 <__stack+0x47>
     886:	c7 01       	movw	r24, r14
     888:	6a e0       	ldi	r22, 0x0A	; 10
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	0e 94 22 10 	call	0x2044	; 0x2044 <__divmodhi4>
     890:	e1 e0       	ldi	r30, 0x01	; 1
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ec 0f       	add	r30, r28
     896:	fd 1f       	adc	r31, r29
     898:	e1 0f       	add	r30, r17
     89a:	f1 1d       	adc	r31, r1
     89c:	80 5d       	subi	r24, 0xD0	; 208
     89e:	80 83       	st	Z, r24
     8a0:	1f 5f       	subi	r17, 0xFF	; 255
     8a2:	e6 2e       	mov	r14, r22
     8a4:	f7 2e       	mov	r15, r23
     8a6:	e1 14       	cp	r14, r1
     8a8:	f1 04       	cpc	r15, r1
     8aa:	69 f7       	brne	.-38     	; 0x886 <__stack+0x27>
     8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__stack+0x69>
     8ae:	e1 2f       	mov	r30, r17
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	8c 0f       	add	r24, r28
     8ba:	9d 1f       	adc	r25, r29
     8bc:	e8 0f       	add	r30, r24
     8be:	f9 1f       	adc	r31, r25
     8c0:	80 81       	ld	r24, Z
     8c2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_WriteChar>
     8c6:	11 50       	subi	r17, 0x01	; 1
     8c8:	11 11       	cpse	r17, r1
     8ca:	f1 cf       	rjmp	.-30     	; 0x8ae <__stack+0x4f>
     8cc:	2a 96       	adiw	r28, 0x0a	; 10
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	08 95       	ret

000008e4 <LCD_PinsInit>:
void LCD_PinsInit ()
{
	DIO_initpinn(RS,OUTPUT);
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
	DIO_initpinn(EN,OUTPUT);
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
	DIO_initpinn(RW,OUTPUT);
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
	DIO_initpinn(D4,OUTPUT);
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
	DIO_initpinn(D5,OUTPUT);
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
	DIO_initpinn(D6,OUTPUT);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	86 e0       	ldi	r24, 0x06	; 6
     910:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
	DIO_initpinn(D7,OUTPUT);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	87 e0       	ldi	r24, 0x07	; 7
     918:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
     91c:	08 95       	ret

0000091e <LCD_Init>:



void LCD_Init(void)
{
	LCD_PinsInit();
     91e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_PinsInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     922:	87 ea       	ldi	r24, 0xA7	; 167
     924:	91 e6       	ldi	r25, 0x61	; 97
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <LCD_Init+0x8>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <LCD_Init+0xe>
     92c:	00 00       	nop
	_delay_ms(100);
	WriteIns(0x02);
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
	WriteIns(0x28);//5*7 2 lines
     934:	88 e2       	ldi	r24, 0x28	; 40
     936:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
	WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
     93a:	8c e0       	ldi	r24, 0x0C	; 12
     93c:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
	WriteIns(0x01);//clear screen
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
     946:	89 ef       	ldi	r24, 0xF9	; 249
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <LCD_Init+0x2c>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <LCD_Init+0x32>
     950:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);// increment DDRAM address, no shift
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	0e 94 37 03 	call	0x66e	; 0x66e <WriteIns>
     958:	08 95       	ret

0000095a <DCM_motorInit>:
}

/****************************************************************************************************************************************/
void DCM_updateStopFlag(void)
{
	DCM_g_stopFlag = TRUE;
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	b9 f4       	brne	.+46     	; 0x996 <DCM_motorInit+0x3c>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	1b c0       	rjmp	.+54     	; 0x9a2 <DCM_motorInit+0x48>
     96c:	c1 2f       	mov	r28, r17
     96e:	d0 e0       	ldi	r29, 0x00	; 0
     970:	ce 01       	movw	r24, r28
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	c8 0f       	add	r28, r24
     978:	d9 1f       	adc	r29, r25
     97a:	ce 0d       	add	r28, r14
     97c:	df 1d       	adc	r29, r15
     97e:	41 e0       	ldi	r20, 0x01	; 1
     980:	6a 81       	ldd	r22, Y+2	; 0x02
     982:	88 81       	ld	r24, Y
     984:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_InitDCM>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	6a 81       	ldd	r22, Y+2	; 0x02
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_InitDCM>
     992:	1f 5f       	subi	r17, 0xFF	; 255
     994:	02 c0       	rjmp	.+4      	; 0x99a <DCM_motorInit+0x40>
     996:	7c 01       	movw	r14, r24
     998:	10 e0       	ldi	r17, 0x00	; 0
     99a:	12 30       	cpi	r17, 0x02	; 2
     99c:	38 f3       	brcs	.-50     	; 0x96c <DCM_motorInit+0x12>
     99e:	0e 94 cd 0b 	call	0x179a	; 0x179a <TIMER0_initPWM>
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	08 95       	ret

000009ae <DCM_changeDCMDirection>:
     9ae:	00 97       	sbiw	r24, 0x00	; 0
     9b0:	79 f0       	breq	.+30     	; 0x9d0 <DCM_changeDCMDirection+0x22>
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	fb 01       	movw	r30, r22
     9b6:	ee 0f       	add	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	6e 0f       	add	r22, r30
     9bc:	7f 1f       	adc	r23, r31
     9be:	fc 01       	movw	r30, r24
     9c0:	e6 0f       	add	r30, r22
     9c2:	f7 1f       	adc	r31, r23
     9c4:	60 81       	ld	r22, Z
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_toggle>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 95       	ret
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	08 95       	ret

000009d4 <DCM_vdStopDCM>:
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
     9e8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <TIMER0_stop>
     9ec:	08 95       	ret

000009ee <DCM_u8SetDutyCycleOfPWM>:
     9ee:	85 36       	cpi	r24, 0x65	; 101
     9f0:	10 f0       	brcs	.+4      	; 0x9f6 <DCM_u8SetDutyCycleOfPWM+0x8>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret
     9f6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TIMER0_setPwm>
     9fa:	08 95       	ret

000009fc <DCM_rotateDCM>:
/****************************************************************************************************************************************/
/* you need to specify which motor you want to rotate*/
EN_DCM_ERROR_T DCM_rotateDCM(EN_DCM_MOTORSIDE DCM_l_motorNumber, u16 DCM_a_rotateSpeed)
{
	
	if(DCM_l_motorNumber == MOTOR_RIGHT)
     9fc:	81 11       	cpse	r24, r1
     9fe:	1a c0       	rjmp	.+52     	; 0xa34 <DCM_rotateDCM+0x38>
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	81 e6       	ldi	r24, 0x61	; 97
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DCM_changeDCMDirection>
		// High delay to see it on simulation
		TMR_intDelay_ms(4000);
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	9f e0       	ldi	r25, 0x0F	; 15
     a0e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     a12:	82 e3       	ldi	r24, 0x32	; 50
     a14:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     a18:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_g_timeOut>
     a1c:	88 23       	and	r24, r24
     a1e:	e1 f3       	breq	.-8      	; 0xa18 <DCM_rotateDCM+0x1c>
		TIMER0_stop();
     a20:	0e 94 c9 0b 	call	0x1792	; 0x1792 <TIMER0_stop>
		u8_g_timeOut = 0;
     a24:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);	
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	81 e6       	ldi	r24, 0x61	; 97
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DCM_changeDCMDirection>
     a32:	08 95       	ret
	}
	else
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	81 e6       	ldi	r24, 0x61	; 97
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DCM_changeDCMDirection>
		TMR_intDelay_ms(620);
     a3e:	8c e6       	ldi	r24, 0x6C	; 108
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     a46:	82 e3       	ldi	r24, 0x32	; 50
     a48:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     a4c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_g_timeOut>
     a50:	88 23       	and	r24, r24
     a52:	e1 f3       	breq	.-8      	; 0xa4c <DCM_rotateDCM+0x50>
		TIMER0_stop();
     a54:	0e 94 c9 0b 	call	0x1792	; 0x1792 <TIMER0_stop>
		u8_g_timeOut = 0;
     a58:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);		
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	81 e6       	ldi	r24, 0x61	; 97
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DCM_changeDCMDirection>
	}

}
     a66:	08 95       	ret

00000a68 <DCM_MoveForward>:

/****************************************************************************************************************************************/

void DCM_MoveForward(u8 u8_a_speed)
{
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     a6c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_HIGH);
     a70:	c1 e6       	ldi	r28, 0x61	; 97
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	68 81       	ld	r22, Y
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	8a 81       	ldd	r24, Y+2	; 0x02
     a7a:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_LOW);
     a7e:	69 81       	ldd	r22, Y+1	; 0x01
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	8a 81       	ldd	r24, Y+2	; 0x02
     a84:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_HIGH);
     a88:	6b 81       	ldd	r22, Y+3	; 0x03
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	8d 81       	ldd	r24, Y+5	; 0x05
     a8e:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_LOW);
     a92:	6c 81       	ldd	r22, Y+4	; 0x04
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	8d 81       	ldd	r24, Y+5	; 0x05
     a98:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <DCM_MoveBackward>:


void DCM_MoveBackward(u8 u8_a_speed)
{
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     aa6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_LOW);
     aaa:	c1 e6       	ldi	r28, 0x61	; 97
     aac:	d0 e0       	ldi	r29, 0x00	; 0
     aae:	68 81       	ld	r22, Y
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_HIGH);
     ab8:	69 81       	ldd	r22, Y+1	; 0x01
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_LOW);
     ac2:	6b 81       	ldd	r22, Y+3	; 0x03
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_HIGH);
     acc:	6c 81       	ldd	r22, Y+4	; 0x04
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <PUSH_BTN_intialize>:

extern const ST_PUSH_BTN_t A_pbConfig[NUMBER_OF_PUSH_BUTTONS];

void PUSH_BTN_intialize()
{
	DIO_initpinn(PINC4,INPULL);
     adc:	62 e0       	ldi	r22, 0x02	; 2
     ade:	84 e1       	ldi	r24, 0x14	; 20
     ae0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_initpinn>
     ae4:	08 95       	ret

00000ae6 <PUSH_BTN_read_state>:
}

void PUSH_BTN_read_state(Uchar8_t btnNumber, EN_PUSH_BTN_state_t *btn_state)
{
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	1f 92       	push	r1
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	7b 01       	movw	r14, r22

		en_dio_value_t pin_logic_status = DIO_LOW;
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	99 83       	std	Y+1, r25	; 0x01
		DIO_read(A_pbConfig[btnNumber].PUSH_BTN_pin.dio_port,A_pbConfig[btnNumber].PUSH_BTN_pin.dio_pin,&pin_logic_status);
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	8c 01       	movw	r16, r24
     b02:	00 0f       	add	r16, r16
     b04:	11 1f       	adc	r17, r17
     b06:	00 0f       	add	r16, r16
     b08:	11 1f       	adc	r17, r17
     b0a:	00 0f       	add	r16, r16
     b0c:	11 1f       	adc	r17, r17
     b0e:	08 1b       	sub	r16, r24
     b10:	19 0b       	sbc	r17, r25
     b12:	0a 50       	subi	r16, 0x0A	; 10
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	ae 01       	movw	r20, r28
     b18:	4f 5f       	subi	r20, 0xFF	; 255
     b1a:	5f 4f       	sbci	r21, 0xFF	; 255
     b1c:	f8 01       	movw	r30, r16
     b1e:	61 81       	ldd	r22, Z+1	; 0x01
     b20:	80 81       	ld	r24, Z
     b22:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <DIO_read>
		
		if(PUSH_BTN_PULL_UP == A_pbConfig[btnNumber].PUSH_BTN_connection)
     b26:	f8 01       	movw	r30, r16
     b28:	86 81       	ldd	r24, Z+6	; 0x06
     b2a:	81 11       	cpse	r24, r1
     b2c:	0a c0       	rjmp	.+20     	; 0xb42 <PUSH_BTN_read_state+0x5c>
		{
			if(DIO_HIGH == pin_logic_status)
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	81 11       	cpse	r24, r1
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <PUSH_BTN_read_state+0x56>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	f7 01       	movw	r30, r14
     b38:	80 83       	st	Z, r24
     b3a:	0e c0       	rjmp	.+28     	; 0xb58 <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     b3c:	f7 01       	movw	r30, r14
     b3e:	10 82       	st	Z, r1
     b40:	0b c0       	rjmp	.+22     	; 0xb58 <PUSH_BTN_read_state+0x72>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == A_pbConfig[btnNumber].PUSH_BTN_connection)
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	49 f4       	brne	.+18     	; 0xb58 <PUSH_BTN_read_state+0x72>
		{
			if(DIO_HIGH == pin_logic_status)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	81 11       	cpse	r24, r1
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <PUSH_BTN_read_state+0x6c>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     b4c:	f7 01       	movw	r30, r14
     b4e:	10 82       	st	Z, r1
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	f7 01       	movw	r30, r14
     b56:	80 83       	st	Z, r24
			}
		}
}
     b58:	0f 90       	pop	r0
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	08 95       	ret

00000b68 <ultrasonic_vInit>:

void ultrasonic_vInit()
{
	
	
	DIO_Initpin(&(ultra.triggerpin));
     b68:	87 e6       	ldi	r24, 0x67	; 103
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_Initpin>
	MCU_vEnableInterrupt();
     b70:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <MCU_vEnableInterrupt>
     b74:	08 95       	ret

00000b76 <ultrasonic_vGetDistance>:
}

void ultrasonic_vGetDistance(float64_t *Copy_f64distance)
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <ultrasonic_vGetDistance+0xa>
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	8c 01       	movw	r16, r24
	
	
	Uint32_t val = 0;
     b86:	1a 82       	std	Y+2, r1	; 0x02
     b88:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_HIGH);
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	63 e0       	ldi	r22, 0x03	; 3
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
     b94:	83 ec       	ldi	r24, 0xC3	; 195
     b96:	99 e0       	ldi	r25, 0x09	; 9
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <ultrasonic_vGetDistance+0x22>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <ultrasonic_vGetDistance+0x28>
     b9e:	00 00       	nop

	_delay_ms(10);
	
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_LOW);
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	63 e0       	ldi	r22, 0x03	; 3
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
	ICU_RisingEdgeCapture();
     baa:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <ICU_RisingEdgeCapture>

	
	while(ICU_g_flag != 1);
     bae:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ICU_g_flag>
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	e1 f7       	brne	.-8      	; 0xbae <ultrasonic_vGetDistance+0x38>
	ICU_getValue(&val);
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <ICU_getValue>

	*Copy_f64distance = ((float)val / 466.47*8)+1;	
     bbe:	69 81       	ldd	r22, Y+1	; 0x01
     bc0:	7a 81       	ldd	r23, Y+2	; 0x02
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
     bca:	29 e2       	ldi	r18, 0x29	; 41
     bcc:	3c e3       	ldi	r19, 0x3C	; 60
     bce:	49 ee       	ldi	r20, 0xE9	; 233
     bd0:	53 e4       	ldi	r21, 0x43	; 67
     bd2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divsf3>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__mulsf3>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e8       	ldi	r20, 0x80	; 128
     be8:	5f e3       	ldi	r21, 0x3F	; 63
     bea:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__addsf3>
     bee:	f8 01       	movw	r30, r16
     bf0:	60 83       	st	Z, r22
     bf2:	71 83       	std	Z+1, r23	; 0x01
     bf4:	82 83       	std	Z+2, r24	; 0x02
     bf6:	93 83       	std	Z+3, r25	; 0x03
	ICU_g_flag = 0;
     bf8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ICU_g_flag>
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret

00000c0a <main>:

#include "APPLICATION/app/apph.h"

void main(void)
{
	app_init();
     c0a:	0e 94 51 00 	call	0xa2	; 0xa2 <app_init>
	while(1)
	{
	app_main();
     c0e:	0e 94 61 00 	call	0xc2	; 0xc2 <app_main>
     c12:	fd cf       	rjmp	.-6      	; 0xc0e <main+0x4>

00000c14 <DIO_WritePin>:
			break;
			case PC:
			TOGGLE_BIT(DIO_PORTC_PORT_REG,pin_num);
			break;
			case PD:
			TOGGLE_BIT(DIO_PORTD_PORT_REG,pin_num);
     c14:	44 23       	and	r20, r20
     c16:	19 f0       	breq	.+6      	; 0xc1e <DIO_WritePin+0xa>
     c18:	41 30       	cpi	r20, 0x01	; 1
     c1a:	a9 f1       	breq	.+106    	; 0xc86 <DIO_WritePin+0x72>
     c1c:	08 95       	ret
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	89 f0       	breq	.+34     	; 0xc44 <DIO_WritePin+0x30>
     c22:	28 f0       	brcs	.+10     	; 0xc2e <DIO_WritePin+0x1a>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	c9 f0       	breq	.+50     	; 0xc5a <DIO_WritePin+0x46>
     c28:	83 30       	cpi	r24, 0x03	; 3
     c2a:	11 f1       	breq	.+68     	; 0xc70 <DIO_WritePin+0x5c>
     c2c:	08 95       	ret
     c2e:	2b b3       	in	r18, 0x1b	; 27
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_WritePin+0x26>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	6a 95       	dec	r22
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_WritePin+0x22>
     c3e:	82 2b       	or	r24, r18
     c40:	8b bb       	out	0x1b, r24	; 27
     c42:	08 95       	ret
     c44:	28 b3       	in	r18, 0x18	; 24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_WritePin+0x3c>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	6a 95       	dec	r22
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_WritePin+0x38>
     c54:	82 2b       	or	r24, r18
     c56:	88 bb       	out	0x18, r24	; 24
     c58:	08 95       	ret
     c5a:	25 b3       	in	r18, 0x15	; 21
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <DIO_WritePin+0x52>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	6a 95       	dec	r22
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <DIO_WritePin+0x4e>
     c6a:	82 2b       	or	r24, r18
     c6c:	85 bb       	out	0x15, r24	; 21
     c6e:	08 95       	ret
     c70:	22 b3       	in	r18, 0x12	; 18
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_WritePin+0x68>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	6a 95       	dec	r22
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_WritePin+0x64>
     c80:	82 2b       	or	r24, r18
     c82:	82 bb       	out	0x12, r24	; 18
     c84:	08 95       	ret
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	91 f0       	breq	.+36     	; 0xcae <DIO_WritePin+0x9a>
     c8a:	28 f0       	brcs	.+10     	; 0xc96 <DIO_WritePin+0x82>
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	d9 f0       	breq	.+54     	; 0xcc6 <DIO_WritePin+0xb2>
     c90:	83 30       	cpi	r24, 0x03	; 3
     c92:	29 f1       	breq	.+74     	; 0xcde <DIO_WritePin+0xca>
     c94:	08 95       	ret
     c96:	2b b3       	in	r18, 0x1b	; 27
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_WritePin+0x8e>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_WritePin+0x8a>
     ca6:	80 95       	com	r24
     ca8:	82 23       	and	r24, r18
     caa:	8b bb       	out	0x1b, r24	; 27
     cac:	08 95       	ret
     cae:	28 b3       	in	r18, 0x18	; 24
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_WritePin+0xa6>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	6a 95       	dec	r22
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_WritePin+0xa2>
     cbe:	80 95       	com	r24
     cc0:	82 23       	and	r24, r18
     cc2:	88 bb       	out	0x18, r24	; 24
     cc4:	08 95       	ret
     cc6:	25 b3       	in	r18, 0x15	; 21
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <DIO_WritePin+0xbe>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	6a 95       	dec	r22
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <DIO_WritePin+0xba>
     cd6:	80 95       	com	r24
     cd8:	82 23       	and	r24, r18
     cda:	85 bb       	out	0x15, r24	; 21
     cdc:	08 95       	ret
     cde:	22 b3       	in	r18, 0x12	; 18
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_WritePin+0xd6>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	6a 95       	dec	r22
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_WritePin+0xd2>
     cee:	80 95       	com	r24
     cf0:	82 23       	and	r24, r18
     cf2:	82 bb       	out	0x12, r24	; 18
     cf4:	08 95       	ret

00000cf6 <DIO_read>:
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	89 f0       	breq	.+34     	; 0xd1c <DIO_read+0x26>
     cfa:	28 f0       	brcs	.+10     	; 0xd06 <DIO_read+0x10>
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	c9 f0       	breq	.+50     	; 0xd32 <DIO_read+0x3c>
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	11 f1       	breq	.+68     	; 0xd48 <DIO_read+0x52>
     d04:	08 95       	ret
     d06:	89 b3       	in	r24, 0x19	; 25
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_read+0x1a>
     d0c:	95 95       	asr	r25
     d0e:	87 95       	ror	r24
     d10:	6a 95       	dec	r22
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_read+0x16>
     d14:	81 70       	andi	r24, 0x01	; 1
     d16:	fa 01       	movw	r30, r20
     d18:	80 83       	st	Z, r24
     d1a:	08 95       	ret
     d1c:	86 b3       	in	r24, 0x16	; 22
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_read+0x30>
     d22:	95 95       	asr	r25
     d24:	87 95       	ror	r24
     d26:	6a 95       	dec	r22
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_read+0x2c>
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	fa 01       	movw	r30, r20
     d2e:	80 83       	st	Z, r24
     d30:	08 95       	ret
     d32:	83 b3       	in	r24, 0x13	; 19
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_read+0x46>
     d38:	95 95       	asr	r25
     d3a:	87 95       	ror	r24
     d3c:	6a 95       	dec	r22
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_read+0x42>
     d40:	81 70       	andi	r24, 0x01	; 1
     d42:	fa 01       	movw	r30, r20
     d44:	80 83       	st	Z, r24
     d46:	08 95       	ret
     d48:	80 b3       	in	r24, 0x10	; 16
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_read+0x5c>
     d4e:	95 95       	asr	r25
     d50:	87 95       	ror	r24
     d52:	6a 95       	dec	r22
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_read+0x58>
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	fa 01       	movw	r30, r20
     d5a:	80 83       	st	Z, r24
     d5c:	08 95       	ret

00000d5e <DIO_toggle>:
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	89 f0       	breq	.+34     	; 0xd84 <DIO_toggle+0x26>
     d62:	28 f0       	brcs	.+10     	; 0xd6e <DIO_toggle+0x10>
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	c9 f0       	breq	.+50     	; 0xd9a <DIO_toggle+0x3c>
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	11 f1       	breq	.+68     	; 0xdb0 <DIO_toggle+0x52>
     d6c:	08 95       	ret
     d6e:	2b b3       	in	r18, 0x1b	; 27
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_toggle+0x1c>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	6a 95       	dec	r22
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_toggle+0x18>
     d7e:	82 27       	eor	r24, r18
     d80:	8b bb       	out	0x1b, r24	; 27
     d82:	08 95       	ret
     d84:	28 b3       	in	r18, 0x18	; 24
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_toggle+0x32>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	6a 95       	dec	r22
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_toggle+0x2e>
     d94:	82 27       	eor	r24, r18
     d96:	88 bb       	out	0x18, r24	; 24
     d98:	08 95       	ret
     d9a:	25 b3       	in	r18, 0x15	; 21
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_toggle+0x48>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	6a 95       	dec	r22
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_toggle+0x44>
     daa:	82 27       	eor	r24, r18
     dac:	85 bb       	out	0x15, r24	; 21
     dae:	08 95       	ret
     db0:	22 b3       	in	r18, 0x12	; 18
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_toggle+0x5e>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	6a 95       	dec	r22
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_toggle+0x5a>
     dc0:	82 27       	eor	r24, r18
     dc2:	82 bb       	out	0x12, r24	; 18
     dc4:	08 95       	ret

00000dc6 <DIO_Initpin>:
     dc6:	fc 01       	movw	r30, r24
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	81 11       	cpse	r24, r1
     dcc:	b5 c0       	rjmp	.+362    	; 0xf38 <DIO_Initpin+0x172>
     dce:	80 81       	ld	r24, Z
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	99 f0       	breq	.+38     	; 0xdfa <DIO_Initpin+0x34>
     dd4:	28 f0       	brcs	.+10     	; 0xde0 <DIO_Initpin+0x1a>
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	e9 f0       	breq	.+58     	; 0xe14 <DIO_Initpin+0x4e>
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	41 f1       	breq	.+80     	; 0xe2e <DIO_Initpin+0x68>
     dde:	33 c0       	rjmp	.+102    	; 0xe46 <DIO_Initpin+0x80>
     de0:	2a b3       	in	r18, 0x1a	; 26
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	01 80       	ldd	r0, Z+1	; 0x01
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_Initpin+0x28>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_Initpin+0x24>
     df2:	80 95       	com	r24
     df4:	82 23       	and	r24, r18
     df6:	8a bb       	out	0x1a, r24	; 26
     df8:	26 c0       	rjmp	.+76     	; 0xe46 <DIO_Initpin+0x80>
     dfa:	27 b3       	in	r18, 0x17	; 23
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	01 80       	ldd	r0, Z+1	; 0x01
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_Initpin+0x42>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_Initpin+0x3e>
     e0c:	80 95       	com	r24
     e0e:	82 23       	and	r24, r18
     e10:	87 bb       	out	0x17, r24	; 23
     e12:	19 c0       	rjmp	.+50     	; 0xe46 <DIO_Initpin+0x80>
     e14:	24 b3       	in	r18, 0x14	; 20
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	01 80       	ldd	r0, Z+1	; 0x01
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_Initpin+0x5c>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_Initpin+0x58>
     e26:	80 95       	com	r24
     e28:	82 23       	and	r24, r18
     e2a:	84 bb       	out	0x14, r24	; 20
     e2c:	0c c0       	rjmp	.+24     	; 0xe46 <DIO_Initpin+0x80>
     e2e:	21 b3       	in	r18, 0x11	; 17
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	01 80       	ldd	r0, Z+1	; 0x01
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_Initpin+0x76>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_Initpin+0x72>
     e40:	80 95       	com	r24
     e42:	82 23       	and	r24, r18
     e44:	81 bb       	out	0x11, r24	; 17
     e46:	83 81       	ldd	r24, Z+3	; 0x03
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	c9 f5       	brne	.+114    	; 0xebe <DIO_Initpin+0xf8>
     e4c:	80 81       	ld	r24, Z
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 f0       	breq	.+36     	; 0xe76 <DIO_Initpin+0xb0>
     e52:	28 f0       	brcs	.+10     	; 0xe5e <DIO_Initpin+0x98>
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	d9 f0       	breq	.+54     	; 0xe8e <DIO_Initpin+0xc8>
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	29 f1       	breq	.+74     	; 0xea6 <DIO_Initpin+0xe0>
     e5c:	08 95       	ret
     e5e:	2b b3       	in	r18, 0x1b	; 27
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	01 80       	ldd	r0, Z+1	; 0x01
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_Initpin+0xa6>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_Initpin+0xa2>
     e70:	82 2b       	or	r24, r18
     e72:	8b bb       	out	0x1b, r24	; 27
     e74:	08 95       	ret
     e76:	28 b3       	in	r18, 0x18	; 24
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	01 80       	ldd	r0, Z+1	; 0x01
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_Initpin+0xbe>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_Initpin+0xba>
     e88:	82 2b       	or	r24, r18
     e8a:	88 bb       	out	0x18, r24	; 24
     e8c:	08 95       	ret
     e8e:	25 b3       	in	r18, 0x15	; 21
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	01 80       	ldd	r0, Z+1	; 0x01
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_Initpin+0xd6>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_Initpin+0xd2>
     ea0:	82 2b       	or	r24, r18
     ea2:	85 bb       	out	0x15, r24	; 21
     ea4:	08 95       	ret
     ea6:	22 b3       	in	r18, 0x12	; 18
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	01 80       	ldd	r0, Z+1	; 0x01
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_Initpin+0xee>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_Initpin+0xea>
     eb8:	82 2b       	or	r24, r18
     eba:	82 bb       	out	0x12, r24	; 18
     ebc:	08 95       	ret
     ebe:	80 81       	ld	r24, Z
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	99 f0       	breq	.+38     	; 0xeea <DIO_Initpin+0x124>
     ec4:	28 f0       	brcs	.+10     	; 0xed0 <DIO_Initpin+0x10a>
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	e9 f0       	breq	.+58     	; 0xf04 <DIO_Initpin+0x13e>
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	41 f1       	breq	.+80     	; 0xf1e <DIO_Initpin+0x158>
     ece:	08 95       	ret
     ed0:	2b b3       	in	r18, 0x1b	; 27
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	01 80       	ldd	r0, Z+1	; 0x01
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_Initpin+0x118>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_Initpin+0x114>
     ee2:	80 95       	com	r24
     ee4:	82 23       	and	r24, r18
     ee6:	8b bb       	out	0x1b, r24	; 27
     ee8:	08 95       	ret
     eea:	28 b3       	in	r18, 0x18	; 24
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	01 80       	ldd	r0, Z+1	; 0x01
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_Initpin+0x132>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_Initpin+0x12e>
     efc:	80 95       	com	r24
     efe:	82 23       	and	r24, r18
     f00:	88 bb       	out	0x18, r24	; 24
     f02:	08 95       	ret
     f04:	25 b3       	in	r18, 0x15	; 21
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	01 80       	ldd	r0, Z+1	; 0x01
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_Initpin+0x14c>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_Initpin+0x148>
     f16:	80 95       	com	r24
     f18:	82 23       	and	r24, r18
     f1a:	85 bb       	out	0x15, r24	; 21
     f1c:	08 95       	ret
     f1e:	22 b3       	in	r18, 0x12	; 18
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	01 80       	ldd	r0, Z+1	; 0x01
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_Initpin+0x166>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_Initpin+0x162>
     f30:	80 95       	com	r24
     f32:	82 23       	and	r24, r18
     f34:	82 bb       	out	0x12, r24	; 18
     f36:	08 95       	ret
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	09 f0       	breq	.+2      	; 0xf3e <DIO_Initpin+0x178>
     f3c:	b0 c0       	rjmp	.+352    	; 0x109e <DIO_Initpin+0x2d8>
     f3e:	80 81       	ld	r24, Z
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 f0       	breq	.+36     	; 0xf68 <DIO_Initpin+0x1a2>
     f44:	28 f0       	brcs	.+10     	; 0xf50 <DIO_Initpin+0x18a>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	d9 f0       	breq	.+54     	; 0xf80 <DIO_Initpin+0x1ba>
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	29 f1       	breq	.+74     	; 0xf98 <DIO_Initpin+0x1d2>
     f4e:	2f c0       	rjmp	.+94     	; 0xfae <DIO_Initpin+0x1e8>
     f50:	2a b3       	in	r18, 0x1a	; 26
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	01 80       	ldd	r0, Z+1	; 0x01
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_Initpin+0x198>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_Initpin+0x194>
     f62:	82 2b       	or	r24, r18
     f64:	8a bb       	out	0x1a, r24	; 26
     f66:	23 c0       	rjmp	.+70     	; 0xfae <DIO_Initpin+0x1e8>
     f68:	27 b3       	in	r18, 0x17	; 23
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	01 80       	ldd	r0, Z+1	; 0x01
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_Initpin+0x1b0>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_Initpin+0x1ac>
     f7a:	82 2b       	or	r24, r18
     f7c:	87 bb       	out	0x17, r24	; 23
     f7e:	17 c0       	rjmp	.+46     	; 0xfae <DIO_Initpin+0x1e8>
     f80:	24 b3       	in	r18, 0x14	; 20
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	01 80       	ldd	r0, Z+1	; 0x01
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_Initpin+0x1c8>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_Initpin+0x1c4>
     f92:	82 2b       	or	r24, r18
     f94:	84 bb       	out	0x14, r24	; 20
     f96:	0b c0       	rjmp	.+22     	; 0xfae <DIO_Initpin+0x1e8>
     f98:	21 b3       	in	r18, 0x11	; 17
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	01 80       	ldd	r0, Z+1	; 0x01
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_Initpin+0x1e0>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_Initpin+0x1dc>
     faa:	82 2b       	or	r24, r18
     fac:	81 bb       	out	0x11, r24	; 17
     fae:	83 81       	ldd	r24, Z+3	; 0x03
     fb0:	81 11       	cpse	r24, r1
     fb2:	39 c0       	rjmp	.+114    	; 0x1026 <DIO_Initpin+0x260>
     fb4:	80 81       	ld	r24, Z
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	91 f0       	breq	.+36     	; 0xfde <DIO_Initpin+0x218>
     fba:	28 f0       	brcs	.+10     	; 0xfc6 <DIO_Initpin+0x200>
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	d9 f0       	breq	.+54     	; 0xff6 <DIO_Initpin+0x230>
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	29 f1       	breq	.+74     	; 0x100e <DIO_Initpin+0x248>
     fc4:	08 95       	ret
     fc6:	2b b3       	in	r18, 0x1b	; 27
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	01 80       	ldd	r0, Z+1	; 0x01
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_Initpin+0x20e>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_Initpin+0x20a>
     fd8:	82 2b       	or	r24, r18
     fda:	8b bb       	out	0x1b, r24	; 27
     fdc:	08 95       	ret
     fde:	28 b3       	in	r18, 0x18	; 24
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	01 80       	ldd	r0, Z+1	; 0x01
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_Initpin+0x226>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_Initpin+0x222>
     ff0:	82 2b       	or	r24, r18
     ff2:	88 bb       	out	0x18, r24	; 24
     ff4:	08 95       	ret
     ff6:	25 b3       	in	r18, 0x15	; 21
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	01 80       	ldd	r0, Z+1	; 0x01
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_Initpin+0x23e>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_Initpin+0x23a>
    1008:	82 2b       	or	r24, r18
    100a:	85 bb       	out	0x15, r24	; 21
    100c:	08 95       	ret
    100e:	22 b3       	in	r18, 0x12	; 18
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 80       	ldd	r0, Z+1	; 0x01
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_Initpin+0x256>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_Initpin+0x252>
    1020:	82 2b       	or	r24, r18
    1022:	82 bb       	out	0x12, r24	; 18
    1024:	08 95       	ret
    1026:	80 81       	ld	r24, Z
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	99 f0       	breq	.+38     	; 0x1052 <DIO_Initpin+0x28c>
    102c:	28 f0       	brcs	.+10     	; 0x1038 <DIO_Initpin+0x272>
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	e9 f0       	breq	.+58     	; 0x106c <DIO_Initpin+0x2a6>
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	41 f1       	breq	.+80     	; 0x1086 <DIO_Initpin+0x2c0>
    1036:	08 95       	ret
    1038:	2b b3       	in	r18, 0x1b	; 27
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	01 80       	ldd	r0, Z+1	; 0x01
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_Initpin+0x280>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_Initpin+0x27c>
    104a:	80 95       	com	r24
    104c:	82 23       	and	r24, r18
    104e:	8b bb       	out	0x1b, r24	; 27
    1050:	08 95       	ret
    1052:	28 b3       	in	r18, 0x18	; 24
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	01 80       	ldd	r0, Z+1	; 0x01
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_Initpin+0x29a>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_Initpin+0x296>
    1064:	80 95       	com	r24
    1066:	82 23       	and	r24, r18
    1068:	88 bb       	out	0x18, r24	; 24
    106a:	08 95       	ret
    106c:	25 b3       	in	r18, 0x15	; 21
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	01 80       	ldd	r0, Z+1	; 0x01
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_Initpin+0x2b4>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_Initpin+0x2b0>
    107e:	80 95       	com	r24
    1080:	82 23       	and	r24, r18
    1082:	85 bb       	out	0x15, r24	; 21
    1084:	08 95       	ret
    1086:	22 b3       	in	r18, 0x12	; 18
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	01 80       	ldd	r0, Z+1	; 0x01
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_Initpin+0x2ce>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_Initpin+0x2ca>
    1098:	80 95       	com	r24
    109a:	82 23       	and	r24, r18
    109c:	82 bb       	out	0x12, r24	; 18
    109e:	08 95       	ret

000010a0 <DIO_initpinn>:
    10a0:	98 2f       	mov	r25, r24
    10a2:	96 95       	lsr	r25
    10a4:	96 95       	lsr	r25
    10a6:	96 95       	lsr	r25
    10a8:	87 70       	andi	r24, 0x07	; 7
    10aa:	61 30       	cpi	r22, 0x01	; 1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <DIO_initpinn+0x10>
    10ae:	55 c0       	rjmp	.+170    	; 0x115a <DIO_initpinn+0xba>
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <DIO_initpinn+0x1a>
    10b2:	62 30       	cpi	r22, 0x02	; 2
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <DIO_initpinn+0x18>
    10b6:	a1 c0       	rjmp	.+322    	; 0x11fa <DIO_initpinn+0x15a>
    10b8:	08 95       	ret
    10ba:	91 30       	cpi	r25, 0x01	; 1
    10bc:	c1 f0       	breq	.+48     	; 0x10ee <DIO_initpinn+0x4e>
    10be:	28 f0       	brcs	.+10     	; 0x10ca <DIO_initpinn+0x2a>
    10c0:	92 30       	cpi	r25, 0x02	; 2
    10c2:	39 f1       	breq	.+78     	; 0x1112 <DIO_initpinn+0x72>
    10c4:	93 30       	cpi	r25, 0x03	; 3
    10c6:	b9 f1       	breq	.+110    	; 0x1136 <DIO_initpinn+0x96>
    10c8:	08 95       	ret
    10ca:	4a b3       	in	r20, 0x1a	; 26
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	b9 01       	movw	r22, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_initpinn+0x38>
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_initpinn+0x34>
    10dc:	cb 01       	movw	r24, r22
    10de:	94 2f       	mov	r25, r20
    10e0:	98 2b       	or	r25, r24
    10e2:	9a bb       	out	0x1a, r25	; 26
    10e4:	9b b3       	in	r25, 0x1b	; 27
    10e6:	80 95       	com	r24
    10e8:	89 23       	and	r24, r25
    10ea:	8b bb       	out	0x1b, r24	; 27
    10ec:	08 95       	ret
    10ee:	47 b3       	in	r20, 0x17	; 23
    10f0:	21 e0       	ldi	r18, 0x01	; 1
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	b9 01       	movw	r22, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_initpinn+0x5c>
    10f8:	66 0f       	add	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_initpinn+0x58>
    1100:	cb 01       	movw	r24, r22
    1102:	94 2f       	mov	r25, r20
    1104:	98 2b       	or	r25, r24
    1106:	97 bb       	out	0x17, r25	; 23
    1108:	98 b3       	in	r25, 0x18	; 24
    110a:	80 95       	com	r24
    110c:	89 23       	and	r24, r25
    110e:	88 bb       	out	0x18, r24	; 24
    1110:	08 95       	ret
    1112:	44 b3       	in	r20, 0x14	; 20
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	b9 01       	movw	r22, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_initpinn+0x80>
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_initpinn+0x7c>
    1124:	cb 01       	movw	r24, r22
    1126:	94 2f       	mov	r25, r20
    1128:	98 2b       	or	r25, r24
    112a:	94 bb       	out	0x14, r25	; 20
    112c:	95 b3       	in	r25, 0x15	; 21
    112e:	80 95       	com	r24
    1130:	89 23       	and	r24, r25
    1132:	85 bb       	out	0x15, r24	; 21
    1134:	08 95       	ret
    1136:	41 b3       	in	r20, 0x11	; 17
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	b9 01       	movw	r22, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_initpinn+0xa4>
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_initpinn+0xa0>
    1148:	cb 01       	movw	r24, r22
    114a:	94 2f       	mov	r25, r20
    114c:	98 2b       	or	r25, r24
    114e:	91 bb       	out	0x11, r25	; 17
    1150:	92 b3       	in	r25, 0x12	; 18
    1152:	80 95       	com	r24
    1154:	89 23       	and	r24, r25
    1156:	82 bb       	out	0x12, r24	; 18
    1158:	08 95       	ret
    115a:	91 30       	cpi	r25, 0x01	; 1
    115c:	c1 f0       	breq	.+48     	; 0x118e <DIO_initpinn+0xee>
    115e:	28 f0       	brcs	.+10     	; 0x116a <DIO_initpinn+0xca>
    1160:	92 30       	cpi	r25, 0x02	; 2
    1162:	39 f1       	breq	.+78     	; 0x11b2 <DIO_initpinn+0x112>
    1164:	93 30       	cpi	r25, 0x03	; 3
    1166:	b9 f1       	breq	.+110    	; 0x11d6 <DIO_initpinn+0x136>
    1168:	08 95       	ret
    116a:	4a b3       	in	r20, 0x1a	; 26
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	b9 01       	movw	r22, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_initpinn+0xd8>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_initpinn+0xd4>
    117c:	cb 01       	movw	r24, r22
    117e:	80 95       	com	r24
    1180:	94 2f       	mov	r25, r20
    1182:	98 23       	and	r25, r24
    1184:	9a bb       	out	0x1a, r25	; 26
    1186:	9b b3       	in	r25, 0x1b	; 27
    1188:	89 23       	and	r24, r25
    118a:	8b bb       	out	0x1b, r24	; 27
    118c:	08 95       	ret
    118e:	47 b3       	in	r20, 0x17	; 23
    1190:	21 e0       	ldi	r18, 0x01	; 1
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	b9 01       	movw	r22, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_initpinn+0xfc>
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_initpinn+0xf8>
    11a0:	cb 01       	movw	r24, r22
    11a2:	80 95       	com	r24
    11a4:	94 2f       	mov	r25, r20
    11a6:	98 23       	and	r25, r24
    11a8:	97 bb       	out	0x17, r25	; 23
    11aa:	98 b3       	in	r25, 0x18	; 24
    11ac:	89 23       	and	r24, r25
    11ae:	88 bb       	out	0x18, r24	; 24
    11b0:	08 95       	ret
    11b2:	44 b3       	in	r20, 0x14	; 20
    11b4:	21 e0       	ldi	r18, 0x01	; 1
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	b9 01       	movw	r22, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_initpinn+0x120>
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_initpinn+0x11c>
    11c4:	cb 01       	movw	r24, r22
    11c6:	80 95       	com	r24
    11c8:	94 2f       	mov	r25, r20
    11ca:	98 23       	and	r25, r24
    11cc:	94 bb       	out	0x14, r25	; 20
    11ce:	95 b3       	in	r25, 0x15	; 21
    11d0:	89 23       	and	r24, r25
    11d2:	85 bb       	out	0x15, r24	; 21
    11d4:	08 95       	ret
    11d6:	41 b3       	in	r20, 0x11	; 17
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	b9 01       	movw	r22, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_initpinn+0x144>
    11e0:	66 0f       	add	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_initpinn+0x140>
    11e8:	cb 01       	movw	r24, r22
    11ea:	80 95       	com	r24
    11ec:	94 2f       	mov	r25, r20
    11ee:	98 23       	and	r25, r24
    11f0:	91 bb       	out	0x11, r25	; 17
    11f2:	92 b3       	in	r25, 0x12	; 18
    11f4:	89 23       	and	r24, r25
    11f6:	82 bb       	out	0x12, r24	; 18
    11f8:	08 95       	ret
    11fa:	91 30       	cpi	r25, 0x01	; 1
    11fc:	c1 f0       	breq	.+48     	; 0x122e <DIO_initpinn+0x18e>
    11fe:	28 f0       	brcs	.+10     	; 0x120a <DIO_initpinn+0x16a>
    1200:	92 30       	cpi	r25, 0x02	; 2
    1202:	39 f1       	breq	.+78     	; 0x1252 <DIO_initpinn+0x1b2>
    1204:	93 30       	cpi	r25, 0x03	; 3
    1206:	b9 f1       	breq	.+110    	; 0x1276 <DIO_initpinn+0x1d6>
    1208:	08 95       	ret
    120a:	4a b3       	in	r20, 0x1a	; 26
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	b9 01       	movw	r22, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_initpinn+0x178>
    1214:	66 0f       	add	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_initpinn+0x174>
    121c:	cb 01       	movw	r24, r22
    121e:	96 2f       	mov	r25, r22
    1220:	90 95       	com	r25
    1222:	94 23       	and	r25, r20
    1224:	9a bb       	out	0x1a, r25	; 26
    1226:	9b b3       	in	r25, 0x1b	; 27
    1228:	89 2b       	or	r24, r25
    122a:	8b bb       	out	0x1b, r24	; 27
    122c:	08 95       	ret
    122e:	47 b3       	in	r20, 0x17	; 23
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	b9 01       	movw	r22, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_initpinn+0x19c>
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	8a 95       	dec	r24
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_initpinn+0x198>
    1240:	cb 01       	movw	r24, r22
    1242:	96 2f       	mov	r25, r22
    1244:	90 95       	com	r25
    1246:	94 23       	and	r25, r20
    1248:	97 bb       	out	0x17, r25	; 23
    124a:	98 b3       	in	r25, 0x18	; 24
    124c:	89 2b       	or	r24, r25
    124e:	88 bb       	out	0x18, r24	; 24
    1250:	08 95       	ret
    1252:	44 b3       	in	r20, 0x14	; 20
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	b9 01       	movw	r22, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_initpinn+0x1c0>
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_initpinn+0x1bc>
    1264:	cb 01       	movw	r24, r22
    1266:	96 2f       	mov	r25, r22
    1268:	90 95       	com	r25
    126a:	94 23       	and	r25, r20
    126c:	94 bb       	out	0x14, r25	; 20
    126e:	95 b3       	in	r25, 0x15	; 21
    1270:	89 2b       	or	r24, r25
    1272:	85 bb       	out	0x15, r24	; 21
    1274:	08 95       	ret
    1276:	41 b3       	in	r20, 0x11	; 17
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	b9 01       	movw	r22, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_initpinn+0x1e4>
    1280:	66 0f       	add	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_initpinn+0x1e0>
    1288:	cb 01       	movw	r24, r22
    128a:	96 2f       	mov	r25, r22
    128c:	90 95       	com	r25
    128e:	94 23       	and	r25, r20
    1290:	91 bb       	out	0x11, r25	; 17
    1292:	92 b3       	in	r25, 0x12	; 18
    1294:	89 2b       	or	r24, r25
    1296:	82 bb       	out	0x12, r24	; 18
    1298:	08 95       	ret

0000129a <DIO_writepinn>:
    129a:	98 2f       	mov	r25, r24
    129c:	96 95       	lsr	r25
    129e:	96 95       	lsr	r25
    12a0:	96 95       	lsr	r25
    12a2:	87 70       	andi	r24, 0x07	; 7
    12a4:	66 23       	and	r22, r22
    12a6:	09 f4       	brne	.+2      	; 0x12aa <DIO_writepinn+0x10>
    12a8:	3f c0       	rjmp	.+126    	; 0x1328 <DIO_writepinn+0x8e>
    12aa:	61 30       	cpi	r22, 0x01	; 1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <DIO_writepinn+0x16>
    12ae:	7b c0       	rjmp	.+246    	; 0x13a6 <DIO_writepinn+0x10c>
    12b0:	91 30       	cpi	r25, 0x01	; 1
    12b2:	99 f0       	breq	.+38     	; 0x12da <DIO_writepinn+0x40>
    12b4:	28 f0       	brcs	.+10     	; 0x12c0 <DIO_writepinn+0x26>
    12b6:	92 30       	cpi	r25, 0x02	; 2
    12b8:	e9 f0       	breq	.+58     	; 0x12f4 <DIO_writepinn+0x5a>
    12ba:	93 30       	cpi	r25, 0x03	; 3
    12bc:	41 f1       	breq	.+80     	; 0x130e <DIO_writepinn+0x74>
    12be:	08 95       	ret
    12c0:	4b b3       	in	r20, 0x1b	; 27
    12c2:	21 e0       	ldi	r18, 0x01	; 1
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	b9 01       	movw	r22, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_writepinn+0x34>
    12ca:	66 0f       	add	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_writepinn+0x30>
    12d2:	cb 01       	movw	r24, r22
    12d4:	84 2b       	or	r24, r20
    12d6:	8b bb       	out	0x1b, r24	; 27
    12d8:	08 95       	ret
    12da:	48 b3       	in	r20, 0x18	; 24
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	b9 01       	movw	r22, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_writepinn+0x4e>
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_writepinn+0x4a>
    12ec:	cb 01       	movw	r24, r22
    12ee:	84 2b       	or	r24, r20
    12f0:	88 bb       	out	0x18, r24	; 24
    12f2:	08 95       	ret
    12f4:	45 b3       	in	r20, 0x15	; 21
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	b9 01       	movw	r22, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_writepinn+0x68>
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_writepinn+0x64>
    1306:	cb 01       	movw	r24, r22
    1308:	84 2b       	or	r24, r20
    130a:	85 bb       	out	0x15, r24	; 21
    130c:	08 95       	ret
    130e:	42 b3       	in	r20, 0x12	; 18
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	b9 01       	movw	r22, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_writepinn+0x82>
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_writepinn+0x7e>
    1320:	cb 01       	movw	r24, r22
    1322:	84 2b       	or	r24, r20
    1324:	82 bb       	out	0x12, r24	; 18
    1326:	08 95       	ret
    1328:	91 30       	cpi	r25, 0x01	; 1
    132a:	a1 f0       	breq	.+40     	; 0x1354 <DIO_writepinn+0xba>
    132c:	28 f0       	brcs	.+10     	; 0x1338 <DIO_writepinn+0x9e>
    132e:	92 30       	cpi	r25, 0x02	; 2
    1330:	f9 f0       	breq	.+62     	; 0x1370 <DIO_writepinn+0xd6>
    1332:	93 30       	cpi	r25, 0x03	; 3
    1334:	59 f1       	breq	.+86     	; 0x138c <DIO_writepinn+0xf2>
    1336:	08 95       	ret
    1338:	4b b3       	in	r20, 0x1b	; 27
    133a:	21 e0       	ldi	r18, 0x01	; 1
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	b9 01       	movw	r22, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_writepinn+0xac>
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	8a 95       	dec	r24
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_writepinn+0xa8>
    134a:	cb 01       	movw	r24, r22
    134c:	80 95       	com	r24
    134e:	84 23       	and	r24, r20
    1350:	8b bb       	out	0x1b, r24	; 27
    1352:	08 95       	ret
    1354:	48 b3       	in	r20, 0x18	; 24
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	b9 01       	movw	r22, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_writepinn+0xc8>
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_writepinn+0xc4>
    1366:	cb 01       	movw	r24, r22
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	88 bb       	out	0x18, r24	; 24
    136e:	08 95       	ret
    1370:	45 b3       	in	r20, 0x15	; 21
    1372:	21 e0       	ldi	r18, 0x01	; 1
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	b9 01       	movw	r22, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_writepinn+0xe4>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_writepinn+0xe0>
    1382:	cb 01       	movw	r24, r22
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	85 bb       	out	0x15, r24	; 21
    138a:	08 95       	ret
    138c:	42 b3       	in	r20, 0x12	; 18
    138e:	21 e0       	ldi	r18, 0x01	; 1
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	b9 01       	movw	r22, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_writepinn+0x100>
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_writepinn+0xfc>
    139e:	cb 01       	movw	r24, r22
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	82 bb       	out	0x12, r24	; 18
    13a6:	08 95       	ret

000013a8 <DIO_InitDCM>:



void DIO_InitDCM(u8 pin, u8 port,u8 mode)
{
		if ( mode == DIO_MODE_INPUT)
    13a8:	41 11       	cpse	r20, r1
    13aa:	40 c0       	rjmp	.+128    	; 0x142c <DIO_InitDCM+0x84>
		{
			switch(port)
    13ac:	61 30       	cpi	r22, 0x01	; 1
    13ae:	a1 f0       	breq	.+40     	; 0x13d8 <DIO_InitDCM+0x30>
    13b0:	28 f0       	brcs	.+10     	; 0x13bc <DIO_InitDCM+0x14>
    13b2:	62 30       	cpi	r22, 0x02	; 2
    13b4:	f9 f0       	breq	.+62     	; 0x13f4 <DIO_InitDCM+0x4c>
    13b6:	63 30       	cpi	r22, 0x03	; 3
    13b8:	59 f1       	breq	.+86     	; 0x1410 <DIO_InitDCM+0x68>
    13ba:	08 95       	ret
			{
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_DDR_REG,pin);	break;
    13bc:	4a b3       	in	r20, 0x1a	; 26
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	b9 01       	movw	r22, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_InitDCM+0x22>
    13c6:	66 0f       	add	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_InitDCM+0x1e>
    13ce:	cb 01       	movw	r24, r22
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8a bb       	out	0x1a, r24	; 26
    13d6:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_DDR_REG,pin);	break;
    13d8:	47 b3       	in	r20, 0x17	; 23
    13da:	21 e0       	ldi	r18, 0x01	; 1
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	b9 01       	movw	r22, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_InitDCM+0x3e>
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	8a 95       	dec	r24
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_InitDCM+0x3a>
    13ea:	cb 01       	movw	r24, r22
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	87 bb       	out	0x17, r24	; 23
    13f2:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_DDR_REG,pin);	break;
    13f4:	44 b3       	in	r20, 0x14	; 20
    13f6:	21 e0       	ldi	r18, 0x01	; 1
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	b9 01       	movw	r22, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_InitDCM+0x5a>
    13fe:	66 0f       	add	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	8a 95       	dec	r24
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_InitDCM+0x56>
    1406:	cb 01       	movw	r24, r22
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	84 bb       	out	0x14, r24	; 20
    140e:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_DDR_REG,pin);	break;
    1410:	41 b3       	in	r20, 0x11	; 17
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	b9 01       	movw	r22, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_InitDCM+0x76>
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_InitDCM+0x72>
    1422:	cb 01       	movw	r24, r22
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	81 bb       	out	0x11, r24	; 17
    142a:	08 95       	ret
				default:			break;
			}
		}
		else if ( mode == DIO_MODE_OUTPUT)
    142c:	41 30       	cpi	r20, 0x01	; 1
    142e:	d9 f5       	brne	.+118    	; 0x14a6 <DIO_InitDCM+0xfe>
		{
			switch( port )
    1430:	61 30       	cpi	r22, 0x01	; 1
    1432:	99 f0       	breq	.+38     	; 0x145a <DIO_InitDCM+0xb2>
    1434:	28 f0       	brcs	.+10     	; 0x1440 <DIO_InitDCM+0x98>
    1436:	62 30       	cpi	r22, 0x02	; 2
    1438:	e9 f0       	breq	.+58     	; 0x1474 <DIO_InitDCM+0xcc>
    143a:	63 30       	cpi	r22, 0x03	; 3
    143c:	41 f1       	breq	.+80     	; 0x148e <DIO_InitDCM+0xe6>
    143e:	08 95       	ret
			{
				case DIO_PORTA:	SET_BIT(DIO_PORTA_DDR_REG,pin);	break;
    1440:	4a b3       	in	r20, 0x1a	; 26
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	b9 01       	movw	r22, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_InitDCM+0xa6>
    144a:	66 0f       	add	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_InitDCM+0xa2>
    1452:	cb 01       	movw	r24, r22
    1454:	84 2b       	or	r24, r20
    1456:	8a bb       	out	0x1a, r24	; 26
    1458:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_DDR_REG,pin);	break;
    145a:	47 b3       	in	r20, 0x17	; 23
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	b9 01       	movw	r22, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_InitDCM+0xc0>
    1464:	66 0f       	add	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_InitDCM+0xbc>
    146c:	cb 01       	movw	r24, r22
    146e:	84 2b       	or	r24, r20
    1470:	87 bb       	out	0x17, r24	; 23
    1472:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_DDR_REG,pin);	break;
    1474:	44 b3       	in	r20, 0x14	; 20
    1476:	21 e0       	ldi	r18, 0x01	; 1
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	b9 01       	movw	r22, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_InitDCM+0xda>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_InitDCM+0xd6>
    1486:	cb 01       	movw	r24, r22
    1488:	84 2b       	or	r24, r20
    148a:	84 bb       	out	0x14, r24	; 20
    148c:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_DDR_REG,pin);	break;
    148e:	41 b3       	in	r20, 0x11	; 17
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	b9 01       	movw	r22, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_InitDCM+0xf4>
    1498:	66 0f       	add	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_InitDCM+0xf0>
    14a0:	cb 01       	movw	r24, r22
    14a2:	84 2b       	or	r24, r20
    14a4:	81 bb       	out	0x11, r24	; 17
    14a6:	08 95       	ret

000014a8 <ICU_getValue>:
}
 
 
void ICU_getValue(u32 *u32_l_ICR_value)
{
	*u32_l_ICR_value = ICU_g_Count;
    14a8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <ICU_g_Count>
    14ac:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <ICU_g_Count+0x1>
    14b0:	fc 01       	movw	r30, r24
    14b2:	31 83       	std	Z+1, r19	; 0x01
    14b4:	20 83       	st	Z, r18
    14b6:	08 95       	ret

000014b8 <EXI_enablePIE>:
 */

void EXI_enablePIE( Uchar8_t u8_a_interruptId, Uchar8_t u8_a_senseControl )
{

        SET_BIT(TIMER_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    14b8:	8f b7       	in	r24, 0x3f	; 63
    14ba:	80 68       	ori	r24, 0x80	; 128
    14bc:	8f bf       	out	0x3f, r24	; 63

        SET_BIT( EXI_U8_GICR_REG, EXI_U8_INT2_BIT );
    14be:	8b b7       	in	r24, 0x3b	; 59
    14c0:	80 62       	ori	r24, 0x20	; 32
    14c2:	8b bf       	out	0x3b, r24	; 59

                /* Check 1.1.1: Required SenseControl */
                switch ( u8_a_senseControl )
    14c4:	62 30       	cpi	r22, 0x02	; 2
    14c6:	19 f0       	breq	.+6      	; 0x14ce <EXI_enablePIE+0x16>
    14c8:	63 30       	cpi	r22, 0x03	; 3
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <EXI_enablePIE+0x1e>
    14cc:	08 95       	ret
                {
                    //case EXI_U8_SENSE_LOW_LEVEL		: CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                   // case EXI_U8_SENSE_LOGICAL_CHANGE: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                    case EXI_U8_SENSE_FALLING_EDGE	: CLEAR_BIT( EXI_U8_MCUCSR_REG, 6 ); break;
    14ce:	84 b7       	in	r24, 0x34	; 52
    14d0:	8f 7b       	andi	r24, 0xBF	; 191
    14d2:	84 bf       	out	0x34, r24	; 52
    14d4:	08 95       	ret
                    case EXI_U8_SENSE_RISING_EDGE	: SET_BIT( EXI_U8_MCUCSR_REG, 6 );  break;
    14d6:	84 b7       	in	r24, 0x34	; 52
    14d8:	80 64       	ori	r24, 0x40	; 64
    14da:	84 bf       	out	0x34, r24	; 52
    14dc:	08 95       	ret

000014de <TIMER_tmr1NormalModeInit>:
 * @return An EN_TMR_ERROR_T value indicating the success or failure of the operation
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1NormalModeInit(EN_TIMER_INTERRPUT_T en_a_interrputEnable)
{
	switch (en_a_interrputEnable)
    14de:	88 23       	and	r24, r24
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <TIMER_tmr1NormalModeInit+0xa>
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	d9 f0       	breq	.+54     	; 0x151c <TIMER_tmr1NormalModeInit+0x3e>
    14e6:	2e c0       	rjmp	.+92     	; 0x1544 <TIMER_tmr1NormalModeInit+0x66>
	{
	case ENABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    14e8:	8f b5       	in	r24, 0x2f	; 47
    14ea:	8e 7f       	andi	r24, 0xFE	; 254
    14ec:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    14ee:	8f b5       	in	r24, 0x2f	; 47
    14f0:	8d 7f       	andi	r24, 0xFD	; 253
    14f2:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    14f4:	8e b5       	in	r24, 0x2e	; 46
    14f6:	87 7f       	andi	r24, 0xF7	; 247
    14f8:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    14fa:	8e b5       	in	r24, 0x2e	; 46
    14fc:	8f 7e       	andi	r24, 0xEF	; 239
    14fe:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    1500:	8f b5       	in	r24, 0x2f	; 47
    1502:	88 60       	ori	r24, 0x08	; 8
    1504:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    1506:	8f b5       	in	r24, 0x2f	; 47
    1508:	84 60       	ori	r24, 0x04	; 4
    150a:	8f bd       	out	0x2f, r24	; 47
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    150c:	8f b7       	in	r24, 0x3f	; 63
    150e:	80 68       	ori	r24, 0x80	; 128
    1510:	8f bf       	out	0x3f, r24	; 63
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
    1512:	89 b7       	in	r24, 0x39	; 57
    1514:	84 60       	ori	r24, 0x04	; 4
    1516:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1518:	80 e0       	ldi	r24, 0x00	; 0
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
		break;
    151a:	08 95       	ret
	case DISABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    151c:	8f b5       	in	r24, 0x2f	; 47
    151e:	8e 7f       	andi	r24, 0xFE	; 254
    1520:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    1522:	8f b5       	in	r24, 0x2f	; 47
    1524:	8d 7f       	andi	r24, 0xFD	; 253
    1526:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    1528:	8e b5       	in	r24, 0x2e	; 46
    152a:	87 7f       	andi	r24, 0xF7	; 247
    152c:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    152e:	8e b5       	in	r24, 0x2e	; 46
    1530:	8f 7e       	andi	r24, 0xEF	; 239
    1532:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    1534:	8f b5       	in	r24, 0x2f	; 47
    1536:	88 60       	ori	r24, 0x08	; 8
    1538:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    153a:	8f b5       	in	r24, 0x2f	; 47
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	8f bd       	out	0x2f, r24	; 47
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1540:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
    1542:	08 95       	ret
	default:
		return TIMER_ERROR;
    1544:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    1546:	08 95       	ret

00001548 <TIMER_tmr1Start>:
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1Start(Uint16_t u16_a_prescaler)
{
	//select the required prescaler value
	switch(u16_a_prescaler)
    1548:	80 34       	cpi	r24, 0x40	; 64
    154a:	91 05       	cpc	r25, r1
    154c:	29 f1       	breq	.+74     	; 0x1598 <TIMER_tmr1Start+0x50>
    154e:	30 f4       	brcc	.+12     	; 0x155c <TIMER_tmr1Start+0x14>
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	91 05       	cpc	r25, r1
    1554:	59 f0       	breq	.+22     	; 0x156c <TIMER_tmr1Start+0x24>
    1556:	08 97       	sbiw	r24, 0x08	; 8
    1558:	a1 f0       	breq	.+40     	; 0x1582 <TIMER_tmr1Start+0x3a>
    155a:	3f c0       	rjmp	.+126    	; 0x15da <TIMER_tmr1Start+0x92>
    155c:	81 15       	cp	r24, r1
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	92 07       	cpc	r25, r18
    1562:	29 f1       	breq	.+74     	; 0x15ae <TIMER_tmr1Start+0x66>
    1564:	81 15       	cp	r24, r1
    1566:	94 40       	sbci	r25, 0x04	; 4
    1568:	69 f1       	breq	.+90     	; 0x15c4 <TIMER_tmr1Start+0x7c>
    156a:	37 c0       	rjmp	.+110    	; 0x15da <TIMER_tmr1Start+0x92>
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    156c:	8e b5       	in	r24, 0x2e	; 46
    156e:	8d 7f       	andi	r24, 0xFD	; 253
    1570:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    1572:	8e b5       	in	r24, 0x2e	; 46
    1574:	8b 7f       	andi	r24, 0xFB	; 251
    1576:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1578:	8e b5       	in	r24, 0x2e	; 46
    157a:	81 60       	ori	r24, 0x01	; 1
    157c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    157e:	80 e0       	ldi	r24, 0x00	; 0
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    1580:	08 95       	ret
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1582:	8e b5       	in	r24, 0x2e	; 46
    1584:	8e 7f       	andi	r24, 0xFE	; 254
    1586:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    1588:	8e b5       	in	r24, 0x2e	; 46
    158a:	8b 7f       	andi	r24, 0xFB	; 251
    158c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    158e:	8e b5       	in	r24, 0x2e	; 46
    1590:	82 60       	ori	r24, 0x02	; 2
    1592:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1594:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		break;
    1596:	08 95       	ret
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    1598:	8e b5       	in	r24, 0x2e	; 46
    159a:	8b 7f       	andi	r24, 0xFB	; 251
    159c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    159e:	8e b5       	in	r24, 0x2e	; 46
    15a0:	82 60       	ori	r24, 0x02	; 2
    15a2:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15a4:	8e b5       	in	r24, 0x2e	; 46
    15a6:	81 60       	ori	r24, 0x01	; 1
    15a8:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15aa:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    15ac:	08 95       	ret
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15ae:	8e b5       	in	r24, 0x2e	; 46
    15b0:	8d 7f       	andi	r24, 0xFD	; 253
    15b2:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15b4:	8e b5       	in	r24, 0x2e	; 46
    15b6:	8e 7f       	andi	r24, 0xFE	; 254
    15b8:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15ba:	8e b5       	in	r24, 0x2e	; 46
    15bc:	84 60       	ori	r24, 0x04	; 4
    15be:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		break;
    15c2:	08 95       	ret
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15c4:	8e b5       	in	r24, 0x2e	; 46
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
    15c8:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15ca:	8e b5       	in	r24, 0x2e	; 46
    15cc:	84 60       	ori	r24, 0x04	; 4
    15ce:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15d0:	8e b5       	in	r24, 0x2e	; 46
    15d2:	81 60       	ori	r24, 0x01	; 1
    15d4:	8e bd       	out	0x2e, r24	; 46
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15d6:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    15d8:	08 95       	ret
	default:
		return TIMER_ERROR;
    15da:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    15dc:	08 95       	ret

000015de <TIMER_tmr1Stop>:

void TIMER_tmr1Stop(void)
{
 //Stop the timer by clearing the prescaler

	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    15de:	8e b5       	in	r24, 0x2e	; 46
    15e0:	8e 7f       	andi	r24, 0xFE	; 254
    15e2:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    15e4:	8e b5       	in	r24, 0x2e	; 46
    15e6:	8d 7f       	andi	r24, 0xFD	; 253
    15e8:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    15ea:	8e b5       	in	r24, 0x2e	; 46
    15ec:	8b 7f       	andi	r24, 0xFB	; 251
    15ee:	8e bd       	out	0x2e, r24	; 46
    15f0:	08 95       	ret

000015f2 <ICU_RisingEdgeCapture>:
 * @param[in] void.
 *
 * @return void.
 */
void ICU_RisingEdgeCapture(void)
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
	TIMER_tmr1NormalModeInit(ST_g_softwareICU->timer1_ISR);
    15f6:	c1 e7       	ldi	r28, 0x71	; 113
    15f8:	d0 e0       	ldi	r29, 0x00	; 0
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	0e 94 6f 0a 	call	0x14de	; 0x14de <TIMER_tmr1NormalModeInit>
	TIMER_tmr1Stop();
    1600:	0e 94 ef 0a 	call	0x15de	; 0x15de <TIMER_tmr1Stop>
	
	EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_firstSenseControl);
    1604:	69 81       	ldd	r22, Y+1	; 0x01
    1606:	88 81       	ld	r24, Y
    1608:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <EXI_enablePIE>
	ICU_g_edgeFlag = RISING;
    160c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ICU_g_edgeFlag>
	TIMER_tmr1Start(1);
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 a4 0a 	call	0x1548	; 0x1548 <TIMER_tmr1Start>
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <__vector_3>:
	
/**
 * ISR function implementation of INT2
 * */
ISR(EXT_INT_2)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    /* Save the current value of the timer/counter register  */
	TIMER_g_timer1RegValue = TMR_U16_TCNT1_REG;
    1640:	8c b5       	in	r24, 0x2c	; 44
    1642:	9d b5       	in	r25, 0x2d	; 45
    1644:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <TIMER_g_timer1RegValue+0x1>
    1648:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <TIMER_g_timer1RegValue>
	if(ICU_g_edgeFlag == RISING)
    164c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <ICU_g_edgeFlag>
    1650:	21 11       	cpse	r18, r1
    1652:	14 c0       	rjmp	.+40     	; 0x167c <__vector_3+0x5e>
	{
		ICU_g_ValueRising = TIMER_g_timer1RegValue;
    1654:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <ICU_g_ValueRising+0x1>
    1658:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <ICU_g_ValueRising>
		/* Clear Timer counter */
		TMR_U16_TCNT1_REG = 0;
    165c:	1d bc       	out	0x2d, r1	; 45
    165e:	1c bc       	out	0x2c, r1	; 44
		/* Set the external interrupt event at falling edge.*/
		EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_secondSenseControl );
    1660:	e1 e7       	ldi	r30, 0x71	; 113
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	62 81       	ldd	r22, Z+2	; 0x02
    1666:	80 81       	ld	r24, Z
    1668:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <EXI_enablePIE>
		/* Clear Timer overflow count */
		u32_g_timer1Overflow = 0;
    166c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <u32_g_timer1Overflow+0x1>
    1670:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <u32_g_timer1Overflow>
		ICU_g_edgeFlag = FALLING;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <ICU_g_edgeFlag>
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <__vector_3+0x84>
	}
	else
	{
		ICU_g_ValueFalling = TIMER_g_timer1RegValue;
    167c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <ICU_g_ValueFalling+0x1>
    1680:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ICU_g_ValueFalling>
		ICU_g_Count = TIMER_g_timer1RegValue + (65535 * u32_g_timer1Overflow);
    1684:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <u32_g_timer1Overflow>
    1688:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <u32_g_timer1Overflow+0x1>
    168c:	82 1b       	sub	r24, r18
    168e:	93 0b       	sbc	r25, r19
    1690:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <ICU_g_Count+0x1>
    1694:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ICU_g_Count>
		/* Stop timer1 */
		TIMER_tmr1Stop();
    1698:	0e 94 ef 0a 	call	0x15de	; 0x15de <TIMER_tmr1Stop>
		ICU_g_flag = 1;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ICU_g_flag>
	}

}	
    16a2:	ff 91       	pop	r31
    16a4:	ef 91       	pop	r30
    16a6:	bf 91       	pop	r27
    16a8:	af 91       	pop	r26
    16aa:	9f 91       	pop	r25
    16ac:	8f 91       	pop	r24
    16ae:	7f 91       	pop	r23
    16b0:	6f 91       	pop	r22
    16b2:	5f 91       	pop	r21
    16b4:	4f 91       	pop	r20
    16b6:	3f 91       	pop	r19
    16b8:	2f 91       	pop	r18
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <__vector_9>:
		
ISR(TIM1_OVF_INT)
{
    16c4:	1f 92       	push	r1
    16c6:	0f 92       	push	r0
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	0f 92       	push	r0
    16cc:	11 24       	eor	r1, r1
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
	u32_g_timer1Overflow++;
    16d2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u32_g_timer1Overflow>
    16d6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <u32_g_timer1Overflow+0x1>
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <u32_g_timer1Overflow+0x1>
    16e0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <u32_g_timer1Overflow>
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
    16f2:	8f b7       	in	r24, 0x3f	; 63
    16f4:	80 68       	ori	r24, 0x80	; 128
    16f6:	8f bf       	out	0x3f, r24	; 63
    16f8:	08 95       	ret

000016fa <TIMER0_PWM_ExecutedFunction>:
	u32_g_NumOfOVFs = u32_loc_totalTicks / 256 ;
	
	u8_loc_initValue = 256 - (u32_loc_totalTicks % 256);
	
	TCNT0 = u8_loc_initValue;
	u32_g_NumOfOVFs++;
    16fa:	cf 93       	push	r28
    16fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <u8_g_on_off_state>
    1700:	88 23       	and	r24, r24
    1702:	a1 f0       	breq	.+40     	; 0x172c <TIMER0_PWM_ExecutedFunction+0x32>
    1704:	c0 e0       	ldi	r28, 0x00	; 0
    1706:	2e c0       	rjmp	.+92     	; 0x1764 <TIMER0_PWM_ExecutedFunction+0x6a>
    1708:	ec 2f       	mov	r30, r28
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	cf 01       	movw	r24, r30
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	e8 0f       	add	r30, r24
    1718:	f9 1f       	adc	r31, r25
    171a:	e3 50       	subi	r30, 0x03	; 3
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	61 81       	ldd	r22, Z+1	; 0x01
    1722:	80 81       	ld	r24, Z
    1724:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
    1728:	cf 5f       	subi	r28, 0xFF	; 255
    172a:	01 c0       	rjmp	.+2      	; 0x172e <TIMER0_PWM_ExecutedFunction+0x34>
    172c:	c0 e0       	ldi	r28, 0x00	; 0
    172e:	c2 30       	cpi	r28, 0x02	; 2
    1730:	58 f3       	brcs	.-42     	; 0x1708 <TIMER0_PWM_ExecutedFunction+0xe>
    1732:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <u8_g_OffTime>
    1736:	81 95       	neg	r24
    1738:	82 bf       	out	0x32, r24	; 50
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <u8_g_on_off_state>
    1740:	19 c0       	rjmp	.+50     	; 0x1774 <TIMER0_PWM_ExecutedFunction+0x7a>
    1742:	ec 2f       	mov	r30, r28
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	cf 01       	movw	r24, r30
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	e8 0f       	add	r30, r24
    1752:	f9 1f       	adc	r31, r25
    1754:	e3 50       	subi	r30, 0x03	; 3
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	61 81       	ldd	r22, Z+1	; 0x01
    175c:	80 81       	ld	r24, Z
    175e:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_WritePin>
    1762:	cf 5f       	subi	r28, 0xFF	; 255
    1764:	c2 30       	cpi	r28, 0x02	; 2
    1766:	68 f3       	brcs	.-38     	; 0x1742 <TIMER0_PWM_ExecutedFunction+0x48>
    1768:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u8_g_OnTime>
    176c:	81 95       	neg	r24
    176e:	82 bf       	out	0x32, r24	; 50
    1770:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <u8_g_on_off_state>
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <TIMER0_init>:
    1778:	83 b7       	in	r24, 0x33	; 51
    177a:	87 7b       	andi	r24, 0xB7	; 183
    177c:	83 bf       	out	0x33, r24	; 51
    177e:	89 b7       	in	r24, 0x39	; 57
    1780:	81 60       	ori	r24, 0x01	; 1
    1782:	89 bf       	out	0x39, r24	; 57
    1784:	78 94       	sei
    1786:	08 95       	ret

00001788 <TIMER0_start>:
    1788:	83 b7       	in	r24, 0x33	; 51
    178a:	88 7f       	andi	r24, 0xF8	; 248
    178c:	85 60       	ori	r24, 0x05	; 5
    178e:	83 bf       	out	0x33, r24	; 51
    1790:	08 95       	ret

00001792 <TIMER0_stop>:
    1792:	83 b7       	in	r24, 0x33	; 51
    1794:	88 7f       	andi	r24, 0xF8	; 248
    1796:	83 bf       	out	0x33, r24	; 51
    1798:	08 95       	ret

0000179a <TIMER0_initPWM>:
	
}


void TIMER0_initPWM(void)
{
    179a:	cf 93       	push	r28
	Uchar8_t u8_Loc_counter = 0;
	TIMER0_init();
    179c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <TIMER0_init>
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17a0:	c0 e0       	ldi	r28, 0x00	; 0
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <TIMER0_initPWM+0x26>
	{
		//DIO_s8SETPinDir(st_pwm_configs[u8_Loc_counter].pwm_pin,OUTPUT);
		//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
		DIO_Initpin(&st_pwm_configs[u8_Loc_counter].pwm_pin);
    17a4:	8c 2f       	mov	r24, r28
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9c 01       	movw	r18, r24
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	82 0f       	add	r24, r18
    17b4:	93 1f       	adc	r25, r19
    17b6:	83 50       	subi	r24, 0x03	; 3
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_Initpin>

void TIMER0_initPWM(void)
{
	Uchar8_t u8_Loc_counter = 0;
	TIMER0_init();
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17be:	cf 5f       	subi	r28, 0xFF	; 255
    17c0:	c2 30       	cpi	r28, 0x02	; 2
    17c2:	80 f3       	brcs	.-32     	; 0x17a4 <TIMER0_initPWM+0xa>
		//DIO_s8SETPinDir(st_pwm_configs[u8_Loc_counter].pwm_pin,OUTPUT);
		//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
		DIO_Initpin(&st_pwm_configs[u8_Loc_counter].pwm_pin);
	}
	
}
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <TIMER0_setPwm>:
void TIMER0_setPwm(Uchar8_t u8_a_dutyCycle)
{
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
	
	u8_g_OnTime =  ((u8_a_dutyCycle * REG_SIZE)/100);
    17cc:	e8 2f       	mov	r30, r24
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	98 2f       	mov	r25, r24
    17d2:	c4 e6       	ldi	r28, 0x64	; 100
    17d4:	d0 e0       	ldi	r29, 0x00	; 0
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	be 01       	movw	r22, r28
    17da:	0e 94 22 10 	call	0x2044	; 0x2044 <__divmodhi4>
    17de:	26 2f       	mov	r18, r22
    17e0:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <u8_g_OnTime>
	u8_g_OffTime = (((100 -u8_a_dutyCycle) * REG_SIZE)/100);
    17e4:	ce 01       	movw	r24, r28
    17e6:	8e 1b       	sub	r24, r30
    17e8:	9f 0b       	sbc	r25, r31
    17ea:	98 2f       	mov	r25, r24
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	be 01       	movw	r22, r28
    17f0:	0e 94 22 10 	call	0x2044	; 0x2044 <__divmodhi4>
    17f4:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <u8_g_OffTime>
	TCNT0 = REG_SIZE - u8_g_OnTime ;
    17f8:	21 95       	neg	r18
    17fa:	22 bf       	out	0x32, r18	; 50
	TIMER0_start();
    17fc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIMER0_start>
	
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <__vector_11>:
	}
}


ISR(TIM0_OVF_INT)
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	2f 93       	push	r18
    1812:	3f 93       	push	r19
    1814:	4f 93       	push	r20
    1816:	5f 93       	push	r21
    1818:	6f 93       	push	r22
    181a:	7f 93       	push	r23
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	af 93       	push	r26
    1822:	bf 93       	push	r27
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31
	TIMER0_PWM_ExecutedFunction();
    1828:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <TIMER0_PWM_ExecutedFunction>
}
    182c:	ff 91       	pop	r31
    182e:	ef 91       	pop	r30
    1830:	bf 91       	pop	r27
    1832:	af 91       	pop	r26
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	7f 91       	pop	r23
    183a:	6f 91       	pop	r22
    183c:	5f 91       	pop	r21
    183e:	4f 91       	pop	r20
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <TIMER_TMR2NormalModeInit>:
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
        return TIMER_OK;
    } else {
        return TIMER_ERROR;
    }
}
    184e:	88 23       	and	r24, r24
    1850:	19 f0       	breq	.+6      	; 0x1858 <TIMER_TMR2NormalModeInit+0xa>
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	79 f0       	breq	.+30     	; 0x1874 <TIMER_TMR2NormalModeInit+0x26>
    1856:	16 c0       	rjmp	.+44     	; 0x1884 <TIMER_TMR2NormalModeInit+0x36>
    1858:	85 b5       	in	r24, 0x25	; 37
    185a:	8f 7b       	andi	r24, 0xBF	; 191
    185c:	85 bd       	out	0x25, r24	; 37
    185e:	85 b5       	in	r24, 0x25	; 37
    1860:	87 7f       	andi	r24, 0xF7	; 247
    1862:	85 bd       	out	0x25, r24	; 37
    1864:	8f b7       	in	r24, 0x3f	; 63
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	8f bf       	out	0x3f, r24	; 63
    186a:	89 b7       	in	r24, 0x39	; 57
    186c:	80 64       	ori	r24, 0x40	; 64
    186e:	89 bf       	out	0x39, r24	; 57
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	08 95       	ret
    1874:	85 b5       	in	r24, 0x25	; 37
    1876:	8f 7b       	andi	r24, 0xBF	; 191
    1878:	85 bd       	out	0x25, r24	; 37
    187a:	85 b5       	in	r24, 0x25	; 37
    187c:	87 7f       	andi	r24, 0xF7	; 247
    187e:	85 bd       	out	0x25, r24	; 37
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	08 95       	ret
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	08 95       	ret

00001888 <TIMER_TMR2Start>:
    1888:	80 34       	cpi	r24, 0x40	; 64
    188a:	91 05       	cpc	r25, r1
    188c:	c1 f1       	breq	.+112    	; 0x18fe <TIMER_TMR2Start+0x76>
    188e:	50 f4       	brcc	.+20     	; 0x18a4 <TIMER_TMR2Start+0x1c>
    1890:	88 30       	cpi	r24, 0x08	; 8
    1892:	91 05       	cpc	r25, r1
    1894:	01 f1       	breq	.+64     	; 0x18d6 <TIMER_TMR2Start+0x4e>
    1896:	80 32       	cpi	r24, 0x20	; 32
    1898:	91 05       	cpc	r25, r1
    189a:	41 f1       	breq	.+80     	; 0x18ec <TIMER_TMR2Start+0x64>
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	09 f0       	breq	.+2      	; 0x18a2 <TIMER_TMR2Start+0x1a>
    18a0:	58 c0       	rjmp	.+176    	; 0x1952 <TIMER_TMR2Start+0xca>
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <TIMER_TMR2Start+0x38>
    18a4:	81 15       	cp	r24, r1
    18a6:	21 e0       	ldi	r18, 0x01	; 1
    18a8:	92 07       	cpc	r25, r18
    18aa:	e9 f1       	breq	.+122    	; 0x1926 <TIMER_TMR2Start+0x9e>
    18ac:	81 15       	cp	r24, r1
    18ae:	24 e0       	ldi	r18, 0x04	; 4
    18b0:	92 07       	cpc	r25, r18
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <TIMER_TMR2Start+0x2e>
    18b4:	43 c0       	rjmp	.+134    	; 0x193c <TIMER_TMR2Start+0xb4>
    18b6:	80 38       	cpi	r24, 0x80	; 128
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f0       	breq	.+2      	; 0x18be <TIMER_TMR2Start+0x36>
    18bc:	4a c0       	rjmp	.+148    	; 0x1952 <TIMER_TMR2Start+0xca>
    18be:	28 c0       	rjmp	.+80     	; 0x1910 <TIMER_TMR2Start+0x88>
    18c0:	85 b5       	in	r24, 0x25	; 37
    18c2:	8d 7f       	andi	r24, 0xFD	; 253
    18c4:	85 bd       	out	0x25, r24	; 37
    18c6:	85 b5       	in	r24, 0x25	; 37
    18c8:	8b 7f       	andi	r24, 0xFB	; 251
    18ca:	85 bd       	out	0x25, r24	; 37
    18cc:	85 b5       	in	r24, 0x25	; 37
    18ce:	81 60       	ori	r24, 0x01	; 1
    18d0:	85 bd       	out	0x25, r24	; 37
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	08 95       	ret
    18d6:	85 b5       	in	r24, 0x25	; 37
    18d8:	8e 7f       	andi	r24, 0xFE	; 254
    18da:	85 bd       	out	0x25, r24	; 37
    18dc:	85 b5       	in	r24, 0x25	; 37
    18de:	8b 7f       	andi	r24, 0xFB	; 251
    18e0:	85 bd       	out	0x25, r24	; 37
    18e2:	85 b5       	in	r24, 0x25	; 37
    18e4:	82 60       	ori	r24, 0x02	; 2
    18e6:	85 bd       	out	0x25, r24	; 37
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	08 95       	ret
    18ec:	85 b5       	in	r24, 0x25	; 37
    18ee:	8b 7f       	andi	r24, 0xFB	; 251
    18f0:	85 bd       	out	0x25, r24	; 37
    18f2:	85 b5       	in	r24, 0x25	; 37
    18f4:	82 60       	ori	r24, 0x02	; 2
    18f6:	85 bd       	out	0x25, r24	; 37
    18f8:	85 b5       	in	r24, 0x25	; 37
    18fa:	81 60       	ori	r24, 0x01	; 1
    18fc:	85 bd       	out	0x25, r24	; 37
    18fe:	85 b5       	in	r24, 0x25	; 37
    1900:	84 60       	ori	r24, 0x04	; 4
    1902:	85 bd       	out	0x25, r24	; 37
    1904:	85 b5       	in	r24, 0x25	; 37
    1906:	8d 7f       	andi	r24, 0xFD	; 253
    1908:	85 bd       	out	0x25, r24	; 37
    190a:	85 b5       	in	r24, 0x25	; 37
    190c:	8e 7f       	andi	r24, 0xFE	; 254
    190e:	85 bd       	out	0x25, r24	; 37
    1910:	85 b5       	in	r24, 0x25	; 37
    1912:	8b 7f       	andi	r24, 0xFB	; 251
    1914:	85 bd       	out	0x25, r24	; 37
    1916:	85 b5       	in	r24, 0x25	; 37
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	85 bd       	out	0x25, r24	; 37
    191c:	85 b5       	in	r24, 0x25	; 37
    191e:	81 60       	ori	r24, 0x01	; 1
    1920:	85 bd       	out	0x25, r24	; 37
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	08 95       	ret
    1926:	85 b5       	in	r24, 0x25	; 37
    1928:	82 60       	ori	r24, 0x02	; 2
    192a:	85 bd       	out	0x25, r24	; 37
    192c:	85 b5       	in	r24, 0x25	; 37
    192e:	8e 7f       	andi	r24, 0xFE	; 254
    1930:	85 bd       	out	0x25, r24	; 37
    1932:	85 b5       	in	r24, 0x25	; 37
    1934:	84 60       	ori	r24, 0x04	; 4
    1936:	85 bd       	out	0x25, r24	; 37
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	08 95       	ret
    193c:	85 b5       	in	r24, 0x25	; 37
    193e:	82 60       	ori	r24, 0x02	; 2
    1940:	85 bd       	out	0x25, r24	; 37
    1942:	85 b5       	in	r24, 0x25	; 37
    1944:	84 60       	ori	r24, 0x04	; 4
    1946:	85 bd       	out	0x25, r24	; 37
    1948:	85 b5       	in	r24, 0x25	; 37
    194a:	81 60       	ori	r24, 0x01	; 1
    194c:	85 bd       	out	0x25, r24	; 37
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 95       	ret
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	08 95       	ret

00001956 <TMR_intDelay_ms>:
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	bc 01       	movw	r22, r24
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a e7       	ldi	r20, 0x7A	; 122
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divsf3>
    1974:	6b 01       	movw	r12, r22
    1976:	7c 01       	movw	r14, r24
    1978:	27 e3       	ldi	r18, 0x37	; 55
    197a:	37 e3       	ldi	r19, 0x37	; 55
    197c:	46 e8       	ldi	r20, 0x86	; 134
    197e:	56 e4       	ldi	r21, 0x46	; 70
    1980:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__gesf2>
    1984:	18 16       	cp	r1, r24
    1986:	0c f4       	brge	.+2      	; 0x198a <TMR_intDelay_ms+0x34>
    1988:	7c c0       	rjmp	.+248    	; 0x1a82 <TMR_intDelay_ms+0x12c>
    198a:	15 bc       	out	0x25, r1	; 37
    198c:	2d eb       	ldi	r18, 0xBD	; 189
    198e:	37 e3       	ldi	r19, 0x37	; 55
    1990:	46 e8       	ldi	r20, 0x86	; 134
    1992:	5e e3       	ldi	r21, 0x3E	; 62
    1994:	c7 01       	movw	r24, r14
    1996:	b6 01       	movw	r22, r12
    1998:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__cmpsf2>
    199c:	88 23       	and	r24, r24
    199e:	c4 f4       	brge	.+48     	; 0x19d0 <TMR_intDelay_ms+0x7a>
    19a0:	a7 01       	movw	r20, r14
    19a2:	96 01       	movw	r18, r12
    19a4:	6d eb       	ldi	r22, 0xBD	; 189
    19a6:	77 e3       	ldi	r23, 0x37	; 55
    19a8:	86 e8       	ldi	r24, 0x86	; 134
    19aa:	9e e3       	ldi	r25, 0x3E	; 62
    19ac:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__subsf3>
    19b0:	2d eb       	ldi	r18, 0xBD	; 189
    19b2:	37 e3       	ldi	r19, 0x37	; 55
    19b4:	46 e8       	ldi	r20, 0x86	; 134
    19b6:	5a e3       	ldi	r21, 0x3A	; 58
    19b8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divsf3>
    19bc:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
    19c0:	64 bd       	out	0x24, r22	; 36
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <u16_g_overflow2Numbers+0x1>
    19ca:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <u16_g_overflow2Numbers>
    19ce:	4f c0       	rjmp	.+158    	; 0x1a6e <TMR_intDelay_ms+0x118>
    19d0:	2d eb       	ldi	r18, 0xBD	; 189
    19d2:	37 e3       	ldi	r19, 0x37	; 55
    19d4:	46 e8       	ldi	r20, 0x86	; 134
    19d6:	5e e3       	ldi	r21, 0x3E	; 62
    19d8:	c7 01       	movw	r24, r14
    19da:	b6 01       	movw	r22, r12
    19dc:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__cmpsf2>
    19e0:	81 11       	cpse	r24, r1
    19e2:	08 c0       	rjmp	.+16     	; 0x19f4 <TMR_intDelay_ms+0x9e>
    19e4:	14 bc       	out	0x24, r1	; 36
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <u16_g_overflow2Numbers+0x1>
    19ee:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <u16_g_overflow2Numbers>
    19f2:	3d c0       	rjmp	.+122    	; 0x1a6e <TMR_intDelay_ms+0x118>
    19f4:	2d eb       	ldi	r18, 0xBD	; 189
    19f6:	37 e3       	ldi	r19, 0x37	; 55
    19f8:	46 e8       	ldi	r20, 0x86	; 134
    19fa:	5e e3       	ldi	r21, 0x3E	; 62
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divsf3>
    1a04:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <ceil>
    1a08:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
    1a0c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <u16_g_overflow2Numbers+0x1>
    1a10:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <u16_g_overflow2Numbers>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__subsf3>
    1a28:	2d eb       	ldi	r18, 0xBD	; 189
    1a2a:	37 e3       	ldi	r19, 0x37	; 55
    1a2c:	46 e8       	ldi	r20, 0x86	; 134
    1a2e:	5e e3       	ldi	r21, 0x3E	; 62
    1a30:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__mulsf3>
    1a34:	9b 01       	movw	r18, r22
    1a36:	ac 01       	movw	r20, r24
    1a38:	c7 01       	movw	r24, r14
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__subsf3>
    1a40:	2d eb       	ldi	r18, 0xBD	; 189
    1a42:	37 e3       	ldi	r19, 0x37	; 55
    1a44:	46 e8       	ldi	r20, 0x86	; 134
    1a46:	5a e3       	ldi	r21, 0x3A	; 58
    1a48:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divsf3>
    1a4c:	9b 01       	movw	r18, r22
    1a4e:	ac 01       	movw	r20, r24
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	80 e8       	ldi	r24, 0x80	; 128
    1a56:	93 e4       	ldi	r25, 0x43	; 67
    1a58:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__subsf3>
    1a5c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
    1a60:	64 bd       	out	0x24, r22	; 36
    1a62:	84 b5       	in	r24, 0x24	; 36
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <u16_g_tcnt2InitialVal+0x1>
    1a6a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <u16_g_tcnt2InitialVal>
    1a6e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <u16_g_overflow2Ticks+0x1>
    1a72:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <u16_g_overflow2Ticks>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	94 e0       	ldi	r25, 0x04	; 4
    1a7a:	0e 94 44 0c 	call	0x1888	; 0x1888 <TIMER_TMR2Start>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <TMR_intDelay_ms+0x12e>
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	df 90       	pop	r13
    1a8a:	cf 90       	pop	r12
    1a8c:	08 95       	ret

00001a8e <TMR_TMR2Stop>:
    1a8e:	85 b5       	in	r24, 0x25	; 37
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	85 bd       	out	0x25, r24	; 37
    1a94:	85 b5       	in	r24, 0x25	; 37
    1a96:	8d 7f       	andi	r24, 0xFD	; 253
    1a98:	85 bd       	out	0x25, r24	; 37
    1a9a:	85 b5       	in	r24, 0x25	; 37
    1a9c:	8b 7f       	andi	r24, 0xFB	; 251
    1a9e:	85 bd       	out	0x25, r24	; 37
    1aa0:	08 95       	ret

00001aa2 <__vector_5>:
 */
//__attribute__((optimize("O0")))
//ISR(TMR_ovfVect)

ISR(TIM2_OVF_INT)
{
    1aa2:	1f 92       	push	r1
    1aa4:	0f 92       	push	r0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	0f 92       	push	r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
	u16_g_overflow2Ticks++;
    1ac4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <u16_g_overflow2Ticks>
    1ac8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <u16_g_overflow2Ticks+0x1>
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <u16_g_overflow2Ticks+0x1>
    1ad2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <u16_g_overflow2Ticks>
	//TMR_U8_TCNT2_REG = u16_g_tcnt2InitialVal;
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers )
    1ad6:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <u16_g_overflow2Numbers>
    1ada:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <u16_g_overflow2Numbers+0x1>
    1ade:	82 17       	cp	r24, r18
    1ae0:	93 07       	cpc	r25, r19
    1ae2:	48 f0       	brcs	.+18     	; 0x1af6 <__vector_5+0x54>
	{
		u16_g_overflow2Ticks = 0;
    1ae4:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <u16_g_overflow2Ticks+0x1>
    1ae8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <u16_g_overflow2Ticks>
		u8_g_timeOut = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <u8_g_timeOut>
		TMR_TMR2Stop();
    1af2:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <TMR_TMR2Stop>
	}
}
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <__subsf3>:
    1b18:	50 58       	subi	r21, 0x80	; 128

00001b1a <__addsf3>:
    1b1a:	bb 27       	eor	r27, r27
    1b1c:	aa 27       	eor	r26, r26
    1b1e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__addsf3x>
    1b22:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__fp_round>
    1b26:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__fp_pscA>
    1b2a:	38 f0       	brcs	.+14     	; 0x1b3a <__addsf3+0x20>
    1b2c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fp_pscB>
    1b30:	20 f0       	brcs	.+8      	; 0x1b3a <__addsf3+0x20>
    1b32:	39 f4       	brne	.+14     	; 0x1b42 <__addsf3+0x28>
    1b34:	9f 3f       	cpi	r25, 0xFF	; 255
    1b36:	19 f4       	brne	.+6      	; 0x1b3e <__addsf3+0x24>
    1b38:	26 f4       	brtc	.+8      	; 0x1b42 <__addsf3+0x28>
    1b3a:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_nan>
    1b3e:	0e f4       	brtc	.+2      	; 0x1b42 <__addsf3+0x28>
    1b40:	e0 95       	com	r30
    1b42:	e7 fb       	bst	r30, 7
    1b44:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>

00001b48 <__addsf3x>:
    1b48:	e9 2f       	mov	r30, r25
    1b4a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fp_split3>
    1b4e:	58 f3       	brcs	.-42     	; 0x1b26 <__addsf3+0xc>
    1b50:	ba 17       	cp	r27, r26
    1b52:	62 07       	cpc	r22, r18
    1b54:	73 07       	cpc	r23, r19
    1b56:	84 07       	cpc	r24, r20
    1b58:	95 07       	cpc	r25, r21
    1b5a:	20 f0       	brcs	.+8      	; 0x1b64 <__addsf3x+0x1c>
    1b5c:	79 f4       	brne	.+30     	; 0x1b7c <__addsf3x+0x34>
    1b5e:	a6 f5       	brtc	.+104    	; 0x1bc8 <__addsf3x+0x80>
    1b60:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__fp_zero>
    1b64:	0e f4       	brtc	.+2      	; 0x1b68 <__addsf3x+0x20>
    1b66:	e0 95       	com	r30
    1b68:	0b 2e       	mov	r0, r27
    1b6a:	ba 2f       	mov	r27, r26
    1b6c:	a0 2d       	mov	r26, r0
    1b6e:	0b 01       	movw	r0, r22
    1b70:	b9 01       	movw	r22, r18
    1b72:	90 01       	movw	r18, r0
    1b74:	0c 01       	movw	r0, r24
    1b76:	ca 01       	movw	r24, r20
    1b78:	a0 01       	movw	r20, r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	ff 27       	eor	r31, r31
    1b7e:	59 1b       	sub	r21, r25
    1b80:	99 f0       	breq	.+38     	; 0x1ba8 <__addsf3x+0x60>
    1b82:	59 3f       	cpi	r21, 0xF9	; 249
    1b84:	50 f4       	brcc	.+20     	; 0x1b9a <__addsf3x+0x52>
    1b86:	50 3e       	cpi	r21, 0xE0	; 224
    1b88:	68 f1       	brcs	.+90     	; 0x1be4 <__addsf3x+0x9c>
    1b8a:	1a 16       	cp	r1, r26
    1b8c:	f0 40       	sbci	r31, 0x00	; 0
    1b8e:	a2 2f       	mov	r26, r18
    1b90:	23 2f       	mov	r18, r19
    1b92:	34 2f       	mov	r19, r20
    1b94:	44 27       	eor	r20, r20
    1b96:	58 5f       	subi	r21, 0xF8	; 248
    1b98:	f3 cf       	rjmp	.-26     	; 0x1b80 <__addsf3x+0x38>
    1b9a:	46 95       	lsr	r20
    1b9c:	37 95       	ror	r19
    1b9e:	27 95       	ror	r18
    1ba0:	a7 95       	ror	r26
    1ba2:	f0 40       	sbci	r31, 0x00	; 0
    1ba4:	53 95       	inc	r21
    1ba6:	c9 f7       	brne	.-14     	; 0x1b9a <__addsf3x+0x52>
    1ba8:	7e f4       	brtc	.+30     	; 0x1bc8 <__addsf3x+0x80>
    1baa:	1f 16       	cp	r1, r31
    1bac:	ba 0b       	sbc	r27, r26
    1bae:	62 0b       	sbc	r22, r18
    1bb0:	73 0b       	sbc	r23, r19
    1bb2:	84 0b       	sbc	r24, r20
    1bb4:	ba f0       	brmi	.+46     	; 0x1be4 <__addsf3x+0x9c>
    1bb6:	91 50       	subi	r25, 0x01	; 1
    1bb8:	a1 f0       	breq	.+40     	; 0x1be2 <__addsf3x+0x9a>
    1bba:	ff 0f       	add	r31, r31
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	66 1f       	adc	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	88 1f       	adc	r24, r24
    1bc4:	c2 f7       	brpl	.-16     	; 0x1bb6 <__addsf3x+0x6e>
    1bc6:	0e c0       	rjmp	.+28     	; 0x1be4 <__addsf3x+0x9c>
    1bc8:	ba 0f       	add	r27, r26
    1bca:	62 1f       	adc	r22, r18
    1bcc:	73 1f       	adc	r23, r19
    1bce:	84 1f       	adc	r24, r20
    1bd0:	48 f4       	brcc	.+18     	; 0x1be4 <__addsf3x+0x9c>
    1bd2:	87 95       	ror	r24
    1bd4:	77 95       	ror	r23
    1bd6:	67 95       	ror	r22
    1bd8:	b7 95       	ror	r27
    1bda:	f7 95       	ror	r31
    1bdc:	9e 3f       	cpi	r25, 0xFE	; 254
    1bde:	08 f0       	brcs	.+2      	; 0x1be2 <__addsf3x+0x9a>
    1be0:	b0 cf       	rjmp	.-160    	; 0x1b42 <__addsf3+0x28>
    1be2:	93 95       	inc	r25
    1be4:	88 0f       	add	r24, r24
    1be6:	08 f0       	brcs	.+2      	; 0x1bea <__addsf3x+0xa2>
    1be8:	99 27       	eor	r25, r25
    1bea:	ee 0f       	add	r30, r30
    1bec:	97 95       	ror	r25
    1bee:	87 95       	ror	r24
    1bf0:	08 95       	ret

00001bf2 <ceil>:
    1bf2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fp_trunc>
    1bf6:	90 f0       	brcs	.+36     	; 0x1c1c <ceil+0x2a>
    1bf8:	9f 37       	cpi	r25, 0x7F	; 127
    1bfa:	48 f4       	brcc	.+18     	; 0x1c0e <ceil+0x1c>
    1bfc:	91 11       	cpse	r25, r1
    1bfe:	16 f4       	brtc	.+4      	; 0x1c04 <ceil+0x12>
    1c00:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_szero>
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	80 e8       	ldi	r24, 0x80	; 128
    1c0a:	9f e3       	ldi	r25, 0x3F	; 63
    1c0c:	08 95       	ret
    1c0e:	26 f0       	brts	.+8      	; 0x1c18 <ceil+0x26>
    1c10:	1b 16       	cp	r1, r27
    1c12:	61 1d       	adc	r22, r1
    1c14:	71 1d       	adc	r23, r1
    1c16:	81 1d       	adc	r24, r1
    1c18:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__fp_mintl>
    1c1c:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__fp_mpack>

00001c20 <__cmpsf2>:
    1c20:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_cmp>
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <__cmpsf2+0x8>
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	08 95       	ret

00001c2a <__divsf3>:
    1c2a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__divsf3x>
    1c2e:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__fp_round>
    1c32:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fp_pscB>
    1c36:	58 f0       	brcs	.+22     	; 0x1c4e <__divsf3+0x24>
    1c38:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__fp_pscA>
    1c3c:	40 f0       	brcs	.+16     	; 0x1c4e <__divsf3+0x24>
    1c3e:	29 f4       	brne	.+10     	; 0x1c4a <__divsf3+0x20>
    1c40:	5f 3f       	cpi	r21, 0xFF	; 255
    1c42:	29 f0       	breq	.+10     	; 0x1c4e <__divsf3+0x24>
    1c44:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1c48:	51 11       	cpse	r21, r1
    1c4a:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_szero>
    1c4e:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_nan>

00001c52 <__divsf3x>:
    1c52:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fp_split3>
    1c56:	68 f3       	brcs	.-38     	; 0x1c32 <__divsf3+0x8>

00001c58 <__divsf3_pse>:
    1c58:	99 23       	and	r25, r25
    1c5a:	b1 f3       	breq	.-20     	; 0x1c48 <__divsf3+0x1e>
    1c5c:	55 23       	and	r21, r21
    1c5e:	91 f3       	breq	.-28     	; 0x1c44 <__divsf3+0x1a>
    1c60:	95 1b       	sub	r25, r21
    1c62:	55 0b       	sbc	r21, r21
    1c64:	bb 27       	eor	r27, r27
    1c66:	aa 27       	eor	r26, r26
    1c68:	62 17       	cp	r22, r18
    1c6a:	73 07       	cpc	r23, r19
    1c6c:	84 07       	cpc	r24, r20
    1c6e:	38 f0       	brcs	.+14     	; 0x1c7e <__divsf3_pse+0x26>
    1c70:	9f 5f       	subi	r25, 0xFF	; 255
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	22 0f       	add	r18, r18
    1c76:	33 1f       	adc	r19, r19
    1c78:	44 1f       	adc	r20, r20
    1c7a:	aa 1f       	adc	r26, r26
    1c7c:	a9 f3       	breq	.-22     	; 0x1c68 <__divsf3_pse+0x10>
    1c7e:	35 d0       	rcall	.+106    	; 0x1cea <__divsf3_pse+0x92>
    1c80:	0e 2e       	mov	r0, r30
    1c82:	3a f0       	brmi	.+14     	; 0x1c92 <__divsf3_pse+0x3a>
    1c84:	e0 e8       	ldi	r30, 0x80	; 128
    1c86:	32 d0       	rcall	.+100    	; 0x1cec <__divsf3_pse+0x94>
    1c88:	91 50       	subi	r25, 0x01	; 1
    1c8a:	50 40       	sbci	r21, 0x00	; 0
    1c8c:	e6 95       	lsr	r30
    1c8e:	00 1c       	adc	r0, r0
    1c90:	ca f7       	brpl	.-14     	; 0x1c84 <__divsf3_pse+0x2c>
    1c92:	2b d0       	rcall	.+86     	; 0x1cea <__divsf3_pse+0x92>
    1c94:	fe 2f       	mov	r31, r30
    1c96:	29 d0       	rcall	.+82     	; 0x1cea <__divsf3_pse+0x92>
    1c98:	66 0f       	add	r22, r22
    1c9a:	77 1f       	adc	r23, r23
    1c9c:	88 1f       	adc	r24, r24
    1c9e:	bb 1f       	adc	r27, r27
    1ca0:	26 17       	cp	r18, r22
    1ca2:	37 07       	cpc	r19, r23
    1ca4:	48 07       	cpc	r20, r24
    1ca6:	ab 07       	cpc	r26, r27
    1ca8:	b0 e8       	ldi	r27, 0x80	; 128
    1caa:	09 f0       	breq	.+2      	; 0x1cae <__divsf3_pse+0x56>
    1cac:	bb 0b       	sbc	r27, r27
    1cae:	80 2d       	mov	r24, r0
    1cb0:	bf 01       	movw	r22, r30
    1cb2:	ff 27       	eor	r31, r31
    1cb4:	93 58       	subi	r25, 0x83	; 131
    1cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb8:	3a f0       	brmi	.+14     	; 0x1cc8 <__divsf3_pse+0x70>
    1cba:	9e 3f       	cpi	r25, 0xFE	; 254
    1cbc:	51 05       	cpc	r21, r1
    1cbe:	78 f0       	brcs	.+30     	; 0x1cde <__divsf3_pse+0x86>
    1cc0:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1cc4:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_szero>
    1cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cca:	e4 f3       	brlt	.-8      	; 0x1cc4 <__divsf3_pse+0x6c>
    1ccc:	98 3e       	cpi	r25, 0xE8	; 232
    1cce:	d4 f3       	brlt	.-12     	; 0x1cc4 <__divsf3_pse+0x6c>
    1cd0:	86 95       	lsr	r24
    1cd2:	77 95       	ror	r23
    1cd4:	67 95       	ror	r22
    1cd6:	b7 95       	ror	r27
    1cd8:	f7 95       	ror	r31
    1cda:	9f 5f       	subi	r25, 0xFF	; 255
    1cdc:	c9 f7       	brne	.-14     	; 0x1cd0 <__divsf3_pse+0x78>
    1cde:	88 0f       	add	r24, r24
    1ce0:	91 1d       	adc	r25, r1
    1ce2:	96 95       	lsr	r25
    1ce4:	87 95       	ror	r24
    1ce6:	97 f9       	bld	r25, 7
    1ce8:	08 95       	ret
    1cea:	e1 e0       	ldi	r30, 0x01	; 1
    1cec:	66 0f       	add	r22, r22
    1cee:	77 1f       	adc	r23, r23
    1cf0:	88 1f       	adc	r24, r24
    1cf2:	bb 1f       	adc	r27, r27
    1cf4:	62 17       	cp	r22, r18
    1cf6:	73 07       	cpc	r23, r19
    1cf8:	84 07       	cpc	r24, r20
    1cfa:	ba 07       	cpc	r27, r26
    1cfc:	20 f0       	brcs	.+8      	; 0x1d06 <__divsf3_pse+0xae>
    1cfe:	62 1b       	sub	r22, r18
    1d00:	73 0b       	sbc	r23, r19
    1d02:	84 0b       	sbc	r24, r20
    1d04:	ba 0b       	sbc	r27, r26
    1d06:	ee 1f       	adc	r30, r30
    1d08:	88 f7       	brcc	.-30     	; 0x1cec <__divsf3_pse+0x94>
    1d0a:	e0 95       	com	r30
    1d0c:	08 95       	ret

00001d0e <__fixsfsi>:
    1d0e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
    1d12:	68 94       	set
    1d14:	b1 11       	cpse	r27, r1
    1d16:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_szero>
    1d1a:	08 95       	ret

00001d1c <__fixunssfsi>:
    1d1c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fp_splitA>
    1d20:	88 f0       	brcs	.+34     	; 0x1d44 <__fixunssfsi+0x28>
    1d22:	9f 57       	subi	r25, 0x7F	; 127
    1d24:	98 f0       	brcs	.+38     	; 0x1d4c <__fixunssfsi+0x30>
    1d26:	b9 2f       	mov	r27, r25
    1d28:	99 27       	eor	r25, r25
    1d2a:	b7 51       	subi	r27, 0x17	; 23
    1d2c:	b0 f0       	brcs	.+44     	; 0x1d5a <__fixunssfsi+0x3e>
    1d2e:	e1 f0       	breq	.+56     	; 0x1d68 <__fixunssfsi+0x4c>
    1d30:	66 0f       	add	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	1a f0       	brmi	.+6      	; 0x1d40 <__fixunssfsi+0x24>
    1d3a:	ba 95       	dec	r27
    1d3c:	c9 f7       	brne	.-14     	; 0x1d30 <__fixunssfsi+0x14>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <__fixunssfsi+0x4c>
    1d40:	b1 30       	cpi	r27, 0x01	; 1
    1d42:	91 f0       	breq	.+36     	; 0x1d68 <__fixunssfsi+0x4c>
    1d44:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__fp_zero>
    1d48:	b1 e0       	ldi	r27, 0x01	; 1
    1d4a:	08 95       	ret
    1d4c:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__fp_zero>
    1d50:	67 2f       	mov	r22, r23
    1d52:	78 2f       	mov	r23, r24
    1d54:	88 27       	eor	r24, r24
    1d56:	b8 5f       	subi	r27, 0xF8	; 248
    1d58:	39 f0       	breq	.+14     	; 0x1d68 <__fixunssfsi+0x4c>
    1d5a:	b9 3f       	cpi	r27, 0xF9	; 249
    1d5c:	cc f3       	brlt	.-14     	; 0x1d50 <__fixunssfsi+0x34>
    1d5e:	86 95       	lsr	r24
    1d60:	77 95       	ror	r23
    1d62:	67 95       	ror	r22
    1d64:	b3 95       	inc	r27
    1d66:	d9 f7       	brne	.-10     	; 0x1d5e <__fixunssfsi+0x42>
    1d68:	3e f4       	brtc	.+14     	; 0x1d78 <__fixunssfsi+0x5c>
    1d6a:	90 95       	com	r25
    1d6c:	80 95       	com	r24
    1d6e:	70 95       	com	r23
    1d70:	61 95       	neg	r22
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	08 95       	ret

00001d7a <__floatunsisf>:
    1d7a:	e8 94       	clt
    1d7c:	09 c0       	rjmp	.+18     	; 0x1d90 <__floatsisf+0x12>

00001d7e <__floatsisf>:
    1d7e:	97 fb       	bst	r25, 7
    1d80:	3e f4       	brtc	.+14     	; 0x1d90 <__floatsisf+0x12>
    1d82:	90 95       	com	r25
    1d84:	80 95       	com	r24
    1d86:	70 95       	com	r23
    1d88:	61 95       	neg	r22
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	99 23       	and	r25, r25
    1d92:	a9 f0       	breq	.+42     	; 0x1dbe <__floatsisf+0x40>
    1d94:	f9 2f       	mov	r31, r25
    1d96:	96 e9       	ldi	r25, 0x96	; 150
    1d98:	bb 27       	eor	r27, r27
    1d9a:	93 95       	inc	r25
    1d9c:	f6 95       	lsr	r31
    1d9e:	87 95       	ror	r24
    1da0:	77 95       	ror	r23
    1da2:	67 95       	ror	r22
    1da4:	b7 95       	ror	r27
    1da6:	f1 11       	cpse	r31, r1
    1da8:	f8 cf       	rjmp	.-16     	; 0x1d9a <__floatsisf+0x1c>
    1daa:	fa f4       	brpl	.+62     	; 0x1dea <__floatsisf+0x6c>
    1dac:	bb 0f       	add	r27, r27
    1dae:	11 f4       	brne	.+4      	; 0x1db4 <__floatsisf+0x36>
    1db0:	60 ff       	sbrs	r22, 0
    1db2:	1b c0       	rjmp	.+54     	; 0x1dea <__floatsisf+0x6c>
    1db4:	6f 5f       	subi	r22, 0xFF	; 255
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	16 c0       	rjmp	.+44     	; 0x1dea <__floatsisf+0x6c>
    1dbe:	88 23       	and	r24, r24
    1dc0:	11 f0       	breq	.+4      	; 0x1dc6 <__floatsisf+0x48>
    1dc2:	96 e9       	ldi	r25, 0x96	; 150
    1dc4:	11 c0       	rjmp	.+34     	; 0x1de8 <__floatsisf+0x6a>
    1dc6:	77 23       	and	r23, r23
    1dc8:	21 f0       	breq	.+8      	; 0x1dd2 <__floatsisf+0x54>
    1dca:	9e e8       	ldi	r25, 0x8E	; 142
    1dcc:	87 2f       	mov	r24, r23
    1dce:	76 2f       	mov	r23, r22
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <__floatsisf+0x5e>
    1dd2:	66 23       	and	r22, r22
    1dd4:	71 f0       	breq	.+28     	; 0x1df2 <__floatsisf+0x74>
    1dd6:	96 e8       	ldi	r25, 0x86	; 134
    1dd8:	86 2f       	mov	r24, r22
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	2a f0       	brmi	.+10     	; 0x1dea <__floatsisf+0x6c>
    1de0:	9a 95       	dec	r25
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	88 1f       	adc	r24, r24
    1de8:	da f7       	brpl	.-10     	; 0x1de0 <__floatsisf+0x62>
    1dea:	88 0f       	add	r24, r24
    1dec:	96 95       	lsr	r25
    1dee:	87 95       	ror	r24
    1df0:	97 f9       	bld	r25, 7
    1df2:	08 95       	ret

00001df4 <__fp_cmp>:
    1df4:	99 0f       	add	r25, r25
    1df6:	00 08       	sbc	r0, r0
    1df8:	55 0f       	add	r21, r21
    1dfa:	aa 0b       	sbc	r26, r26
    1dfc:	e0 e8       	ldi	r30, 0x80	; 128
    1dfe:	fe ef       	ldi	r31, 0xFE	; 254
    1e00:	16 16       	cp	r1, r22
    1e02:	17 06       	cpc	r1, r23
    1e04:	e8 07       	cpc	r30, r24
    1e06:	f9 07       	cpc	r31, r25
    1e08:	c0 f0       	brcs	.+48     	; 0x1e3a <__fp_cmp+0x46>
    1e0a:	12 16       	cp	r1, r18
    1e0c:	13 06       	cpc	r1, r19
    1e0e:	e4 07       	cpc	r30, r20
    1e10:	f5 07       	cpc	r31, r21
    1e12:	98 f0       	brcs	.+38     	; 0x1e3a <__fp_cmp+0x46>
    1e14:	62 1b       	sub	r22, r18
    1e16:	73 0b       	sbc	r23, r19
    1e18:	84 0b       	sbc	r24, r20
    1e1a:	95 0b       	sbc	r25, r21
    1e1c:	39 f4       	brne	.+14     	; 0x1e2c <__fp_cmp+0x38>
    1e1e:	0a 26       	eor	r0, r26
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <__fp_cmp+0x46>
    1e22:	23 2b       	or	r18, r19
    1e24:	24 2b       	or	r18, r20
    1e26:	25 2b       	or	r18, r21
    1e28:	21 f4       	brne	.+8      	; 0x1e32 <__fp_cmp+0x3e>
    1e2a:	08 95       	ret
    1e2c:	0a 26       	eor	r0, r26
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <__fp_cmp+0x3e>
    1e30:	a1 40       	sbci	r26, 0x01	; 1
    1e32:	a6 95       	lsr	r26
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	81 1d       	adc	r24, r1
    1e38:	81 1d       	adc	r24, r1
    1e3a:	08 95       	ret

00001e3c <__fp_inf>:
    1e3c:	97 f9       	bld	r25, 7
    1e3e:	9f 67       	ori	r25, 0x7F	; 127
    1e40:	80 e8       	ldi	r24, 0x80	; 128
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	08 95       	ret

00001e48 <__fp_mintl>:
    1e48:	88 23       	and	r24, r24
    1e4a:	71 f4       	brne	.+28     	; 0x1e68 <__fp_mintl+0x20>
    1e4c:	77 23       	and	r23, r23
    1e4e:	21 f0       	breq	.+8      	; 0x1e58 <__fp_mintl+0x10>
    1e50:	98 50       	subi	r25, 0x08	; 8
    1e52:	87 2b       	or	r24, r23
    1e54:	76 2f       	mov	r23, r22
    1e56:	07 c0       	rjmp	.+14     	; 0x1e66 <__fp_mintl+0x1e>
    1e58:	66 23       	and	r22, r22
    1e5a:	11 f4       	brne	.+4      	; 0x1e60 <__fp_mintl+0x18>
    1e5c:	99 27       	eor	r25, r25
    1e5e:	0d c0       	rjmp	.+26     	; 0x1e7a <__fp_mintl+0x32>
    1e60:	90 51       	subi	r25, 0x10	; 16
    1e62:	86 2b       	or	r24, r22
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	2a f0       	brmi	.+10     	; 0x1e74 <__fp_mintl+0x2c>
    1e6a:	9a 95       	dec	r25
    1e6c:	66 0f       	add	r22, r22
    1e6e:	77 1f       	adc	r23, r23
    1e70:	88 1f       	adc	r24, r24
    1e72:	da f7       	brpl	.-10     	; 0x1e6a <__fp_mintl+0x22>
    1e74:	88 0f       	add	r24, r24
    1e76:	96 95       	lsr	r25
    1e78:	87 95       	ror	r24
    1e7a:	97 f9       	bld	r25, 7
    1e7c:	08 95       	ret

00001e7e <__fp_mpack>:
    1e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e80:	31 f0       	breq	.+12     	; 0x1e8e <__fp_mpack_finite+0xc>

00001e82 <__fp_mpack_finite>:
    1e82:	91 50       	subi	r25, 0x01	; 1
    1e84:	20 f4       	brcc	.+8      	; 0x1e8e <__fp_mpack_finite+0xc>
    1e86:	87 95       	ror	r24
    1e88:	77 95       	ror	r23
    1e8a:	67 95       	ror	r22
    1e8c:	b7 95       	ror	r27
    1e8e:	88 0f       	add	r24, r24
    1e90:	91 1d       	adc	r25, r1
    1e92:	96 95       	lsr	r25
    1e94:	87 95       	ror	r24
    1e96:	97 f9       	bld	r25, 7
    1e98:	08 95       	ret

00001e9a <__fp_nan>:
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	80 ec       	ldi	r24, 0xC0	; 192
    1e9e:	08 95       	ret

00001ea0 <__fp_pscA>:
    1ea0:	00 24       	eor	r0, r0
    1ea2:	0a 94       	dec	r0
    1ea4:	16 16       	cp	r1, r22
    1ea6:	17 06       	cpc	r1, r23
    1ea8:	18 06       	cpc	r1, r24
    1eaa:	09 06       	cpc	r0, r25
    1eac:	08 95       	ret

00001eae <__fp_pscB>:
    1eae:	00 24       	eor	r0, r0
    1eb0:	0a 94       	dec	r0
    1eb2:	12 16       	cp	r1, r18
    1eb4:	13 06       	cpc	r1, r19
    1eb6:	14 06       	cpc	r1, r20
    1eb8:	05 06       	cpc	r0, r21
    1eba:	08 95       	ret

00001ebc <__fp_round>:
    1ebc:	09 2e       	mov	r0, r25
    1ebe:	03 94       	inc	r0
    1ec0:	00 0c       	add	r0, r0
    1ec2:	11 f4       	brne	.+4      	; 0x1ec8 <__fp_round+0xc>
    1ec4:	88 23       	and	r24, r24
    1ec6:	52 f0       	brmi	.+20     	; 0x1edc <__fp_round+0x20>
    1ec8:	bb 0f       	add	r27, r27
    1eca:	40 f4       	brcc	.+16     	; 0x1edc <__fp_round+0x20>
    1ecc:	bf 2b       	or	r27, r31
    1ece:	11 f4       	brne	.+4      	; 0x1ed4 <__fp_round+0x18>
    1ed0:	60 ff       	sbrs	r22, 0
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <__fp_round+0x20>
    1ed4:	6f 5f       	subi	r22, 0xFF	; 255
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	08 95       	ret

00001ede <__fp_split3>:
    1ede:	57 fd       	sbrc	r21, 7
    1ee0:	90 58       	subi	r25, 0x80	; 128
    1ee2:	44 0f       	add	r20, r20
    1ee4:	55 1f       	adc	r21, r21
    1ee6:	59 f0       	breq	.+22     	; 0x1efe <__fp_splitA+0x10>
    1ee8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eea:	71 f0       	breq	.+28     	; 0x1f08 <__fp_splitA+0x1a>
    1eec:	47 95       	ror	r20

00001eee <__fp_splitA>:
    1eee:	88 0f       	add	r24, r24
    1ef0:	97 fb       	bst	r25, 7
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <__fp_splitA+0x20>
    1ef6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef8:	79 f0       	breq	.+30     	; 0x1f18 <__fp_splitA+0x2a>
    1efa:	87 95       	ror	r24
    1efc:	08 95       	ret
    1efe:	12 16       	cp	r1, r18
    1f00:	13 06       	cpc	r1, r19
    1f02:	14 06       	cpc	r1, r20
    1f04:	55 1f       	adc	r21, r21
    1f06:	f2 cf       	rjmp	.-28     	; 0x1eec <__fp_split3+0xe>
    1f08:	46 95       	lsr	r20
    1f0a:	f1 df       	rcall	.-30     	; 0x1eee <__fp_splitA>
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <__fp_splitA+0x30>
    1f0e:	16 16       	cp	r1, r22
    1f10:	17 06       	cpc	r1, r23
    1f12:	18 06       	cpc	r1, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	f1 cf       	rjmp	.-30     	; 0x1efa <__fp_splitA+0xc>
    1f18:	86 95       	lsr	r24
    1f1a:	71 05       	cpc	r23, r1
    1f1c:	61 05       	cpc	r22, r1
    1f1e:	08 94       	sec
    1f20:	08 95       	ret

00001f22 <__fp_trunc>:
    1f22:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fp_splitA>
    1f26:	a0 f0       	brcs	.+40     	; 0x1f50 <__fp_trunc+0x2e>
    1f28:	be e7       	ldi	r27, 0x7E	; 126
    1f2a:	b9 17       	cp	r27, r25
    1f2c:	88 f4       	brcc	.+34     	; 0x1f50 <__fp_trunc+0x2e>
    1f2e:	bb 27       	eor	r27, r27
    1f30:	9f 38       	cpi	r25, 0x8F	; 143
    1f32:	60 f4       	brcc	.+24     	; 0x1f4c <__fp_trunc+0x2a>
    1f34:	16 16       	cp	r1, r22
    1f36:	b1 1d       	adc	r27, r1
    1f38:	67 2f       	mov	r22, r23
    1f3a:	78 2f       	mov	r23, r24
    1f3c:	88 27       	eor	r24, r24
    1f3e:	98 5f       	subi	r25, 0xF8	; 248
    1f40:	f7 cf       	rjmp	.-18     	; 0x1f30 <__fp_trunc+0xe>
    1f42:	86 95       	lsr	r24
    1f44:	77 95       	ror	r23
    1f46:	67 95       	ror	r22
    1f48:	b1 1d       	adc	r27, r1
    1f4a:	93 95       	inc	r25
    1f4c:	96 39       	cpi	r25, 0x96	; 150
    1f4e:	c8 f3       	brcs	.-14     	; 0x1f42 <__fp_trunc+0x20>
    1f50:	08 95       	ret

00001f52 <__fp_zero>:
    1f52:	e8 94       	clt

00001f54 <__fp_szero>:
    1f54:	bb 27       	eor	r27, r27
    1f56:	66 27       	eor	r22, r22
    1f58:	77 27       	eor	r23, r23
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	97 f9       	bld	r25, 7
    1f5e:	08 95       	ret

00001f60 <__gesf2>:
    1f60:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_cmp>
    1f64:	08 f4       	brcc	.+2      	; 0x1f68 <__gesf2+0x8>
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
    1f68:	08 95       	ret

00001f6a <__mulsf3>:
    1f6a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__mulsf3x>
    1f6e:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__fp_round>
    1f72:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__fp_pscA>
    1f76:	38 f0       	brcs	.+14     	; 0x1f86 <__mulsf3+0x1c>
    1f78:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fp_pscB>
    1f7c:	20 f0       	brcs	.+8      	; 0x1f86 <__mulsf3+0x1c>
    1f7e:	95 23       	and	r25, r21
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <__mulsf3+0x1c>
    1f82:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1f86:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_nan>
    1f8a:	11 24       	eor	r1, r1
    1f8c:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_szero>

00001f90 <__mulsf3x>:
    1f90:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fp_split3>
    1f94:	70 f3       	brcs	.-36     	; 0x1f72 <__mulsf3+0x8>

00001f96 <__mulsf3_pse>:
    1f96:	95 9f       	mul	r25, r21
    1f98:	c1 f3       	breq	.-16     	; 0x1f8a <__mulsf3+0x20>
    1f9a:	95 0f       	add	r25, r21
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	55 1f       	adc	r21, r21
    1fa0:	62 9f       	mul	r22, r18
    1fa2:	f0 01       	movw	r30, r0
    1fa4:	72 9f       	mul	r23, r18
    1fa6:	bb 27       	eor	r27, r27
    1fa8:	f0 0d       	add	r31, r0
    1faa:	b1 1d       	adc	r27, r1
    1fac:	63 9f       	mul	r22, r19
    1fae:	aa 27       	eor	r26, r26
    1fb0:	f0 0d       	add	r31, r0
    1fb2:	b1 1d       	adc	r27, r1
    1fb4:	aa 1f       	adc	r26, r26
    1fb6:	64 9f       	mul	r22, r20
    1fb8:	66 27       	eor	r22, r22
    1fba:	b0 0d       	add	r27, r0
    1fbc:	a1 1d       	adc	r26, r1
    1fbe:	66 1f       	adc	r22, r22
    1fc0:	82 9f       	mul	r24, r18
    1fc2:	22 27       	eor	r18, r18
    1fc4:	b0 0d       	add	r27, r0
    1fc6:	a1 1d       	adc	r26, r1
    1fc8:	62 1f       	adc	r22, r18
    1fca:	73 9f       	mul	r23, r19
    1fcc:	b0 0d       	add	r27, r0
    1fce:	a1 1d       	adc	r26, r1
    1fd0:	62 1f       	adc	r22, r18
    1fd2:	83 9f       	mul	r24, r19
    1fd4:	a0 0d       	add	r26, r0
    1fd6:	61 1d       	adc	r22, r1
    1fd8:	22 1f       	adc	r18, r18
    1fda:	74 9f       	mul	r23, r20
    1fdc:	33 27       	eor	r19, r19
    1fde:	a0 0d       	add	r26, r0
    1fe0:	61 1d       	adc	r22, r1
    1fe2:	23 1f       	adc	r18, r19
    1fe4:	84 9f       	mul	r24, r20
    1fe6:	60 0d       	add	r22, r0
    1fe8:	21 1d       	adc	r18, r1
    1fea:	82 2f       	mov	r24, r18
    1fec:	76 2f       	mov	r23, r22
    1fee:	6a 2f       	mov	r22, r26
    1ff0:	11 24       	eor	r1, r1
    1ff2:	9f 57       	subi	r25, 0x7F	; 127
    1ff4:	50 40       	sbci	r21, 0x00	; 0
    1ff6:	9a f0       	brmi	.+38     	; 0x201e <__mulsf3_pse+0x88>
    1ff8:	f1 f0       	breq	.+60     	; 0x2036 <__mulsf3_pse+0xa0>
    1ffa:	88 23       	and	r24, r24
    1ffc:	4a f0       	brmi	.+18     	; 0x2010 <__mulsf3_pse+0x7a>
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	bb 1f       	adc	r27, r27
    2004:	66 1f       	adc	r22, r22
    2006:	77 1f       	adc	r23, r23
    2008:	88 1f       	adc	r24, r24
    200a:	91 50       	subi	r25, 0x01	; 1
    200c:	50 40       	sbci	r21, 0x00	; 0
    200e:	a9 f7       	brne	.-22     	; 0x1ffa <__mulsf3_pse+0x64>
    2010:	9e 3f       	cpi	r25, 0xFE	; 254
    2012:	51 05       	cpc	r21, r1
    2014:	80 f0       	brcs	.+32     	; 0x2036 <__mulsf3_pse+0xa0>
    2016:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    201a:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_szero>
    201e:	5f 3f       	cpi	r21, 0xFF	; 255
    2020:	e4 f3       	brlt	.-8      	; 0x201a <__mulsf3_pse+0x84>
    2022:	98 3e       	cpi	r25, 0xE8	; 232
    2024:	d4 f3       	brlt	.-12     	; 0x201a <__mulsf3_pse+0x84>
    2026:	86 95       	lsr	r24
    2028:	77 95       	ror	r23
    202a:	67 95       	ror	r22
    202c:	b7 95       	ror	r27
    202e:	f7 95       	ror	r31
    2030:	e7 95       	ror	r30
    2032:	9f 5f       	subi	r25, 0xFF	; 255
    2034:	c1 f7       	brne	.-16     	; 0x2026 <__mulsf3_pse+0x90>
    2036:	fe 2b       	or	r31, r30
    2038:	88 0f       	add	r24, r24
    203a:	91 1d       	adc	r25, r1
    203c:	96 95       	lsr	r25
    203e:	87 95       	ror	r24
    2040:	97 f9       	bld	r25, 7
    2042:	08 95       	ret

00002044 <__divmodhi4>:
    2044:	97 fb       	bst	r25, 7
    2046:	07 2e       	mov	r0, r23
    2048:	16 f4       	brtc	.+4      	; 0x204e <__divmodhi4+0xa>
    204a:	00 94       	com	r0
    204c:	07 d0       	rcall	.+14     	; 0x205c <__divmodhi4_neg1>
    204e:	77 fd       	sbrc	r23, 7
    2050:	09 d0       	rcall	.+18     	; 0x2064 <__divmodhi4_neg2>
    2052:	0e 94 3c 10 	call	0x2078	; 0x2078 <__udivmodhi4>
    2056:	07 fc       	sbrc	r0, 7
    2058:	05 d0       	rcall	.+10     	; 0x2064 <__divmodhi4_neg2>
    205a:	3e f4       	brtc	.+14     	; 0x206a <__divmodhi4_exit>

0000205c <__divmodhi4_neg1>:
    205c:	90 95       	com	r25
    205e:	81 95       	neg	r24
    2060:	9f 4f       	sbci	r25, 0xFF	; 255
    2062:	08 95       	ret

00002064 <__divmodhi4_neg2>:
    2064:	70 95       	com	r23
    2066:	61 95       	neg	r22
    2068:	7f 4f       	sbci	r23, 0xFF	; 255

0000206a <__divmodhi4_exit>:
    206a:	08 95       	ret

0000206c <__tablejump2__>:
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	05 90       	lpm	r0, Z+
    2072:	f4 91       	lpm	r31, Z
    2074:	e0 2d       	mov	r30, r0
    2076:	09 94       	ijmp

00002078 <__udivmodhi4>:
    2078:	aa 1b       	sub	r26, r26
    207a:	bb 1b       	sub	r27, r27
    207c:	51 e1       	ldi	r21, 0x11	; 17
    207e:	07 c0       	rjmp	.+14     	; 0x208e <__udivmodhi4_ep>

00002080 <__udivmodhi4_loop>:
    2080:	aa 1f       	adc	r26, r26
    2082:	bb 1f       	adc	r27, r27
    2084:	a6 17       	cp	r26, r22
    2086:	b7 07       	cpc	r27, r23
    2088:	10 f0       	brcs	.+4      	; 0x208e <__udivmodhi4_ep>
    208a:	a6 1b       	sub	r26, r22
    208c:	b7 0b       	sbc	r27, r23

0000208e <__udivmodhi4_ep>:
    208e:	88 1f       	adc	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	5a 95       	dec	r21
    2094:	a9 f7       	brne	.-22     	; 0x2080 <__udivmodhi4_loop>
    2096:	80 95       	com	r24
    2098:	90 95       	com	r25
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	08 95       	ret

000020a0 <_exit>:
    20a0:	f8 94       	cli

000020a2 <__stop_program>:
    20a2:	ff cf       	rjmp	.-2      	; 0x20a2 <__stop_program>
