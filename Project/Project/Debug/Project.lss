
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002130  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00002130  000021c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800100  00800100  00002264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000479c  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000177d  00000000  00000000  00006e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002892  00000000  00000000  000085d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e0  00000000  00000000  0000ae64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000153e  00000000  00000000  0000b644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002134  00000000  00000000  0000cb82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	3a 01       	movw	r6, r20
      56:	9b 00       	.word	0x009b	; ????
      58:	a1 00       	.word	0x00a1	; ????
      5a:	fa 00       	.word	0x00fa	; ????
      5c:	06 01       	movw	r0, r12
      5e:	12 01       	movw	r2, r4
      60:	1e 01       	movw	r2, r28
      62:	28 01       	movw	r4, r16

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e3       	ldi	r30, 0x30	; 48
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a5 32       	cpi	r26, 0x25	; 37
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 56 06 	call	0xcac	; 0xcac <main>
      9a:	0c 94 96 10 	jmp	0x212c	; 0x212c <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <app_init>:
Uchar8_t u8_g_stopFlag = 0;


void app_init()
{
	ultrasonic_vInit();
      a2:	0e 94 05 06 	call	0xc0a	; 0xc0a <ultrasonic_vInit>
	LCD_Init();
      a6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_Init>
	PUSH_BTN_intialize();
      aa:	0e 94 bf 05 	call	0xb7e	; 0xb7e <PUSH_BTN_intialize>
	TIMER_TMR2NormalModeInit(ENABLED);
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 6d 0c 	call	0x18da	; 0x18da <TIMER_TMR2NormalModeInit>
	KEYPAD_init();
      b4:	0e 94 ed 02 	call	0x5da	; 0x5da <KEYPAD_init>
	DCM_motorInit(ST_g_carMotors);
      b8:	81 e6       	ldi	r24, 0x61	; 97
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DCM_motorInit>
      c0:	08 95       	ret

000000c2 <app_main>:
}

void app_main()
{
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
	en_g_keyState = KEYPAD_getButton();
      ca:	0e 94 14 03 	call	0x628	; 0x628 <KEYPAD_getButton>
      ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <en_g_keyState>
	if(en_g_keyState == KEY_1 && u8_g_startFlag==0)
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	49 f4       	brne	.+18     	; 0xe8 <app_main+0x26>
      d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <u8_g_startFlag>
      da:	91 11       	cpse	r25, r1
      dc:	05 c0       	rjmp	.+10     	; 0xe8 <app_main+0x26>
	{
	
	     en_g_state = SET_DEFAULT_ROTATION;
      de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
		 u8_g_startFlag = 1;
      e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <u8_g_startFlag>
      e6:	1a c0       	rjmp	.+52     	; 0x11c <app_main+0x5a>
	}
	else if(en_g_keyState == KEY_2 && u8_g_startFlag == 1)
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	59 f4       	brne	.+22     	; 0x102 <app_main+0x40>
      ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <u8_g_startFlag>
      f0:	91 30       	cpi	r25, 0x01	; 1
      f2:	39 f4       	brne	.+14     	; 0x102 <app_main+0x40>
	{ 
		en_g_state = STOP;
      f4:	87 e0       	ldi	r24, 0x07	; 7
      f6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
		u8_g_stopFlag = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     100:	0d c0       	rjmp	.+26     	; 0x11c <app_main+0x5a>
	}
	
	else if(en_g_keyState == KEY_1 && u8_g_startFlag == 1)
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	59 f4       	brne	.+22     	; 0x11c <app_main+0x5a>
     106:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8_g_startFlag>
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	39 f4       	brne	.+14     	; 0x11c <app_main+0x5a>
	{
		en_g_state = CAR_SCANING;
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
		LCD_Clear();
     114:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear>
		u8_g_stopFlag = 0;
     118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
	
	
	switch(en_g_state)
     11c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <en_g_state>
     120:	8e 2f       	mov	r24, r30
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	88 30       	cpi	r24, 0x08	; 8
     126:	91 05       	cpc	r25, r1
     128:	08 f0       	brcs	.+2      	; 0x12c <app_main+0x6a>
     12a:	a6 c0       	rjmp	.+332    	; 0x278 <app_main+0x1b6>
     12c:	fc 01       	movw	r30, r24
     12e:	e6 5d       	subi	r30, 0xD6	; 214
     130:	ff 4f       	sbci	r31, 0xFF	; 255
     132:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__tablejump2__>
	{
		case SET_DEFAULT_ROTATION :
		{
			setDefaultRotation();
     136:	0e 94 41 01 	call	0x282	; 0x282 <setDefaultRotation>
			en_g_state = CAR_SCANING;
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
			break;
     140:	9b c0       	rjmp	.+310    	; 0x278 <app_main+0x1b6>
		}
		case CAR_SCANING :
		{
			
			ultrasonic_vGetDistance(&f64_g_obstcaleDistance);
     142:	87 e0       	ldi	r24, 0x07	; 7
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_vGetDistance>
			if(f64_g_obstcaleDistance > 70)
     14a:	c0 90 07 01 	lds	r12, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     14e:	d0 90 08 01 	lds	r13, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     152:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     156:	f0 90 0a 01 	lds	r15, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	4c e8       	ldi	r20, 0x8C	; 140
     160:	52 e4       	ldi	r21, 0x42	; 66
     162:	c7 01       	movw	r24, r14
     164:	b6 01       	movw	r22, r12
     166:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__gesf2>
     16a:	18 16       	cp	r1, r24
     16c:	24 f4       	brge	.+8      	; 0x176 <app_main+0xb4>
			{
				en_g_state = MORE_THAN_70_CM;
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
     174:	81 c0       	rjmp	.+258    	; 0x278 <app_main+0x1b6>
			}
			else if(f64_g_obstcaleDistance <= 70 && f64_g_obstcaleDistance > 30)
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	4c e8       	ldi	r20, 0x8C	; 140
     17c:	52 e4       	ldi	r21, 0x42	; 66
     17e:	c7 01       	movw	r24, r14
     180:	b6 01       	movw	r22, r12
     182:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__cmpsf2>
     186:	18 16       	cp	r1, r24
     188:	74 f0       	brlt	.+28     	; 0x1a6 <app_main+0xe4>
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 ef       	ldi	r20, 0xF0	; 240
     190:	51 e4       	ldi	r21, 0x41	; 65
     192:	c7 01       	movw	r24, r14
     194:	b6 01       	movw	r22, r12
     196:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__gesf2>
     19a:	18 16       	cp	r1, r24
     19c:	24 f4       	brge	.+8      	; 0x1a6 <app_main+0xe4>
			{
				en_g_state = MORE_THAN_30_CM;
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
     1a4:	69 c0       	rjmp	.+210    	; 0x278 <app_main+0x1b6>
			}
			else if(f64_g_obstcaleDistance <= 30 && f64_g_obstcaleDistance > 20)
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	40 ef       	ldi	r20, 0xF0	; 240
     1ac:	51 e4       	ldi	r21, 0x41	; 65
     1ae:	c7 01       	movw	r24, r14
     1b0:	b6 01       	movw	r22, r12
     1b2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__cmpsf2>
     1b6:	18 16       	cp	r1, r24
     1b8:	74 f0       	brlt	.+28     	; 0x1d6 <app_main+0x114>
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 ea       	ldi	r20, 0xA0	; 160
     1c0:	51 e4       	ldi	r21, 0x41	; 65
     1c2:	c7 01       	movw	r24, r14
     1c4:	b6 01       	movw	r22, r12
     1c6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__gesf2>
     1ca:	18 16       	cp	r1, r24
     1cc:	24 f4       	brge	.+8      	; 0x1d6 <app_main+0x114>
			{
				en_g_state = MORE_THAN_20_CM;
     1ce:	85 e0       	ldi	r24, 0x05	; 5
     1d0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
     1d4:	51 c0       	rjmp	.+162    	; 0x278 <app_main+0x1b6>
			}
			else if(f64_g_obstcaleDistance < 20)
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	40 ea       	ldi	r20, 0xA0	; 160
     1dc:	51 e4       	ldi	r21, 0x41	; 65
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__cmpsf2>
     1e6:	88 23       	and	r24, r24
     1e8:	0c f0       	brlt	.+2      	; 0x1ec <app_main+0x12a>
     1ea:	46 c0       	rjmp	.+140    	; 0x278 <app_main+0x1b6>
			{
				en_g_state = LESS_THAN_20_CM;
     1ec:	86 e0       	ldi	r24, 0x06	; 6
     1ee:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
     1f2:	42 c0       	rjmp	.+132    	; 0x278 <app_main+0x1b6>
			break;
		}
		case MORE_THAN_70_CM :
		{

			u8_g_lessThan20Flag = 0;
     1f4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <u8_g_lessThan20Flag>
			u8_g_moreThan30Flag =0;
     1f8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <u8_g_moreThan30Flag>
			u8_g_rot360Flag=0;
     1fc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <u8_g_rot360Flag>
			obstcaleMoreThan70();
     200:	0e 94 03 02 	call	0x406	; 0x406 <obstcaleMoreThan70>
			en_g_state = CAR_SCANING;
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
			break;
     20a:	36 c0       	rjmp	.+108    	; 0x278 <app_main+0x1b6>
		}
		case MORE_THAN_30_CM:
		{
			u8_g_lessThan20Flag = 0;
     20c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <u8_g_lessThan20Flag>
			u8_g_moreThan70Flag =0;
     210:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <u8_g_moreThan70Flag>
			u8_g_rot360Flag=0;
     214:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <u8_g_rot360Flag>
			obstcaleMoreThan30();
     218:	0e 94 35 02 	call	0x46a	; 0x46a <obstcaleMoreThan30>
			en_g_state = CAR_SCANING;
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
			break;
     222:	2a c0       	rjmp	.+84     	; 0x278 <app_main+0x1b6>
		}
		
		case MORE_THAN_20_CM:
		{

			u8_g_moreThan70Flag = 0;
     224:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <u8_g_moreThan70Flag>
			u8_g_lessThan20Flag = 0;
     228:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <u8_g_lessThan20Flag>
			u8_g_moreThan30Flag = 0;
     22c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <u8_g_moreThan30Flag>
			obstcaleMoreThan20();
     230:	0e 94 52 02 	call	0x4a4	; 0x4a4 <obstcaleMoreThan20>
			en_g_state = CAR_SCANING;
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
			break;
     23a:	1e c0       	rjmp	.+60     	; 0x278 <app_main+0x1b6>
		
		
		case LESS_THAN_20_CM:
		{

			u8_g_moreThan70Flag = 0;
     23c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <u8_g_moreThan70Flag>
			u8_g_moreThan30Flag =0;
     240:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <u8_g_moreThan30Flag>
			obstcaleLessThan20();
     244:	0e 94 9f 02 	call	0x53e	; 0x53e <obstcaleLessThan20>
			en_g_state = CAR_SCANING;
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <en_g_state>
			break;
     24e:	14 c0       	rjmp	.+40     	; 0x278 <app_main+0x1b6>
		}
		
		
		case STOP:
		{
			u8_g_moreThan70Flag = 0;
     250:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <u8_g_moreThan70Flag>
			u8_g_lessThan20Flag = 0;
     254:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <u8_g_lessThan20Flag>
			u8_g_moreThan30Flag = 0;
     258:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <u8_g_moreThan30Flag>
			if(u8_g_stopFlag == 1)
     25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	51 f4       	brne	.+20     	; 0x278 <app_main+0x1b6>
			{
				Car_Stop();
     264:	0e 94 cf 02 	call	0x59e	; 0x59e <Car_Stop>
				u8_g_stopFlag++;
     268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     272:	02 c0       	rjmp	.+4      	; 0x278 <app_main+0x1b6>
			break;
		}
		
		case STATE_IDLE:
		{
			LCD_update_stop();
     274:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_update_stop>
			break;
		}
	}
	
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	df 90       	pop	r13
     27e:	cf 90       	pop	r12
     280:	08 95       	ret

00000282 <setDefaultRotation>:
Uchar8_t u8_g_lessThan20Flag = 0;
Uchar8_t u8_g_rot360Flag = 0;

void setDefaultRotation()
{
	LCD_Clear();
     282:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear>
	LCD_SetCursor(0,0);
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
     28e:	85 e7       	ldi	r24, 0x75	; 117
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	LCD_SetCursor(1,0);
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Right");
     29e:	83 e8       	ldi	r24, 0x83	; 131
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	TMR_intDelay_ms(5000);
     2a6:	88 e8       	ldi	r24, 0x88	; 136
     2a8:	93 e1       	ldi	r25, 0x13	; 19
     2aa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
	
	while(u8_g_timeOut != 1)
     2ae:	2d c0       	rjmp	.+90     	; 0x30a <setDefaultRotation+0x88>
	{
		PUSH_BTN_read_state(0,&en_g_rotationBtnState);
     2b0:	6b e0       	ldi	r22, 0x0B	; 11
     2b2:	71 e0       	ldi	r23, 0x01	; 1
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 c4 05 	call	0xb88	; 0xb88 <PUSH_BTN_read_state>
		if(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
     2ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <en_g_rotationBtnState>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	21 f5       	brne	.+72     	; 0x30a <setDefaultRotation+0x88>
     2c2:	05 c0       	rjmp	.+10     	; 0x2ce <setDefaultRotation+0x4c>
		{
			while(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
			{
				PUSH_BTN_read_state(0,&en_g_rotationBtnState);
     2c4:	6b e0       	ldi	r22, 0x0B	; 11
     2c6:	71 e0       	ldi	r23, 0x01	; 1
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 c4 05 	call	0xb88	; 0xb88 <PUSH_BTN_read_state>
	while(u8_g_timeOut != 1)
	{
		PUSH_BTN_read_state(0,&en_g_rotationBtnState);
		if(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
		{
			while(en_g_rotationBtnState == PUSH_BTN_STATE_RELEASED)
     2ce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <en_g_rotationBtnState>
     2d2:	81 30       	cpi	r24, 0x01	; 1
     2d4:	b9 f3       	breq	.-18     	; 0x2c4 <setDefaultRotation+0x42>
			{
				PUSH_BTN_read_state(0,&en_g_rotationBtnState);
			}

			if(en_g_rotation == ROTATION_R)
     2d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	51 f4       	brne	.+20     	; 0x2f2 <setDefaultRotation+0x70>
			{
				en_g_rotation = ROTATION_L;
     2de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Left ");
     2e8:	89 e8       	ldi	r24, 0x89	; 137
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     2f0:	0c c0       	rjmp	.+24     	; 0x30a <setDefaultRotation+0x88>
				
			}

			else if(en_g_rotation == ROTATION_L)
     2f2:	81 11       	cpse	r24, r1
     2f4:	0a c0       	rjmp	.+20     	; 0x30a <setDefaultRotation+0x88>
			{
				
				en_g_rotation = ROTATION_R;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_SetCursor(1,0);
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
				LCD_WriteString((Uchar8_t*)"Right ");
     302:	8f e8       	ldi	r24, 0x8F	; 143
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	LCD_WriteString((Uchar8_t*)"Set Def. Rot.");
	LCD_SetCursor(1,0);
	LCD_WriteString((Uchar8_t*)"Right");
	TMR_intDelay_ms(5000);
	
	while(u8_g_timeOut != 1)
     30a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	79 f6       	brne	.-98     	; 0x2b0 <setDefaultRotation+0x2e>
				LCD_SetCursor(1,0);
				LCD_WriteString((Uchar8_t*)"Right ");
			}
		}
	}
	u8_g_timeOut = 0;
     312:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
	TMR_intDelay_ms(2000);
     316:	80 ed       	ldi	r24, 0xD0	; 208
     318:	97 e0       	ldi	r25, 0x07	; 7
     31a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
	while(u8_g_timeOut !=1);
     31e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	e1 f7       	brne	.-8      	; 0x31e <setDefaultRotation+0x9c>
	LCD_Clear();
     326:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear>
	u8_g_timeOut = 0;
     32a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
     32e:	08 95       	ret

00000330 <LCD_update>:
	}
	
	
}
void LCD_update(EN_speed en_a_speed,EN_direction en_a_direction,float64_t f64_a_distance)
{
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	d8 2f       	mov	r29, r24
     33e:	c6 2f       	mov	r28, r22
     340:	69 01       	movw	r12, r18
     342:	7a 01       	movw	r14, r20
	
	
	LCD_SetCursor(0,0);
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Speed:");
     34c:	86 e9       	ldi	r24, 0x96	; 150
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
    LCD_SetCursor(0,7);
     354:	67 e0       	ldi	r22, 0x07	; 7
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	if(en_a_speed == SPEED_0 )
     35c:	d1 11       	cpse	r29, r1
     35e:	05 c0       	rjmp	.+10     	; 0x36a <LCD_update+0x3a>
	{
		LCD_WriteString((Uchar8_t*)"00% ");
     360:	8d e9       	ldi	r24, 0x9D	; 157
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     368:	0b c0       	rjmp	.+22     	; 0x380 <LCD_update+0x50>
	}
	else if (en_a_speed == SPEED_30)
     36a:	d1 30       	cpi	r29, 0x01	; 1
     36c:	29 f4       	brne	.+10     	; 0x378 <LCD_update+0x48>
	{
		LCD_WriteString((Uchar8_t*)"30% ");
     36e:	82 ea       	ldi	r24, 0xA2	; 162
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     376:	04 c0       	rjmp	.+8      	; 0x380 <LCD_update+0x50>
	}
	else 
	{
		LCD_WriteString((Uchar8_t*)"50% ");
     378:	87 ea       	ldi	r24, 0xA7	; 167
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	}
	LCD_SetCursor(0,11);
     380:	6b e0       	ldi	r22, 0x0B	; 11
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dir:");
     388:	8c ea       	ldi	r24, 0xAC	; 172
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	LCD_SetCursor(0,15);
     390:	6f e0       	ldi	r22, 0x0F	; 15
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	if(en_a_direction == DIRECTION_F)
     398:	c1 11       	cpse	r28, r1
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <LCD_update+0x76>
	{
		LCD_WriteString((Uchar8_t*)"F");
     39c:	81 eb       	ldi	r24, 0xB1	; 177
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     3a4:	12 c0       	rjmp	.+36     	; 0x3ca <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_B)
     3a6:	c1 30       	cpi	r28, 0x01	; 1
     3a8:	29 f4       	brne	.+10     	; 0x3b4 <LCD_update+0x84>
	{
		LCD_WriteString((Uchar8_t*)"B");
     3aa:	83 eb       	ldi	r24, 0xB3	; 179
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     3b2:	0b c0       	rjmp	.+22     	; 0x3ca <LCD_update+0x9a>
	}
	else if(en_a_direction == DIRECTION_R)
     3b4:	c2 30       	cpi	r28, 0x02	; 2
     3b6:	29 f4       	brne	.+10     	; 0x3c2 <LCD_update+0x92>
	{
		LCD_WriteString((Uchar8_t*)"R");
     3b8:	85 eb       	ldi	r24, 0xB5	; 181
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <LCD_update+0x9a>
	}
    else
	{
		LCD_WriteString((Uchar8_t*)"S");
     3c2:	87 eb       	ldi	r24, 0xB7	; 183
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	}
	
	LCD_SetCursor(1,0);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteString((Uchar8_t*)"Dist:");
     3d2:	89 eb       	ldi	r24, 0xB9	; 185
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	LCD_SetCursor(1,5);
     3da:	65 e0       	ldi	r22, 0x05	; 5
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteNumber(f64_a_distance);
     3e2:	c7 01       	movw	r24, r14
     3e4:	b6 01       	movw	r22, r12
     3e6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fixsfsi>
     3ea:	cb 01       	movw	r24, r22
     3ec:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_WriteNumber>
	LCD_WriteString((Uchar8_t*)" Cm");
     3f0:	8f eb       	ldi	r24, 0xBF	; 191
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	df 90       	pop	r13
     402:	cf 90       	pop	r12
     404:	08 95       	ret

00000406 <obstcaleMoreThan70>:
}



void obstcaleMoreThan70()
{
     406:	cf 93       	push	r28
	
	
	if(u8_g_moreThan70Flag == 0)
     408:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u8_g_moreThan70Flag>
     40c:	81 11       	cpse	r24, r1
     40e:	0f c0       	rjmp	.+30     	; 0x42e <obstcaleMoreThan70+0x28>
	{
		u8_g_moreThan70Flag = 1;
     410:	c1 e0       	ldi	r28, 0x01	; 1
     412:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <u8_g_moreThan70Flag>
		DCM_MoveForward(30);
     416:	8e e1       	ldi	r24, 0x1E	; 30
     418:	0e 94 85 05 	call	0xb0a	; 0xb0a <DCM_MoveForward>
		en_g_speed = SPEED_30;
     41c:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <en_g_speed>
		en_g_direction = DIRECTION_F;
     420:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <en_g_direction>
		TMR_intDelay_ms(5000);
     424:	88 e8       	ldi	r24, 0x88	; 136
     426:	93 e1       	ldi	r25, 0x13	; 19
     428:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
     42c:	0e c0       	rjmp	.+28     	; 0x44a <obstcaleMoreThan70+0x44>
		
	}
	else if(u8_g_moreThan70Flag == 1 && u8_g_timeOut == 1)
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	61 f4       	brne	.+24     	; 0x44a <obstcaleMoreThan70+0x44>
     432:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	41 f4       	brne	.+16     	; 0x44a <obstcaleMoreThan70+0x44>
	{
		
		DCM_MoveForward(50);
     43a:	82 e3       	ldi	r24, 0x32	; 50
     43c:	0e 94 85 05 	call	0xb0a	; 0xb0a <DCM_MoveForward>
		en_g_speed = SPEED_50;
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <en_g_speed>
		u8_g_timeOut =0;
     446:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
	}
 
    LCD_update(en_g_speed,en_g_direction,f64_g_obstcaleDistance);
     44a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     44e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     452:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     456:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     45a:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <en_g_direction>
     45e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <en_g_speed>
     462:	0e 94 98 01 	call	0x330	; 0x330 <LCD_update>
}
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <obstcaleMoreThan30>:

void obstcaleMoreThan30()
{

	if(u8_g_moreThan30Flag == 0 )
     46a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u8_g_moreThan30Flag>
     46e:	81 11       	cpse	r24, r1
     470:	0a c0       	rjmp	.+20     	; 0x486 <obstcaleMoreThan30+0x1c>
	{
		DCM_MoveForward(30);
     472:	8e e1       	ldi	r24, 0x1E	; 30
     474:	0e 94 85 05 	call	0xb0a	; 0xb0a <DCM_MoveForward>
		en_g_speed = SPEED_30;
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <en_g_speed>
		en_g_direction = DIRECTION_F;
     47e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <en_g_direction>
		u8_g_moreThan30Flag = 1;
     482:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <u8_g_moreThan30Flag>
	}
LCD_update(en_g_speed,en_g_direction,f64_g_obstcaleDistance);
     486:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     48a:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     48e:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     492:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     496:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <en_g_direction>
     49a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <en_g_speed>
     49e:	0e 94 98 01 	call	0x330	; 0x330 <LCD_update>
     4a2:	08 95       	ret

000004a4 <obstcaleMoreThan20>:
}


void obstcaleMoreThan20()
{
	DCM_vdStopDCM();
     4a4:	0e 94 3b 05 	call	0xa76	; 0xa76 <DCM_vdStopDCM>
	LCD_update(SPEED_0,DIRECTION_S,f64_g_obstcaleDistance);
     4a8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     4ac:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     4b0:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     4b4:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     4b8:	63 e0       	ldi	r22, 0x03	; 3
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 98 01 	call	0x330	; 0x330 <LCD_update>
	TMR_intDelay_ms(1000);
     4c0:	88 ee       	ldi	r24, 0xE8	; 232
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
	while(u8_g_timeOut == 0 );
     4c8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     4cc:	88 23       	and	r24, r24
     4ce:	e1 f3       	breq	.-8      	; 0x4c8 <obstcaleMoreThan20+0x24>
	u8_g_timeOut = 0;
     4d0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
	if(u8_g_rot360Flag < 4)
     4d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u8_g_rot360Flag>
     4d8:	84 30       	cpi	r24, 0x04	; 4
     4da:	c0 f4       	brcc	.+48     	; 0x50c <obstcaleMoreThan20+0x68>
	{
		LCD_update(SPEED_50,DIRECTION_R,f64_g_obstcaleDistance);
     4dc:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     4e0:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     4e4:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     4e8:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0e 94 98 01 	call	0x330	; 0x330 <LCD_update>
		DCM_rotateDCM(en_g_rotation,50);
     4f4:	62 e3       	ldi	r22, 0x32	; 50
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4fc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DCM_rotateDCM>
		u8_g_rot360Flag++;
     500:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u8_g_rot360Flag>
     504:	8f 5f       	subi	r24, 0xFF	; 255
     506:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <u8_g_rot360Flag>
     50a:	08 95       	ret
	}
	
	else 
	{
		LCD_update(SPEED_0,DIRECTION_S,f64_g_obstcaleDistance);
     50c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     510:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     514:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     518:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     51c:	63 e0       	ldi	r22, 0x03	; 3
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 98 01 	call	0x330	; 0x330 <LCD_update>
		TMR_intDelay_ms(3000);
     524:	88 eb       	ldi	r24, 0xB8	; 184
     526:	9b e0       	ldi	r25, 0x0B	; 11
     528:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
		while(u8_g_timeOut == 0 );
     52c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     530:	88 23       	and	r24, r24
     532:	e1 f3       	breq	.-8      	; 0x52c <obstcaleMoreThan20+0x88>
		u8_g_timeOut = 0;
     534:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
		u8_g_rot360Flag=0;
     538:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <u8_g_rot360Flag>
     53c:	08 95       	ret

0000053e <obstcaleLessThan20>:
	
}

void obstcaleLessThan20()
{
	if(u8_g_lessThan20Flag == 0 )
     53e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u8_g_lessThan20Flag>
     542:	81 11       	cpse	r24, r1
     544:	1c c0       	rjmp	.+56     	; 0x57e <obstcaleLessThan20+0x40>
	{
		DCM_vdStopDCM();
     546:	0e 94 3b 05 	call	0xa76	; 0xa76 <DCM_vdStopDCM>
		LCD_update(SPEED_0,DIRECTION_S,f64_g_obstcaleDistance);
     54a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     54e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     552:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     556:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     55a:	63 e0       	ldi	r22, 0x03	; 3
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 98 01 	call	0x330	; 0x330 <LCD_update>
		TMR_intDelay_ms(1000);
     562:	88 ee       	ldi	r24, 0xE8	; 232
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
		while(u8_g_timeOut == 0 );
     56a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     56e:	88 23       	and	r24, r24
     570:	e1 f3       	breq	.-8      	; 0x56a <obstcaleLessThan20+0x2c>
		u8_g_timeOut = 0;
     572:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
		u8_g_lessThan20Flag = 1;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8_g_lessThan20Flag>
     57c:	08 95       	ret
	}
	
	else {
		LCD_update(SPEED_30,DIRECTION_B,f64_g_obstcaleDistance);
     57e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <f64_g_obstcaleDistance>
     582:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <f64_g_obstcaleDistance+0x1>
     586:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <f64_g_obstcaleDistance+0x2>
     58a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <f64_g_obstcaleDistance+0x3>
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	0e 94 98 01 	call	0x330	; 0x330 <LCD_update>
		DCM_MoveBackward(30);
     596:	8e e1       	ldi	r24, 0x1E	; 30
     598:	0e 94 a2 05 	call	0xb44	; 0xb44 <DCM_MoveBackward>
     59c:	08 95       	ret

0000059e <Car_Stop>:
}


void Car_Stop()
{
	LCD_Clear();
     59e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear>
	DCM_vdStopDCM();
     5a2:	0e 94 3b 05 	call	0xa76	; 0xa76 <DCM_vdStopDCM>
	LCD_SetCursor(0,0);
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>

	LCD_WriteString((Uchar8_t *)"ROBOT STOPED");
     5ae:	83 ec       	ldi	r24, 0xC3	; 195
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     5b6:	08 95       	ret

000005b8 <LCD_update_stop>:
}


void LCD_update_stop()
{
	LCD_SetCursor(0,0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteString((Uchar8_t *)"Press Key 1");
     5c0:	80 ed       	ldi	r24, 0xD0	; 208
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
	LCD_SetCursor(1,0);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_SetCursor>
	LCD_WriteString((Uchar8_t *)"to start");
     5d0:	8c ed       	ldi	r24, 0xDC	; 220
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_WriteString>
     5d8:	08 95       	ret

000005da <KEYPAD_init>:
Description : Initializes Rows as Output and Cols as input and put high logic on each pin
Args        : Void
return      : Void
*/
void KEYPAD_init(void)
{
     5da:	cf 93       	push	r28
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
     5de:	0e c0       	rjmp	.+28     	; 0x5fc <KEYPAD_init+0x22>
		///* set current row pin en_g_direction as output */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],OUTPUT);
		///* set current row pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
     5e0:	8c 2f       	mov	r24, r28
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9c 01       	movw	r18, r24
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	22 0f       	add	r18, r18
     5ec:	33 1f       	adc	r19, r19
     5ee:	82 0f       	add	r24, r18
     5f0:	93 1f       	adc	r25, r19
     5f2:	81 51       	subi	r24, 0x11	; 17
     5f4:	9f 4f       	sbci	r25, 0xFF	; 255
     5f6:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_Initpin>
{
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* loop from 0 to number of rows defined in config file*/
	for(u8_loc_rowsCounter=0;u8_loc_rowsCounter<NUMBER_OF_ROWS;u8_loc_rowsCounter++)
     5fa:	cf 5f       	subi	r28, 0xFF	; 255
     5fc:	cc 23       	and	r28, r28
     5fe:	81 f3       	breq	.-32     	; 0x5e0 <KEYPAD_init+0x6>
     600:	c0 e0       	ldi	r28, 0x00	; 0
     602:	0e c0       	rjmp	.+28     	; 0x620 <KEYPAD_init+0x46>
	{
		///* set current col pin en_g_direction as input */
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
     604:	8c 2f       	mov	r24, r28
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	9c 01       	movw	r18, r24
     60a:	22 0f       	add	r18, r18
     60c:	33 1f       	adc	r19, r19
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	8b 51       	subi	r24, 0x1B	; 27
     618:	9f 4f       	sbci	r25, 0xFF	; 255
     61a:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_Initpin>
		
		DIO_Initpin(&st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter]);
	}
	
	/* loop from 0 to number of cols defined in config file*/
	for(u8_loc_colsCounter=0;u8_loc_colsCounter<NUMBER_OF_COLS;u8_loc_colsCounter++)
     61e:	cf 5f       	subi	r28, 0xFF	; 255
     620:	c2 30       	cpi	r28, 0x02	; 2
     622:	80 f3       	brcs	.-32     	; 0x604 <KEYPAD_init+0x2a>
		//DIO_s8SETPinDir(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],INPUT);
		///* set current col pin value as high */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_cols[u8_loc_colsCounter],HIGH);
		DIO_Initpin(&st_keypad_conf.u8_arr_cols[u8_loc_colsCounter]);
	}
}
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <KEYPAD_getButton>:
             
Args        : Void
return      : EN_KEYPADKEYS enum holds all possible keys
*/
EN_KEYPAD_KEYS KEYPAD_getButton()
{
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	1f 92       	push	r1
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
	/* declare two local counters for row and col*/
	Uchar8_t u8_loc_colsCounter,u8_loc_rowsCounter;
	
	/* initialize pinValue variable to holds pin en_g_state*/
	Uchar8_t pinValue = 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	89 83       	std	Y+1, r24	; 0x01
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	57 c0       	rjmp	.+174    	; 0x6f4 <KEYPAD_getButton+0xcc>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
     646:	e0 2e       	mov	r14, r16
     648:	f1 2c       	mov	r15, r1
     64a:	f7 01       	movw	r30, r14
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	ee 0d       	add	r30, r14
     656:	ff 1d       	adc	r31, r15
     658:	eb 51       	subi	r30, 0x1B	; 27
     65a:	ff 4f       	sbci	r31, 0xFF	; 255
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	63 85       	ldd	r22, Z+11	; 0x0b
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	34 c0       	rjmp	.+104    	; 0x6d2 <KEYPAD_getButton+0xaa>
		{
			/* Get value of current col pin*/
			//DIO_s8GETPinVal (st_keypad_conf.u8_arr_cols[u8_loc_colsCounter] , &pinValue); 
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     66a:	c1 2e       	mov	r12, r17
     66c:	d1 2c       	mov	r13, r1
     66e:	f6 01       	movw	r30, r12
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	ec 0d       	add	r30, r12
     67a:	fd 1d       	adc	r31, r13
     67c:	eb 51       	subi	r30, 0x1B	; 27
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	ae 01       	movw	r20, r28
     682:	4f 5f       	subi	r20, 0xFF	; 255
     684:	5f 4f       	sbci	r21, 0xFF	; 255
     686:	61 81       	ldd	r22, Z+1	; 0x01
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	0e 94 cc 06 	call	0xd98	; 0xd98 <DIO_read>
			/* check if pressed*/
			if(pinValue == 0) 
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	81 11       	cpse	r24, r1
     692:	1e c0       	rjmp	.+60     	; 0x6d0 <KEYPAD_getButton+0xa8>
     694:	10 c0       	rjmp	.+32     	; 0x6b6 <KEYPAD_getButton+0x8e>
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
     696:	f6 01       	movw	r30, r12
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	ec 0d       	add	r30, r12
     6a2:	fd 1d       	adc	r31, r13
     6a4:	eb 51       	subi	r30, 0x1B	; 27
     6a6:	ff 4f       	sbci	r31, 0xFF	; 255
     6a8:	ae 01       	movw	r20, r28
     6aa:	4f 5f       	subi	r20, 0xFF	; 255
     6ac:	5f 4f       	sbci	r21, 0xFF	; 255
     6ae:	61 81       	ldd	r22, Z+1	; 0x01
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	0e 94 cc 06 	call	0xd98	; 0xd98 <DIO_read>
			DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
			/* check if pressed*/
			if(pinValue == 0) 
			{
				/* loop tell it turns high again (user left key) */
				while(pinValue == 0)
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	88 23       	and	r24, r24
     6ba:	69 f3       	breq	.-38     	; 0x696 <KEYPAD_getButton+0x6e>
				{
		          DIO_read(KEPAD_PORT,st_keypad_conf.u8_arr_cols[u8_loc_colsCounter].dio_pin,&pinValue);
				}
				
				/* return current [row][col] position from config array */
				return st_keypad_conf.u8_arr_keys[u8_loc_rowsCounter][u8_loc_colsCounter];
     6bc:	c7 01       	movw	r24, r14
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	8b 51       	subi	r24, 0x1B	; 27
     6c4:	9f 4f       	sbci	r25, 0xFF	; 255
     6c6:	fc 01       	movw	r30, r24
     6c8:	ec 0d       	add	r30, r12
     6ca:	fd 1d       	adc	r31, r13
     6cc:	87 85       	ldd	r24, Z+15	; 0x0f
     6ce:	16 c0       	rjmp	.+44     	; 0x6fc <KEYPAD_getButton+0xd4>
	{
		/* write logic low on current row pin*/
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],LOW);
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_LOW);
		/* loop from 0 to number of cols defined in config file*/
		for (u8_loc_colsCounter = 0 ; u8_loc_colsCounter < NUMBER_OF_COLS ; u8_loc_colsCounter++)
     6d0:	1f 5f       	subi	r17, 0xFF	; 255
     6d2:	12 30       	cpi	r17, 0x02	; 2
     6d4:	50 f2       	brcs	.-108    	; 0x66a <KEYPAD_getButton+0x42>
			}
		}
		
		/* write logic high on current row pin */
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
     6d6:	f7 01       	movw	r30, r14
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	ee 0d       	add	r30, r14
     6e2:	ff 1d       	adc	r31, r15
     6e4:	eb 51       	subi	r30, 0x1B	; 27
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	63 85       	ldd	r22, Z+11	; 0x0b
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	/* initialize pinValue variable to holds pin en_g_state*/
	Uchar8_t pinValue = 1;
	
	
	/* loop from 0 to number of rows defined in config file*/
	for( u8_loc_rowsCounter = 0 ; u8_loc_rowsCounter < NUMBER_OF_ROWS ; u8_loc_rowsCounter++)
     6f2:	0f 5f       	subi	r16, 0xFF	; 255
     6f4:	00 23       	and	r16, r16
     6f6:	09 f4       	brne	.+2      	; 0x6fa <KEYPAD_getButton+0xd2>
     6f8:	a6 cf       	rjmp	.-180    	; 0x646 <KEYPAD_getButton+0x1e>
		//DIO_s8SETPinVal(st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter],HIGH);   
		DIO_WritePin(KEPAD_PORT,st_keypad_conf.u8_arr_rows[u8_loc_rowsCounter].dio_pin,DIO_HIGH);
	}
	
	/* if nothing pressed */
	return KEY_NOTHING;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0f 90       	pop	r0
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	08 95       	ret

00000710 <WriteIns>:

#elif LCD_MODE ==_4_BIT


static void WriteIns(Uchar8_t ins)
{
     710:	cf 93       	push	r28
     712:	c8 2f       	mov	r28, r24
	DIO_writepinn(RS,LOW);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D7,GET_BIT(ins,P7));
     71c:	6c 2f       	mov	r22, r28
     71e:	66 1f       	adc	r22, r22
     720:	66 27       	eor	r22, r22
     722:	66 1f       	adc	r22, r22
     724:	87 e0       	ldi	r24, 0x07	; 7
     726:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(ins,P6));
     72a:	c6 fb       	bst	r28, 6
     72c:	66 27       	eor	r22, r22
     72e:	60 f9       	bld	r22, 0
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(ins,P5));
     736:	c5 fb       	bst	r28, 5
     738:	66 27       	eor	r22, r22
     73a:	60 f9       	bld	r22, 0
     73c:	85 e0       	ldi	r24, 0x05	; 5
     73e:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(ins,P4));
     742:	c4 fb       	bst	r28, 4
     744:	66 27       	eor	r22, r22
     746:	60 f9       	bld	r22, 0
     748:	84 e0       	ldi	r24, 0x04	; 4
     74a:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(EN,HIGH);
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     756:	89 ef       	ldi	r24, 0xF9	; 249
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <WriteIns+0x4a>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <WriteIns+0x50>
     760:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
     76a:	89 ef       	ldi	r24, 0xF9	; 249
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <WriteIns+0x5e>
     772:	00 c0       	rjmp	.+0      	; 0x774 <WriteIns+0x64>
     774:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(D7,GET_BIT(ins,P3));
     776:	c3 fb       	bst	r28, 3
     778:	66 27       	eor	r22, r22
     77a:	60 f9       	bld	r22, 0
     77c:	87 e0       	ldi	r24, 0x07	; 7
     77e:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(ins,P2));
     782:	c2 fb       	bst	r28, 2
     784:	66 27       	eor	r22, r22
     786:	60 f9       	bld	r22, 0
     788:	86 e0       	ldi	r24, 0x06	; 6
     78a:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(ins,P1));
     78e:	c1 fb       	bst	r28, 1
     790:	66 27       	eor	r22, r22
     792:	60 f9       	bld	r22, 0
     794:	85 e0       	ldi	r24, 0x05	; 5
     796:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(ins,P0));
     79a:	6c 2f       	mov	r22, r28
     79c:	61 70       	andi	r22, 0x01	; 1
     79e:	84 e0       	ldi	r24, 0x04	; 4
     7a0:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(EN,HIGH);
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	83 e0       	ldi	r24, 0x03	; 3
     7a8:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
     7ac:	89 ef       	ldi	r24, 0xF9	; 249
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <WriteIns+0xa0>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <WriteIns+0xa6>
     7b6:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
     7c0:	89 ef       	ldi	r24, 0xF9	; 249
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <WriteIns+0xb4>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <WriteIns+0xba>
     7ca:	00 00       	nop
	_delay_ms(1);
}
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <WriteData>:
static void WriteData(Uchar8_t data)
{
     7d0:	cf 93       	push	r28
     7d2:	c8 2f       	mov	r28, r24
	
	DIO_writepinn(RS,HIGH);
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D7,GET_BIT(data,P7));
     7dc:	6c 2f       	mov	r22, r28
     7de:	66 1f       	adc	r22, r22
     7e0:	66 27       	eor	r22, r22
     7e2:	66 1f       	adc	r22, r22
     7e4:	87 e0       	ldi	r24, 0x07	; 7
     7e6:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(data,P6));
     7ea:	c6 fb       	bst	r28, 6
     7ec:	66 27       	eor	r22, r22
     7ee:	60 f9       	bld	r22, 0
     7f0:	86 e0       	ldi	r24, 0x06	; 6
     7f2:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(data,P5));
     7f6:	c5 fb       	bst	r28, 5
     7f8:	66 27       	eor	r22, r22
     7fa:	60 f9       	bld	r22, 0
     7fc:	85 e0       	ldi	r24, 0x05	; 5
     7fe:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(data,P4));
     802:	c4 fb       	bst	r28, 4
     804:	66 27       	eor	r22, r22
     806:	60 f9       	bld	r22, 0
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>

	DIO_writepinn(EN,HIGH);
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
     816:	89 ef       	ldi	r24, 0xF9	; 249
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     820:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
     82a:	89 ef       	ldi	r24, 0xF9	; 249
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     832:	00 c0       	rjmp	.+0      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     834:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(D7,GET_BIT(data,P3));
     836:	c3 fb       	bst	r28, 3
     838:	66 27       	eor	r22, r22
     83a:	60 f9       	bld	r22, 0
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D6,GET_BIT(data,P2));
     842:	c2 fb       	bst	r28, 2
     844:	66 27       	eor	r22, r22
     846:	60 f9       	bld	r22, 0
     848:	86 e0       	ldi	r24, 0x06	; 6
     84a:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D5,GET_BIT(data,P1));
     84e:	c1 fb       	bst	r28, 1
     850:	66 27       	eor	r22, r22
     852:	60 f9       	bld	r22, 0
     854:	85 e0       	ldi	r24, 0x05	; 5
     856:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(D4,GET_BIT(data,P0));
     85a:	6c 2f       	mov	r22, r28
     85c:	61 70       	andi	r22, 0x01	; 1
     85e:	84 e0       	ldi	r24, 0x04	; 4
     860:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
	DIO_writepinn(EN,HIGH);
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
     86c:	89 ef       	ldi	r24, 0xF9	; 249
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <__stack+0x11>
     874:	00 c0       	rjmp	.+0      	; 0x876 <__stack+0x17>
     876:	00 00       	nop
	_delay_ms(1);
	DIO_writepinn(EN,LOW);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
     880:	89 ef       	ldi	r24, 0xF9	; 249
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <__stack+0x25>
     888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
     88a:	00 00       	nop
	_delay_ms(1);
}
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <LCD_WriteChar>:
#endif

//should be send address in ddram befor this function
void LCD_WriteChar(Uchar8_t ch)
{
	WriteData(ch);
     890:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <WriteData>
     894:	08 95       	ret

00000896 <LCD_WriteString>:
}
void LCD_WriteString(Uchar8_t*str)
{
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	8c 01       	movw	r16, r24
	Uchar8_t i;
	for (i=0;str[i];i++)
     89e:	c0 e0       	ldi	r28, 0x00	; 0
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
     8a2:	0e 94 48 04 	call	0x890	; 0x890 <LCD_WriteChar>
	WriteData(ch);
}
void LCD_WriteString(Uchar8_t*str)
{
	Uchar8_t i;
	for (i=0;str[i];i++)
     8a6:	cf 5f       	subi	r28, 0xFF	; 255
     8a8:	f8 01       	movw	r30, r16
     8aa:	ec 0f       	add	r30, r28
     8ac:	f1 1d       	adc	r31, r1
     8ae:	80 81       	ld	r24, Z
     8b0:	81 11       	cpse	r24, r1
     8b2:	f7 cf       	rjmp	.-18     	; 0x8a2 <LCD_WriteString+0xc>
	{
		LCD_WriteChar(str[i]);
	}
	
}
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <LCD_SetCursor>:
void LCD_SetCursor(Uchar8_t line,Uchar8_t cell)
{
	if (line==0)
     8bc:	81 11       	cpse	r24, r1
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <LCD_SetCursor+0xe>
	{
		WriteIns(0x80|cell);
     8c0:	86 2f       	mov	r24, r22
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
     8c8:	08 95       	ret
	}
	else if (line ==1)
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	21 f4       	brne	.+8      	; 0x8d6 <LCD_SetCursor+0x1a>
	{
		WriteIns(0x80+0x40+cell);
     8ce:	80 ec       	ldi	r24, 0xC0	; 192
     8d0:	86 0f       	add	r24, r22
     8d2:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
     8d6:	08 95       	ret

000008d8 <LCD_Clear>:
	}
	
}
void LCD_Clear(void)
{
	WriteIns(CLR_INS);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
     8de:	89 ef       	ldi	r24, 0xF9	; 249
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <LCD_Clear+0xa>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <LCD_Clear+0x10>
     8e8:	00 00       	nop
     8ea:	08 95       	ret

000008ec <LCD_WriteNumber>:
	_delay_ms(1);
}


void LCD_WriteNumber(Sint32_t num)
{
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	2a 97       	sbiw	r28, 0x0a	; 10
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	de bf       	out	0x3e, r29	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	cd bf       	out	0x3d, r28	; 61
     906:	7c 01       	movw	r14, r24
	Uchar8_t str[10],i=0,j;
	if (num==0)
     908:	00 97       	sbiw	r24, 0x00	; 0
     90a:	21 f4       	brne	.+8      	; 0x914 <LCD_WriteNumber+0x28>
	{
		LCD_WriteChar('0');
     90c:	80 e3       	ldi	r24, 0x30	; 48
     90e:	0e 94 48 04 	call	0x890	; 0x890 <LCD_WriteChar>
     912:	2d c0       	rjmp	.+90     	; 0x96e <LCD_WriteNumber+0x82>
		return;
	}
	if (num<0)
     914:	99 23       	and	r25, r25
     916:	34 f4       	brge	.+12     	; 0x924 <LCD_WriteNumber+0x38>
	{
		num=num*(-1);
     918:	f1 94       	neg	r15
     91a:	e1 94       	neg	r14
     91c:	f1 08       	sbc	r15, r1
		LCD_WriteChar('-');
     91e:	8d e2       	ldi	r24, 0x2D	; 45
     920:	0e 94 48 04 	call	0x890	; 0x890 <LCD_WriteChar>
	_delay_ms(1);
}


void LCD_WriteNumber(Sint32_t num)
{
     924:	10 e0       	ldi	r17, 0x00	; 0
     926:	10 c0       	rjmp	.+32     	; 0x948 <LCD_WriteNumber+0x5c>
		LCD_WriteChar('-');
	}
	
	while(num)
	{
		str[i]=num%10 +'0';
     928:	c7 01       	movw	r24, r14
     92a:	6a e0       	ldi	r22, 0x0A	; 10
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__divmodhi4>
     932:	e1 e0       	ldi	r30, 0x01	; 1
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	ec 0f       	add	r30, r28
     938:	fd 1f       	adc	r31, r29
     93a:	e1 0f       	add	r30, r17
     93c:	f1 1d       	adc	r31, r1
     93e:	80 5d       	subi	r24, 0xD0	; 208
     940:	80 83       	st	Z, r24
		i++;
     942:	1f 5f       	subi	r17, 0xFF	; 255
		num=num/10;
     944:	e6 2e       	mov	r14, r22
     946:	f7 2e       	mov	r15, r23
	{
		num=num*(-1);
		LCD_WriteChar('-');
	}
	
	while(num)
     948:	e1 14       	cp	r14, r1
     94a:	f1 04       	cpc	r15, r1
     94c:	69 f7       	brne	.-38     	; 0x928 <LCD_WriteNumber+0x3c>
     94e:	0d c0       	rjmp	.+26     	; 0x96a <LCD_WriteNumber+0x7e>
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
	{
		LCD_WriteChar(str[j-1]);
     950:	e1 2f       	mov	r30, r17
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	8c 0f       	add	r24, r28
     95c:	9d 1f       	adc	r25, r29
     95e:	e8 0f       	add	r30, r24
     960:	f9 1f       	adc	r31, r25
     962:	80 81       	ld	r24, Z
     964:	0e 94 48 04 	call	0x890	; 0x890 <LCD_WriteChar>
	{
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
     968:	11 50       	subi	r17, 0x01	; 1
     96a:	11 11       	cpse	r17, r1
     96c:	f1 cf       	rjmp	.-30     	; 0x950 <LCD_WriteNumber+0x64>
	{
		LCD_WriteChar(str[j-1]);
	}

}
     96e:	2a 96       	adiw	r28, 0x0a	; 10
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	08 95       	ret

00000986 <LCD_PinsInit>:
void LCD_PinsInit ()
{
	DIO_initpinn(RS,OUTPUT);
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
	DIO_initpinn(EN,OUTPUT);
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
	DIO_initpinn(RW,OUTPUT);
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
	DIO_initpinn(D4,OUTPUT);
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	84 e0       	ldi	r24, 0x04	; 4
     9a2:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
	DIO_initpinn(D5,OUTPUT);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	85 e0       	ldi	r24, 0x05	; 5
     9aa:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
	DIO_initpinn(D6,OUTPUT);
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	86 e0       	ldi	r24, 0x06	; 6
     9b2:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
	DIO_initpinn(D7,OUTPUT);
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	87 e0       	ldi	r24, 0x07	; 7
     9ba:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
     9be:	08 95       	ret

000009c0 <LCD_Init>:



void LCD_Init(void)
{
	LCD_PinsInit();
     9c0:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_PinsInit>
     9c4:	87 ea       	ldi	r24, 0xA7	; 167
     9c6:	91 e6       	ldi	r25, 0x61	; 97
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <LCD_Init+0x8>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <LCD_Init+0xe>
     9ce:	00 00       	nop
	_delay_ms(100);
	WriteIns(0x02);
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
	WriteIns(0x28);//5*7 2 lines
     9d6:	88 e2       	ldi	r24, 0x28	; 40
     9d8:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
	WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
     9dc:	8c e0       	ldi	r24, 0x0C	; 12
     9de:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
	WriteIns(0x01);//clear screen
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
     9e8:	89 ef       	ldi	r24, 0xF9	; 249
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <LCD_Init+0x2c>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <LCD_Init+0x32>
     9f2:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);// increment DDRAM address, no shift
     9f4:	86 e0       	ldi	r24, 0x06	; 6
     9f6:	0e 94 88 03 	call	0x710	; 0x710 <WriteIns>
     9fa:	08 95       	ret

000009fc <DCM_motorInit>:
}

/****************************************************************************************************************************************/
void DCM_updateStopFlag(void)
{
	DCM_g_stopFlag = TRUE;
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	b9 f4       	brne	.+46     	; 0xa38 <DCM_motorInit+0x3c>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	1b c0       	rjmp	.+54     	; 0xa44 <DCM_motorInit+0x48>
     a0e:	c1 2f       	mov	r28, r17
     a10:	d0 e0       	ldi	r29, 0x00	; 0
     a12:	ce 01       	movw	r24, r28
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	c8 0f       	add	r28, r24
     a1a:	d9 1f       	adc	r29, r25
     a1c:	ce 0d       	add	r28, r14
     a1e:	df 1d       	adc	r29, r15
     a20:	41 e0       	ldi	r20, 0x01	; 1
     a22:	6a 81       	ldd	r22, Y+2	; 0x02
     a24:	88 81       	ld	r24, Y
     a26:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_InitDCM>
     a2a:	41 e0       	ldi	r20, 0x01	; 1
     a2c:	6a 81       	ldd	r22, Y+2	; 0x02
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_InitDCM>
     a34:	1f 5f       	subi	r17, 0xFF	; 255
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <DCM_motorInit+0x40>
     a38:	7c 01       	movw	r14, r24
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	12 30       	cpi	r17, 0x02	; 2
     a3e:	38 f3       	brcs	.-50     	; 0xa0e <DCM_motorInit+0x12>
     a40:	0e 94 0e 0c 	call	0x181c	; 0x181c <TIMER0_initPWM>
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	08 95       	ret

00000a50 <DCM_changeDCMDirection>:
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	79 f0       	breq	.+30     	; 0xa72 <DCM_changeDCMDirection+0x22>
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	fb 01       	movw	r30, r22
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	6e 0f       	add	r22, r30
     a5e:	7f 1f       	adc	r23, r31
     a60:	fc 01       	movw	r30, r24
     a62:	e6 0f       	add	r30, r22
     a64:	f7 1f       	adc	r31, r23
     a66:	60 81       	ld	r22, Z
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	0e 94 00 07 	call	0xe00	; 0xe00 <DIO_toggle>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	08 95       	ret
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 95       	ret

00000a76 <DCM_vdStopDCM>:
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
     a8a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <TIMER0_stop>
     a8e:	08 95       	ret

00000a90 <DCM_u8SetDutyCycleOfPWM>:
     a90:	85 36       	cpi	r24, 0x65	; 101
     a92:	10 f0       	brcs	.+4      	; 0xa98 <DCM_u8SetDutyCycleOfPWM+0x8>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	08 95       	ret
     a98:	0e 94 2a 0c 	call	0x1854	; 0x1854 <TIMER0_setPwm>
     a9c:	08 95       	ret

00000a9e <DCM_rotateDCM>:
/****************************************************************************************************************************************/
/* you need to specify which motor you want to rotate*/
EN_DCM_ERROR_T DCM_rotateDCM(EN_DCM_MOTORSIDE DCM_l_motorNumber, Uint16_t DCM_a_rotateSpeed)
{
	
	if(DCM_l_motorNumber == MOTOR_RIGHT)
     a9e:	81 11       	cpse	r24, r1
     aa0:	1a c0       	rjmp	.+52     	; 0xad6 <DCM_rotateDCM+0x38>
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	81 e6       	ldi	r24, 0x61	; 97
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 28 05 	call	0xa50	; 0xa50 <DCM_changeDCMDirection>
		// High delay to see it on simulation
		TMR_intDelay_ms(620);
     aac:	8c e6       	ldi	r24, 0x6C	; 108
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	0e 94 48 05 	call	0xa90	; 0xa90 <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     aba:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     abe:	88 23       	and	r24, r24
     ac0:	e1 f3       	breq	.-8      	; 0xaba <DCM_rotateDCM+0x1c>
		TIMER0_stop();
     ac2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <TIMER0_stop>
		u8_g_timeOut = 0;
     ac6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_RIGHT);	
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	81 e6       	ldi	r24, 0x61	; 97
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 28 05 	call	0xa50	; 0xa50 <DCM_changeDCMDirection>
     ad4:	08 95       	ret
	}
	else
	{
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	81 e6       	ldi	r24, 0x61	; 97
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 28 05 	call	0xa50	; 0xa50 <DCM_changeDCMDirection>
		TMR_intDelay_ms(620);
     ae0:	8c e6       	ldi	r24, 0x6C	; 108
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TMR_intDelay_ms>
		DCM_u8SetDutyCycleOfPWM(ROTATION_DUTY_CYCLE);
     ae8:	82 e3       	ldi	r24, 0x32	; 50
     aea:	0e 94 48 05 	call	0xa90	; 0xa90 <DCM_u8SetDutyCycleOfPWM>
		while(u8_g_timeOut == 0);
     aee:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <u8_g_timeOut>
     af2:	88 23       	and	r24, r24
     af4:	e1 f3       	breq	.-8      	; 0xaee <DCM_rotateDCM+0x50>
		TIMER0_stop();
     af6:	0e 94 0a 0c 	call	0x1814	; 0x1814 <TIMER0_stop>
		u8_g_timeOut = 0;
     afa:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u8_g_timeOut>
		DCM_changeDCMDirection(ST_g_carMotors, MOTOR_LEFT);		
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	81 e6       	ldi	r24, 0x61	; 97
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 28 05 	call	0xa50	; 0xa50 <DCM_changeDCMDirection>
	}

}
     b08:	08 95       	ret

00000b0a <DCM_MoveForward>:

/****************************************************************************************************************************************/

void DCM_MoveForward(Uchar8_t u8_a_speed)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     b0e:	0e 94 48 05 	call	0xa90	; 0xa90 <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_HIGH);
     b12:	c1 e6       	ldi	r28, 0x61	; 97
     b14:	d0 e0       	ldi	r29, 0x00	; 0
     b16:	68 81       	ld	r22, Y
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_LOW);
     b20:	69 81       	ldd	r22, Y+1	; 0x01
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_HIGH);
     b2a:	6b 81       	ldd	r22, Y+3	; 0x03
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	8d 81       	ldd	r24, Y+5	; 0x05
     b30:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_LOW);
     b34:	6c 81       	ldd	r22, Y+4	; 0x04
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	8d 81       	ldd	r24, Y+5	; 0x05
     b3a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <DCM_MoveBackward>:


void DCM_MoveBackward(Uchar8_t u8_a_speed)
{
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
	DCM_u8SetDutyCycleOfPWM(u8_a_speed);
     b48:	0e 94 48 05 	call	0xa90	; 0xa90 <DCM_u8SetDutyCycleOfPWM>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber0,DIO_LOW);
     b4c:	c1 e6       	ldi	r28, 0x61	; 97
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
     b50:	68 81       	ld	r22, Y
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[0].DCM_g_motEnPortNumber,ST_g_carMotors[0].DCM_g_motEnPinNumber1,DIO_HIGH);
     b5a:	69 81       	ldd	r22, Y+1	; 0x01
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber0,DIO_LOW);
     b64:	6b 81       	ldd	r22, Y+3	; 0x03
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	8d 81       	ldd	r24, Y+5	; 0x05
     b6a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	DIO_WritePin(ST_g_carMotors[1].DCM_g_motEnPortNumber,ST_g_carMotors[1].DCM_g_motEnPinNumber1,DIO_HIGH);
     b6e:	6c 81       	ldd	r22, Y+4	; 0x04
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <PUSH_BTN_intialize>:

extern const ST_PUSH_BTN_t A_pbConfig[NUMBER_OF_PUSH_BUTTONS];

void PUSH_BTN_intialize()
{
	DIO_initpinn(PINC4,INPULL);
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	84 e1       	ldi	r24, 0x14	; 20
     b82:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
     b86:	08 95       	ret

00000b88 <PUSH_BTN_read_state>:
}

void PUSH_BTN_read_state(Uchar8_t btnNumber, EN_PUSH_BTN_state_t *btn_state)
{
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	1f 92       	push	r1
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	7b 01       	movw	r14, r22

		EN_dio_value_t pin_logic_status = DIO_LOW;
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	99 83       	std	Y+1, r25	; 0x01
		DIO_read(A_pbConfig[btnNumber].PUSH_BTN_pin.dio_port,A_pbConfig[btnNumber].PUSH_BTN_pin.dio_pin,&pin_logic_status);
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	8c 01       	movw	r16, r24
     ba4:	00 0f       	add	r16, r16
     ba6:	11 1f       	adc	r17, r17
     ba8:	00 0f       	add	r16, r16
     baa:	11 1f       	adc	r17, r17
     bac:	00 0f       	add	r16, r16
     bae:	11 1f       	adc	r17, r17
     bb0:	08 1b       	sub	r16, r24
     bb2:	19 0b       	sbc	r17, r25
     bb4:	0a 50       	subi	r16, 0x0A	; 10
     bb6:	1f 4f       	sbci	r17, 0xFF	; 255
     bb8:	ae 01       	movw	r20, r28
     bba:	4f 5f       	subi	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	f8 01       	movw	r30, r16
     bc0:	61 81       	ldd	r22, Z+1	; 0x01
     bc2:	80 81       	ld	r24, Z
     bc4:	0e 94 cc 06 	call	0xd98	; 0xd98 <DIO_read>
		
		if(PUSH_BTN_PULL_UP == A_pbConfig[btnNumber].PUSH_BTN_connection)
     bc8:	f8 01       	movw	r30, r16
     bca:	86 81       	ldd	r24, Z+6	; 0x06
     bcc:	81 11       	cpse	r24, r1
     bce:	0a c0       	rjmp	.+20     	; 0xbe4 <PUSH_BTN_read_state+0x5c>
		{
			if(DIO_HIGH == pin_logic_status)
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	81 11       	cpse	r24, r1
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <PUSH_BTN_read_state+0x56>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	f7 01       	movw	r30, r14
     bda:	80 83       	st	Z, r24
     bdc:	0e c0       	rjmp	.+28     	; 0xbfa <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     bde:	f7 01       	movw	r30, r14
     be0:	10 82       	st	Z, r1
     be2:	0b c0       	rjmp	.+22     	; 0xbfa <PUSH_BTN_read_state+0x72>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == A_pbConfig[btnNumber].PUSH_BTN_connection)
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	49 f4       	brne	.+18     	; 0xbfa <PUSH_BTN_read_state+0x72>
		{
			if(DIO_HIGH == pin_logic_status)
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	81 11       	cpse	r24, r1
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <PUSH_BTN_read_state+0x6c>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     bee:	f7 01       	movw	r30, r14
     bf0:	10 82       	st	Z, r1
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <PUSH_BTN_read_state+0x72>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	f7 01       	movw	r30, r14
     bf8:	80 83       	st	Z, r24
			}
		}
}
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	08 95       	ret

00000c0a <ultrasonic_vInit>:

void ultrasonic_vInit()
{
	
	
	DIO_Initpin(&(ultra.triggerpin));
     c0a:	87 e6       	ldi	r24, 0x67	; 103
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_Initpin>
	MCU_vEnableInterrupt();
     c12:	0e 94 ca 0b 	call	0x1794	; 0x1794 <MCU_vEnableInterrupt>
     c16:	08 95       	ret

00000c18 <ultrasonic_vGetDistance>:
}

void ultrasonic_vGetDistance(float64_t *Copy_f64distance)
{
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <ultrasonic_vGetDistance+0xa>
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	8c 01       	movw	r16, r24
	
	
	Uint32_t val = 0;
     c28:	1a 82       	std	Y+2, r1	; 0x02
     c2a:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_HIGH);
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	63 e0       	ldi	r22, 0x03	; 3
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
     c36:	83 ec       	ldi	r24, 0xC3	; 195
     c38:	99 e0       	ldi	r25, 0x09	; 9
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <ultrasonic_vGetDistance+0x22>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <ultrasonic_vGetDistance+0x28>
     c40:	00 00       	nop

	_delay_ms(10);
	
	DIO_WritePin(DIO_PORTB,DIO_PIN3,DIO_LOW);
     c42:	41 e0       	ldi	r20, 0x01	; 1
     c44:	63 e0       	ldi	r22, 0x03	; 3
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DIO_WritePin>
	ICU_RisingEdgeCapture();
     c4c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <ICU_RisingEdgeCapture>

	
	while(ICU_g_flag != 1);
     c50:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ICU_g_flag>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	e1 f7       	brne	.-8      	; 0xc50 <ultrasonic_vGetDistance+0x38>
	ICU_getValue(&val);
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	0e 94 a5 0a 	call	0x154a	; 0x154a <ICU_getValue>

	*Copy_f64distance = ((float)val / 466.47*8)+1;	
     c60:	69 81       	ldd	r22, Y+1	; 0x01
     c62:	7a 81       	ldd	r23, Y+2	; 0x02
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__floatunsisf>
     c6c:	29 e2       	ldi	r18, 0x29	; 41
     c6e:	3c e3       	ldi	r19, 0x3C	; 60
     c70:	49 ee       	ldi	r20, 0xE9	; 233
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divsf3>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	51 e4       	ldi	r21, 0x41	; 65
     c80:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e8       	ldi	r20, 0x80	; 128
     c8a:	5f e3       	ldi	r21, 0x3F	; 63
     c8c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     c90:	f8 01       	movw	r30, r16
     c92:	60 83       	st	Z, r22
     c94:	71 83       	std	Z+1, r23	; 0x01
     c96:	82 83       	std	Z+2, r24	; 0x02
     c98:	93 83       	std	Z+3, r25	; 0x03
	ICU_g_flag = 0;
     c9a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ICU_g_flag>
}
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <main>:

#include "APPLICATION/app/apph.h"

void main(void)
{
	app_init();
     cac:	0e 94 51 00 	call	0xa2	; 0xa2 <app_init>
	while(1)
	{
	app_main();
     cb0:	0e 94 61 00 	call	0xc2	; 0xc2 <app_main>
     cb4:	fd cf       	rjmp	.-6      	; 0xcb0 <main+0x4>

00000cb6 <DIO_WritePin>:
			break;
			case PC:
			TOGGLE_BIT(DIO_PORTC_PORT_REG,pin_num);
			break;
			case PD:
			TOGGLE_BIT(DIO_PORTD_PORT_REG,pin_num);
     cb6:	44 23       	and	r20, r20
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <DIO_WritePin+0xa>
     cba:	41 30       	cpi	r20, 0x01	; 1
     cbc:	a9 f1       	breq	.+106    	; 0xd28 <DIO_WritePin+0x72>
     cbe:	08 95       	ret
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	89 f0       	breq	.+34     	; 0xce6 <DIO_WritePin+0x30>
     cc4:	28 f0       	brcs	.+10     	; 0xcd0 <DIO_WritePin+0x1a>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	c9 f0       	breq	.+50     	; 0xcfc <DIO_WritePin+0x46>
     cca:	83 30       	cpi	r24, 0x03	; 3
     ccc:	11 f1       	breq	.+68     	; 0xd12 <DIO_WritePin+0x5c>
     cce:	08 95       	ret
     cd0:	2b b3       	in	r18, 0x1b	; 27
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_WritePin+0x26>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	6a 95       	dec	r22
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_WritePin+0x22>
     ce0:	82 2b       	or	r24, r18
     ce2:	8b bb       	out	0x1b, r24	; 27
     ce4:	08 95       	ret
     ce6:	28 b3       	in	r18, 0x18	; 24
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_WritePin+0x3c>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	6a 95       	dec	r22
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_WritePin+0x38>
     cf6:	82 2b       	or	r24, r18
     cf8:	88 bb       	out	0x18, r24	; 24
     cfa:	08 95       	ret
     cfc:	25 b3       	in	r18, 0x15	; 21
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_WritePin+0x52>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	6a 95       	dec	r22
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_WritePin+0x4e>
     d0c:	82 2b       	or	r24, r18
     d0e:	85 bb       	out	0x15, r24	; 21
     d10:	08 95       	ret
     d12:	22 b3       	in	r18, 0x12	; 18
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_WritePin+0x68>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	6a 95       	dec	r22
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_WritePin+0x64>
     d22:	82 2b       	or	r24, r18
     d24:	82 bb       	out	0x12, r24	; 18
     d26:	08 95       	ret
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 f0       	breq	.+36     	; 0xd50 <DIO_WritePin+0x9a>
     d2c:	28 f0       	brcs	.+10     	; 0xd38 <DIO_WritePin+0x82>
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	d9 f0       	breq	.+54     	; 0xd68 <DIO_WritePin+0xb2>
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	29 f1       	breq	.+74     	; 0xd80 <DIO_WritePin+0xca>
     d36:	08 95       	ret
     d38:	2b b3       	in	r18, 0x1b	; 27
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_WritePin+0x8e>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	6a 95       	dec	r22
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_WritePin+0x8a>
     d48:	80 95       	com	r24
     d4a:	82 23       	and	r24, r18
     d4c:	8b bb       	out	0x1b, r24	; 27
     d4e:	08 95       	ret
     d50:	28 b3       	in	r18, 0x18	; 24
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_WritePin+0xa6>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	6a 95       	dec	r22
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_WritePin+0xa2>
     d60:	80 95       	com	r24
     d62:	82 23       	and	r24, r18
     d64:	88 bb       	out	0x18, r24	; 24
     d66:	08 95       	ret
     d68:	25 b3       	in	r18, 0x15	; 21
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_WritePin+0xbe>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	6a 95       	dec	r22
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_WritePin+0xba>
     d78:	80 95       	com	r24
     d7a:	82 23       	and	r24, r18
     d7c:	85 bb       	out	0x15, r24	; 21
     d7e:	08 95       	ret
     d80:	22 b3       	in	r18, 0x12	; 18
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_WritePin+0xd6>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	6a 95       	dec	r22
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_WritePin+0xd2>
     d90:	80 95       	com	r24
     d92:	82 23       	and	r24, r18
     d94:	82 bb       	out	0x12, r24	; 18
     d96:	08 95       	ret

00000d98 <DIO_read>:
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	89 f0       	breq	.+34     	; 0xdbe <DIO_read+0x26>
     d9c:	28 f0       	brcs	.+10     	; 0xda8 <DIO_read+0x10>
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	c9 f0       	breq	.+50     	; 0xdd4 <DIO_read+0x3c>
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	11 f1       	breq	.+68     	; 0xdea <DIO_read+0x52>
     da6:	08 95       	ret
     da8:	89 b3       	in	r24, 0x19	; 25
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_read+0x1a>
     dae:	95 95       	asr	r25
     db0:	87 95       	ror	r24
     db2:	6a 95       	dec	r22
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_read+0x16>
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	fa 01       	movw	r30, r20
     dba:	80 83       	st	Z, r24
     dbc:	08 95       	ret
     dbe:	86 b3       	in	r24, 0x16	; 22
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_read+0x30>
     dc4:	95 95       	asr	r25
     dc6:	87 95       	ror	r24
     dc8:	6a 95       	dec	r22
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_read+0x2c>
     dcc:	81 70       	andi	r24, 0x01	; 1
     dce:	fa 01       	movw	r30, r20
     dd0:	80 83       	st	Z, r24
     dd2:	08 95       	ret
     dd4:	83 b3       	in	r24, 0x13	; 19
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_read+0x46>
     dda:	95 95       	asr	r25
     ddc:	87 95       	ror	r24
     dde:	6a 95       	dec	r22
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_read+0x42>
     de2:	81 70       	andi	r24, 0x01	; 1
     de4:	fa 01       	movw	r30, r20
     de6:	80 83       	st	Z, r24
     de8:	08 95       	ret
     dea:	80 b3       	in	r24, 0x10	; 16
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_read+0x5c>
     df0:	95 95       	asr	r25
     df2:	87 95       	ror	r24
     df4:	6a 95       	dec	r22
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_read+0x58>
     df8:	81 70       	andi	r24, 0x01	; 1
     dfa:	fa 01       	movw	r30, r20
     dfc:	80 83       	st	Z, r24
     dfe:	08 95       	ret

00000e00 <DIO_toggle>:
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	89 f0       	breq	.+34     	; 0xe26 <DIO_toggle+0x26>
     e04:	28 f0       	brcs	.+10     	; 0xe10 <DIO_toggle+0x10>
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	c9 f0       	breq	.+50     	; 0xe3c <DIO_toggle+0x3c>
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	11 f1       	breq	.+68     	; 0xe52 <DIO_toggle+0x52>
     e0e:	08 95       	ret
     e10:	2b b3       	in	r18, 0x1b	; 27
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_toggle+0x1c>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	6a 95       	dec	r22
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_toggle+0x18>
     e20:	82 27       	eor	r24, r18
     e22:	8b bb       	out	0x1b, r24	; 27
     e24:	08 95       	ret
     e26:	28 b3       	in	r18, 0x18	; 24
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_toggle+0x32>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	6a 95       	dec	r22
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_toggle+0x2e>
     e36:	82 27       	eor	r24, r18
     e38:	88 bb       	out	0x18, r24	; 24
     e3a:	08 95       	ret
     e3c:	25 b3       	in	r18, 0x15	; 21
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_toggle+0x48>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	6a 95       	dec	r22
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_toggle+0x44>
     e4c:	82 27       	eor	r24, r18
     e4e:	85 bb       	out	0x15, r24	; 21
     e50:	08 95       	ret
     e52:	22 b3       	in	r18, 0x12	; 18
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_toggle+0x5e>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	6a 95       	dec	r22
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_toggle+0x5a>
     e62:	82 27       	eor	r24, r18
     e64:	82 bb       	out	0x12, r24	; 18
     e66:	08 95       	ret

00000e68 <DIO_Initpin>:
     e68:	fc 01       	movw	r30, r24
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	81 11       	cpse	r24, r1
     e6e:	b5 c0       	rjmp	.+362    	; 0xfda <DIO_Initpin+0x172>
     e70:	80 81       	ld	r24, Z
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	99 f0       	breq	.+38     	; 0xe9c <DIO_Initpin+0x34>
     e76:	28 f0       	brcs	.+10     	; 0xe82 <DIO_Initpin+0x1a>
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	e9 f0       	breq	.+58     	; 0xeb6 <DIO_Initpin+0x4e>
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	41 f1       	breq	.+80     	; 0xed0 <DIO_Initpin+0x68>
     e80:	33 c0       	rjmp	.+102    	; 0xee8 <DIO_Initpin+0x80>
     e82:	2a b3       	in	r18, 0x1a	; 26
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	01 80       	ldd	r0, Z+1	; 0x01
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_Initpin+0x28>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_Initpin+0x24>
     e94:	80 95       	com	r24
     e96:	82 23       	and	r24, r18
     e98:	8a bb       	out	0x1a, r24	; 26
     e9a:	26 c0       	rjmp	.+76     	; 0xee8 <DIO_Initpin+0x80>
     e9c:	27 b3       	in	r18, 0x17	; 23
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	01 80       	ldd	r0, Z+1	; 0x01
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_Initpin+0x42>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_Initpin+0x3e>
     eae:	80 95       	com	r24
     eb0:	82 23       	and	r24, r18
     eb2:	87 bb       	out	0x17, r24	; 23
     eb4:	19 c0       	rjmp	.+50     	; 0xee8 <DIO_Initpin+0x80>
     eb6:	24 b3       	in	r18, 0x14	; 20
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	01 80       	ldd	r0, Z+1	; 0x01
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_Initpin+0x5c>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_Initpin+0x58>
     ec8:	80 95       	com	r24
     eca:	82 23       	and	r24, r18
     ecc:	84 bb       	out	0x14, r24	; 20
     ece:	0c c0       	rjmp	.+24     	; 0xee8 <DIO_Initpin+0x80>
     ed0:	21 b3       	in	r18, 0x11	; 17
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	01 80       	ldd	r0, Z+1	; 0x01
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_Initpin+0x76>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_Initpin+0x72>
     ee2:	80 95       	com	r24
     ee4:	82 23       	and	r24, r18
     ee6:	81 bb       	out	0x11, r24	; 17
     ee8:	83 81       	ldd	r24, Z+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	c9 f5       	brne	.+114    	; 0xf60 <DIO_Initpin+0xf8>
     eee:	80 81       	ld	r24, Z
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	91 f0       	breq	.+36     	; 0xf18 <DIO_Initpin+0xb0>
     ef4:	28 f0       	brcs	.+10     	; 0xf00 <DIO_Initpin+0x98>
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	d9 f0       	breq	.+54     	; 0xf30 <DIO_Initpin+0xc8>
     efa:	83 30       	cpi	r24, 0x03	; 3
     efc:	29 f1       	breq	.+74     	; 0xf48 <DIO_Initpin+0xe0>
     efe:	08 95       	ret
     f00:	2b b3       	in	r18, 0x1b	; 27
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	01 80       	ldd	r0, Z+1	; 0x01
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_Initpin+0xa6>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_Initpin+0xa2>
     f12:	82 2b       	or	r24, r18
     f14:	8b bb       	out	0x1b, r24	; 27
     f16:	08 95       	ret
     f18:	28 b3       	in	r18, 0x18	; 24
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	01 80       	ldd	r0, Z+1	; 0x01
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_Initpin+0xbe>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_Initpin+0xba>
     f2a:	82 2b       	or	r24, r18
     f2c:	88 bb       	out	0x18, r24	; 24
     f2e:	08 95       	ret
     f30:	25 b3       	in	r18, 0x15	; 21
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	01 80       	ldd	r0, Z+1	; 0x01
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_Initpin+0xd6>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_Initpin+0xd2>
     f42:	82 2b       	or	r24, r18
     f44:	85 bb       	out	0x15, r24	; 21
     f46:	08 95       	ret
     f48:	22 b3       	in	r18, 0x12	; 18
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	01 80       	ldd	r0, Z+1	; 0x01
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_Initpin+0xee>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_Initpin+0xea>
     f5a:	82 2b       	or	r24, r18
     f5c:	82 bb       	out	0x12, r24	; 18
     f5e:	08 95       	ret
     f60:	80 81       	ld	r24, Z
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	99 f0       	breq	.+38     	; 0xf8c <DIO_Initpin+0x124>
     f66:	28 f0       	brcs	.+10     	; 0xf72 <DIO_Initpin+0x10a>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	e9 f0       	breq	.+58     	; 0xfa6 <DIO_Initpin+0x13e>
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	41 f1       	breq	.+80     	; 0xfc0 <DIO_Initpin+0x158>
     f70:	08 95       	ret
     f72:	2b b3       	in	r18, 0x1b	; 27
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	01 80       	ldd	r0, Z+1	; 0x01
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_Initpin+0x118>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_Initpin+0x114>
     f84:	80 95       	com	r24
     f86:	82 23       	and	r24, r18
     f88:	8b bb       	out	0x1b, r24	; 27
     f8a:	08 95       	ret
     f8c:	28 b3       	in	r18, 0x18	; 24
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	01 80       	ldd	r0, Z+1	; 0x01
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_Initpin+0x132>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_Initpin+0x12e>
     f9e:	80 95       	com	r24
     fa0:	82 23       	and	r24, r18
     fa2:	88 bb       	out	0x18, r24	; 24
     fa4:	08 95       	ret
     fa6:	25 b3       	in	r18, 0x15	; 21
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	01 80       	ldd	r0, Z+1	; 0x01
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_Initpin+0x14c>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_Initpin+0x148>
     fb8:	80 95       	com	r24
     fba:	82 23       	and	r24, r18
     fbc:	85 bb       	out	0x15, r24	; 21
     fbe:	08 95       	ret
     fc0:	22 b3       	in	r18, 0x12	; 18
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	01 80       	ldd	r0, Z+1	; 0x01
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_Initpin+0x166>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_Initpin+0x162>
     fd2:	80 95       	com	r24
     fd4:	82 23       	and	r24, r18
     fd6:	82 bb       	out	0x12, r24	; 18
     fd8:	08 95       	ret
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <DIO_Initpin+0x178>
     fde:	b0 c0       	rjmp	.+352    	; 0x1140 <DIO_Initpin+0x2d8>
     fe0:	80 81       	ld	r24, Z
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 f0       	breq	.+36     	; 0x100a <DIO_Initpin+0x1a2>
     fe6:	28 f0       	brcs	.+10     	; 0xff2 <DIO_Initpin+0x18a>
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	d9 f0       	breq	.+54     	; 0x1022 <DIO_Initpin+0x1ba>
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	29 f1       	breq	.+74     	; 0x103a <DIO_Initpin+0x1d2>
     ff0:	2f c0       	rjmp	.+94     	; 0x1050 <DIO_Initpin+0x1e8>
     ff2:	2a b3       	in	r18, 0x1a	; 26
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	01 80       	ldd	r0, Z+1	; 0x01
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_Initpin+0x198>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_Initpin+0x194>
    1004:	82 2b       	or	r24, r18
    1006:	8a bb       	out	0x1a, r24	; 26
    1008:	23 c0       	rjmp	.+70     	; 0x1050 <DIO_Initpin+0x1e8>
    100a:	27 b3       	in	r18, 0x17	; 23
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	01 80       	ldd	r0, Z+1	; 0x01
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_Initpin+0x1b0>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_Initpin+0x1ac>
    101c:	82 2b       	or	r24, r18
    101e:	87 bb       	out	0x17, r24	; 23
    1020:	17 c0       	rjmp	.+46     	; 0x1050 <DIO_Initpin+0x1e8>
    1022:	24 b3       	in	r18, 0x14	; 20
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	01 80       	ldd	r0, Z+1	; 0x01
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_Initpin+0x1c8>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_Initpin+0x1c4>
    1034:	82 2b       	or	r24, r18
    1036:	84 bb       	out	0x14, r24	; 20
    1038:	0b c0       	rjmp	.+22     	; 0x1050 <DIO_Initpin+0x1e8>
    103a:	21 b3       	in	r18, 0x11	; 17
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	01 80       	ldd	r0, Z+1	; 0x01
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_Initpin+0x1e0>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_Initpin+0x1dc>
    104c:	82 2b       	or	r24, r18
    104e:	81 bb       	out	0x11, r24	; 17
    1050:	83 81       	ldd	r24, Z+3	; 0x03
    1052:	81 11       	cpse	r24, r1
    1054:	39 c0       	rjmp	.+114    	; 0x10c8 <DIO_Initpin+0x260>
    1056:	80 81       	ld	r24, Z
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 f0       	breq	.+36     	; 0x1080 <DIO_Initpin+0x218>
    105c:	28 f0       	brcs	.+10     	; 0x1068 <DIO_Initpin+0x200>
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	d9 f0       	breq	.+54     	; 0x1098 <DIO_Initpin+0x230>
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	29 f1       	breq	.+74     	; 0x10b0 <DIO_Initpin+0x248>
    1066:	08 95       	ret
    1068:	2b b3       	in	r18, 0x1b	; 27
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	01 80       	ldd	r0, Z+1	; 0x01
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_Initpin+0x20e>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_Initpin+0x20a>
    107a:	82 2b       	or	r24, r18
    107c:	8b bb       	out	0x1b, r24	; 27
    107e:	08 95       	ret
    1080:	28 b3       	in	r18, 0x18	; 24
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	01 80       	ldd	r0, Z+1	; 0x01
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_Initpin+0x226>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_Initpin+0x222>
    1092:	82 2b       	or	r24, r18
    1094:	88 bb       	out	0x18, r24	; 24
    1096:	08 95       	ret
    1098:	25 b3       	in	r18, 0x15	; 21
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	01 80       	ldd	r0, Z+1	; 0x01
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_Initpin+0x23e>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_Initpin+0x23a>
    10aa:	82 2b       	or	r24, r18
    10ac:	85 bb       	out	0x15, r24	; 21
    10ae:	08 95       	ret
    10b0:	22 b3       	in	r18, 0x12	; 18
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	01 80       	ldd	r0, Z+1	; 0x01
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_Initpin+0x256>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_Initpin+0x252>
    10c2:	82 2b       	or	r24, r18
    10c4:	82 bb       	out	0x12, r24	; 18
    10c6:	08 95       	ret
    10c8:	80 81       	ld	r24, Z
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	99 f0       	breq	.+38     	; 0x10f4 <DIO_Initpin+0x28c>
    10ce:	28 f0       	brcs	.+10     	; 0x10da <DIO_Initpin+0x272>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	e9 f0       	breq	.+58     	; 0x110e <DIO_Initpin+0x2a6>
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	41 f1       	breq	.+80     	; 0x1128 <DIO_Initpin+0x2c0>
    10d8:	08 95       	ret
    10da:	2b b3       	in	r18, 0x1b	; 27
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	01 80       	ldd	r0, Z+1	; 0x01
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_Initpin+0x280>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_Initpin+0x27c>
    10ec:	80 95       	com	r24
    10ee:	82 23       	and	r24, r18
    10f0:	8b bb       	out	0x1b, r24	; 27
    10f2:	08 95       	ret
    10f4:	28 b3       	in	r18, 0x18	; 24
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	01 80       	ldd	r0, Z+1	; 0x01
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_Initpin+0x29a>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_Initpin+0x296>
    1106:	80 95       	com	r24
    1108:	82 23       	and	r24, r18
    110a:	88 bb       	out	0x18, r24	; 24
    110c:	08 95       	ret
    110e:	25 b3       	in	r18, 0x15	; 21
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	01 80       	ldd	r0, Z+1	; 0x01
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_Initpin+0x2b4>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_Initpin+0x2b0>
    1120:	80 95       	com	r24
    1122:	82 23       	and	r24, r18
    1124:	85 bb       	out	0x15, r24	; 21
    1126:	08 95       	ret
    1128:	22 b3       	in	r18, 0x12	; 18
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	01 80       	ldd	r0, Z+1	; 0x01
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_Initpin+0x2ce>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_Initpin+0x2ca>
    113a:	80 95       	com	r24
    113c:	82 23       	and	r24, r18
    113e:	82 bb       	out	0x12, r24	; 18
    1140:	08 95       	ret

00001142 <DIO_initpinn>:
    1142:	98 2f       	mov	r25, r24
    1144:	96 95       	lsr	r25
    1146:	96 95       	lsr	r25
    1148:	96 95       	lsr	r25
    114a:	87 70       	andi	r24, 0x07	; 7
    114c:	61 30       	cpi	r22, 0x01	; 1
    114e:	09 f4       	brne	.+2      	; 0x1152 <DIO_initpinn+0x10>
    1150:	55 c0       	rjmp	.+170    	; 0x11fc <DIO_initpinn+0xba>
    1152:	20 f0       	brcs	.+8      	; 0x115c <DIO_initpinn+0x1a>
    1154:	62 30       	cpi	r22, 0x02	; 2
    1156:	09 f4       	brne	.+2      	; 0x115a <DIO_initpinn+0x18>
    1158:	a1 c0       	rjmp	.+322    	; 0x129c <DIO_initpinn+0x15a>
    115a:	08 95       	ret
    115c:	91 30       	cpi	r25, 0x01	; 1
    115e:	c1 f0       	breq	.+48     	; 0x1190 <DIO_initpinn+0x4e>
    1160:	28 f0       	brcs	.+10     	; 0x116c <DIO_initpinn+0x2a>
    1162:	92 30       	cpi	r25, 0x02	; 2
    1164:	39 f1       	breq	.+78     	; 0x11b4 <DIO_initpinn+0x72>
    1166:	93 30       	cpi	r25, 0x03	; 3
    1168:	b9 f1       	breq	.+110    	; 0x11d8 <DIO_initpinn+0x96>
    116a:	08 95       	ret
    116c:	4a b3       	in	r20, 0x1a	; 26
    116e:	21 e0       	ldi	r18, 0x01	; 1
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	b9 01       	movw	r22, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_initpinn+0x38>
    1176:	66 0f       	add	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_initpinn+0x34>
    117e:	cb 01       	movw	r24, r22
    1180:	94 2f       	mov	r25, r20
    1182:	98 2b       	or	r25, r24
    1184:	9a bb       	out	0x1a, r25	; 26
    1186:	9b b3       	in	r25, 0x1b	; 27
    1188:	80 95       	com	r24
    118a:	89 23       	and	r24, r25
    118c:	8b bb       	out	0x1b, r24	; 27
    118e:	08 95       	ret
    1190:	47 b3       	in	r20, 0x17	; 23
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	b9 01       	movw	r22, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_initpinn+0x5c>
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	8a 95       	dec	r24
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_initpinn+0x58>
    11a2:	cb 01       	movw	r24, r22
    11a4:	94 2f       	mov	r25, r20
    11a6:	98 2b       	or	r25, r24
    11a8:	97 bb       	out	0x17, r25	; 23
    11aa:	98 b3       	in	r25, 0x18	; 24
    11ac:	80 95       	com	r24
    11ae:	89 23       	and	r24, r25
    11b0:	88 bb       	out	0x18, r24	; 24
    11b2:	08 95       	ret
    11b4:	44 b3       	in	r20, 0x14	; 20
    11b6:	21 e0       	ldi	r18, 0x01	; 1
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	b9 01       	movw	r22, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_initpinn+0x80>
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_initpinn+0x7c>
    11c6:	cb 01       	movw	r24, r22
    11c8:	94 2f       	mov	r25, r20
    11ca:	98 2b       	or	r25, r24
    11cc:	94 bb       	out	0x14, r25	; 20
    11ce:	95 b3       	in	r25, 0x15	; 21
    11d0:	80 95       	com	r24
    11d2:	89 23       	and	r24, r25
    11d4:	85 bb       	out	0x15, r24	; 21
    11d6:	08 95       	ret
    11d8:	41 b3       	in	r20, 0x11	; 17
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	b9 01       	movw	r22, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_initpinn+0xa4>
    11e2:	66 0f       	add	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	8a 95       	dec	r24
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_initpinn+0xa0>
    11ea:	cb 01       	movw	r24, r22
    11ec:	94 2f       	mov	r25, r20
    11ee:	98 2b       	or	r25, r24
    11f0:	91 bb       	out	0x11, r25	; 17
    11f2:	92 b3       	in	r25, 0x12	; 18
    11f4:	80 95       	com	r24
    11f6:	89 23       	and	r24, r25
    11f8:	82 bb       	out	0x12, r24	; 18
    11fa:	08 95       	ret
    11fc:	91 30       	cpi	r25, 0x01	; 1
    11fe:	c1 f0       	breq	.+48     	; 0x1230 <DIO_initpinn+0xee>
    1200:	28 f0       	brcs	.+10     	; 0x120c <DIO_initpinn+0xca>
    1202:	92 30       	cpi	r25, 0x02	; 2
    1204:	39 f1       	breq	.+78     	; 0x1254 <DIO_initpinn+0x112>
    1206:	93 30       	cpi	r25, 0x03	; 3
    1208:	b9 f1       	breq	.+110    	; 0x1278 <DIO_initpinn+0x136>
    120a:	08 95       	ret
    120c:	4a b3       	in	r20, 0x1a	; 26
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	b9 01       	movw	r22, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_initpinn+0xd8>
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	8a 95       	dec	r24
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_initpinn+0xd4>
    121e:	cb 01       	movw	r24, r22
    1220:	80 95       	com	r24
    1222:	94 2f       	mov	r25, r20
    1224:	98 23       	and	r25, r24
    1226:	9a bb       	out	0x1a, r25	; 26
    1228:	9b b3       	in	r25, 0x1b	; 27
    122a:	89 23       	and	r24, r25
    122c:	8b bb       	out	0x1b, r24	; 27
    122e:	08 95       	ret
    1230:	47 b3       	in	r20, 0x17	; 23
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_initpinn+0xfc>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_initpinn+0xf8>
    1242:	cb 01       	movw	r24, r22
    1244:	80 95       	com	r24
    1246:	94 2f       	mov	r25, r20
    1248:	98 23       	and	r25, r24
    124a:	97 bb       	out	0x17, r25	; 23
    124c:	98 b3       	in	r25, 0x18	; 24
    124e:	89 23       	and	r24, r25
    1250:	88 bb       	out	0x18, r24	; 24
    1252:	08 95       	ret
    1254:	44 b3       	in	r20, 0x14	; 20
    1256:	21 e0       	ldi	r18, 0x01	; 1
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	b9 01       	movw	r22, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_initpinn+0x120>
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_initpinn+0x11c>
    1266:	cb 01       	movw	r24, r22
    1268:	80 95       	com	r24
    126a:	94 2f       	mov	r25, r20
    126c:	98 23       	and	r25, r24
    126e:	94 bb       	out	0x14, r25	; 20
    1270:	95 b3       	in	r25, 0x15	; 21
    1272:	89 23       	and	r24, r25
    1274:	85 bb       	out	0x15, r24	; 21
    1276:	08 95       	ret
    1278:	41 b3       	in	r20, 0x11	; 17
    127a:	21 e0       	ldi	r18, 0x01	; 1
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	b9 01       	movw	r22, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_initpinn+0x144>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_initpinn+0x140>
    128a:	cb 01       	movw	r24, r22
    128c:	80 95       	com	r24
    128e:	94 2f       	mov	r25, r20
    1290:	98 23       	and	r25, r24
    1292:	91 bb       	out	0x11, r25	; 17
    1294:	92 b3       	in	r25, 0x12	; 18
    1296:	89 23       	and	r24, r25
    1298:	82 bb       	out	0x12, r24	; 18
    129a:	08 95       	ret
    129c:	91 30       	cpi	r25, 0x01	; 1
    129e:	c1 f0       	breq	.+48     	; 0x12d0 <DIO_initpinn+0x18e>
    12a0:	28 f0       	brcs	.+10     	; 0x12ac <DIO_initpinn+0x16a>
    12a2:	92 30       	cpi	r25, 0x02	; 2
    12a4:	39 f1       	breq	.+78     	; 0x12f4 <DIO_initpinn+0x1b2>
    12a6:	93 30       	cpi	r25, 0x03	; 3
    12a8:	b9 f1       	breq	.+110    	; 0x1318 <DIO_initpinn+0x1d6>
    12aa:	08 95       	ret
    12ac:	4a b3       	in	r20, 0x1a	; 26
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	b9 01       	movw	r22, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_initpinn+0x178>
    12b6:	66 0f       	add	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_initpinn+0x174>
    12be:	cb 01       	movw	r24, r22
    12c0:	96 2f       	mov	r25, r22
    12c2:	90 95       	com	r25
    12c4:	94 23       	and	r25, r20
    12c6:	9a bb       	out	0x1a, r25	; 26
    12c8:	9b b3       	in	r25, 0x1b	; 27
    12ca:	89 2b       	or	r24, r25
    12cc:	8b bb       	out	0x1b, r24	; 27
    12ce:	08 95       	ret
    12d0:	47 b3       	in	r20, 0x17	; 23
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	b9 01       	movw	r22, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_initpinn+0x19c>
    12da:	66 0f       	add	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_initpinn+0x198>
    12e2:	cb 01       	movw	r24, r22
    12e4:	96 2f       	mov	r25, r22
    12e6:	90 95       	com	r25
    12e8:	94 23       	and	r25, r20
    12ea:	97 bb       	out	0x17, r25	; 23
    12ec:	98 b3       	in	r25, 0x18	; 24
    12ee:	89 2b       	or	r24, r25
    12f0:	88 bb       	out	0x18, r24	; 24
    12f2:	08 95       	ret
    12f4:	44 b3       	in	r20, 0x14	; 20
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	b9 01       	movw	r22, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_initpinn+0x1c0>
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_initpinn+0x1bc>
    1306:	cb 01       	movw	r24, r22
    1308:	96 2f       	mov	r25, r22
    130a:	90 95       	com	r25
    130c:	94 23       	and	r25, r20
    130e:	94 bb       	out	0x14, r25	; 20
    1310:	95 b3       	in	r25, 0x15	; 21
    1312:	89 2b       	or	r24, r25
    1314:	85 bb       	out	0x15, r24	; 21
    1316:	08 95       	ret
    1318:	41 b3       	in	r20, 0x11	; 17
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	b9 01       	movw	r22, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_initpinn+0x1e4>
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_initpinn+0x1e0>
    132a:	cb 01       	movw	r24, r22
    132c:	96 2f       	mov	r25, r22
    132e:	90 95       	com	r25
    1330:	94 23       	and	r25, r20
    1332:	91 bb       	out	0x11, r25	; 17
    1334:	92 b3       	in	r25, 0x12	; 18
    1336:	89 2b       	or	r24, r25
    1338:	82 bb       	out	0x12, r24	; 18
    133a:	08 95       	ret

0000133c <DIO_writepinn>:
    133c:	98 2f       	mov	r25, r24
    133e:	96 95       	lsr	r25
    1340:	96 95       	lsr	r25
    1342:	96 95       	lsr	r25
    1344:	87 70       	andi	r24, 0x07	; 7
    1346:	66 23       	and	r22, r22
    1348:	09 f4       	brne	.+2      	; 0x134c <DIO_writepinn+0x10>
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <DIO_writepinn+0x8e>
    134c:	61 30       	cpi	r22, 0x01	; 1
    134e:	09 f0       	breq	.+2      	; 0x1352 <DIO_writepinn+0x16>
    1350:	7b c0       	rjmp	.+246    	; 0x1448 <DIO_writepinn+0x10c>
    1352:	91 30       	cpi	r25, 0x01	; 1
    1354:	99 f0       	breq	.+38     	; 0x137c <DIO_writepinn+0x40>
    1356:	28 f0       	brcs	.+10     	; 0x1362 <DIO_writepinn+0x26>
    1358:	92 30       	cpi	r25, 0x02	; 2
    135a:	e9 f0       	breq	.+58     	; 0x1396 <DIO_writepinn+0x5a>
    135c:	93 30       	cpi	r25, 0x03	; 3
    135e:	41 f1       	breq	.+80     	; 0x13b0 <DIO_writepinn+0x74>
    1360:	08 95       	ret
    1362:	4b b3       	in	r20, 0x1b	; 27
    1364:	21 e0       	ldi	r18, 0x01	; 1
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	b9 01       	movw	r22, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_writepinn+0x34>
    136c:	66 0f       	add	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	8a 95       	dec	r24
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_writepinn+0x30>
    1374:	cb 01       	movw	r24, r22
    1376:	84 2b       	or	r24, r20
    1378:	8b bb       	out	0x1b, r24	; 27
    137a:	08 95       	ret
    137c:	48 b3       	in	r20, 0x18	; 24
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	b9 01       	movw	r22, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_writepinn+0x4e>
    1386:	66 0f       	add	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	8a 95       	dec	r24
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_writepinn+0x4a>
    138e:	cb 01       	movw	r24, r22
    1390:	84 2b       	or	r24, r20
    1392:	88 bb       	out	0x18, r24	; 24
    1394:	08 95       	ret
    1396:	45 b3       	in	r20, 0x15	; 21
    1398:	21 e0       	ldi	r18, 0x01	; 1
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	b9 01       	movw	r22, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_writepinn+0x68>
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	8a 95       	dec	r24
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_writepinn+0x64>
    13a8:	cb 01       	movw	r24, r22
    13aa:	84 2b       	or	r24, r20
    13ac:	85 bb       	out	0x15, r24	; 21
    13ae:	08 95       	ret
    13b0:	42 b3       	in	r20, 0x12	; 18
    13b2:	21 e0       	ldi	r18, 0x01	; 1
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_writepinn+0x82>
    13ba:	66 0f       	add	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_writepinn+0x7e>
    13c2:	cb 01       	movw	r24, r22
    13c4:	84 2b       	or	r24, r20
    13c6:	82 bb       	out	0x12, r24	; 18
    13c8:	08 95       	ret
    13ca:	91 30       	cpi	r25, 0x01	; 1
    13cc:	a1 f0       	breq	.+40     	; 0x13f6 <DIO_writepinn+0xba>
    13ce:	28 f0       	brcs	.+10     	; 0x13da <DIO_writepinn+0x9e>
    13d0:	92 30       	cpi	r25, 0x02	; 2
    13d2:	f9 f0       	breq	.+62     	; 0x1412 <DIO_writepinn+0xd6>
    13d4:	93 30       	cpi	r25, 0x03	; 3
    13d6:	59 f1       	breq	.+86     	; 0x142e <DIO_writepinn+0xf2>
    13d8:	08 95       	ret
    13da:	4b b3       	in	r20, 0x1b	; 27
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	b9 01       	movw	r22, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_writepinn+0xac>
    13e4:	66 0f       	add	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_writepinn+0xa8>
    13ec:	cb 01       	movw	r24, r22
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8b bb       	out	0x1b, r24	; 27
    13f4:	08 95       	ret
    13f6:	48 b3       	in	r20, 0x18	; 24
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	b9 01       	movw	r22, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_writepinn+0xc8>
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_writepinn+0xc4>
    1408:	cb 01       	movw	r24, r22
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	88 bb       	out	0x18, r24	; 24
    1410:	08 95       	ret
    1412:	45 b3       	in	r20, 0x15	; 21
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	b9 01       	movw	r22, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_writepinn+0xe4>
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_writepinn+0xe0>
    1424:	cb 01       	movw	r24, r22
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	85 bb       	out	0x15, r24	; 21
    142c:	08 95       	ret
    142e:	42 b3       	in	r20, 0x12	; 18
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	b9 01       	movw	r22, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_writepinn+0x100>
    1438:	66 0f       	add	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_writepinn+0xfc>
    1440:	cb 01       	movw	r24, r22
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	82 bb       	out	0x12, r24	; 18
    1448:	08 95       	ret

0000144a <DIO_InitDCM>:



void DIO_InitDCM(Uchar8_t pin, Uchar8_t port,Uchar8_t mode)
{
		if ( mode == DIO_MODE_INPUT)
    144a:	41 11       	cpse	r20, r1
    144c:	40 c0       	rjmp	.+128    	; 0x14ce <DIO_InitDCM+0x84>
		{
			switch(port)
    144e:	61 30       	cpi	r22, 0x01	; 1
    1450:	a1 f0       	breq	.+40     	; 0x147a <DIO_InitDCM+0x30>
    1452:	28 f0       	brcs	.+10     	; 0x145e <DIO_InitDCM+0x14>
    1454:	62 30       	cpi	r22, 0x02	; 2
    1456:	f9 f0       	breq	.+62     	; 0x1496 <DIO_InitDCM+0x4c>
    1458:	63 30       	cpi	r22, 0x03	; 3
    145a:	59 f1       	breq	.+86     	; 0x14b2 <DIO_InitDCM+0x68>
    145c:	08 95       	ret
			{
				case DIO_PORTA:	CLEAR_BIT(DIO_PORTA_DDR_REG,pin);	break;
    145e:	4a b3       	in	r20, 0x1a	; 26
    1460:	21 e0       	ldi	r18, 0x01	; 1
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	b9 01       	movw	r22, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_InitDCM+0x22>
    1468:	66 0f       	add	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_InitDCM+0x1e>
    1470:	cb 01       	movw	r24, r22
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8a bb       	out	0x1a, r24	; 26
    1478:	08 95       	ret
				case DIO_PORTB:	CLEAR_BIT(DIO_PORTB_DDR_REG,pin);	break;
    147a:	47 b3       	in	r20, 0x17	; 23
    147c:	21 e0       	ldi	r18, 0x01	; 1
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	b9 01       	movw	r22, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_InitDCM+0x3e>
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_InitDCM+0x3a>
    148c:	cb 01       	movw	r24, r22
    148e:	80 95       	com	r24
    1490:	84 23       	and	r24, r20
    1492:	87 bb       	out	0x17, r24	; 23
    1494:	08 95       	ret
				case DIO_PORTC:	CLEAR_BIT(DIO_PORTC_DDR_REG,pin);	break;
    1496:	44 b3       	in	r20, 0x14	; 20
    1498:	21 e0       	ldi	r18, 0x01	; 1
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	b9 01       	movw	r22, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_InitDCM+0x5a>
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	8a 95       	dec	r24
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_InitDCM+0x56>
    14a8:	cb 01       	movw	r24, r22
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	84 bb       	out	0x14, r24	; 20
    14b0:	08 95       	ret
				case DIO_PORTD:	CLEAR_BIT(DIO_PORTD_DDR_REG,pin);	break;
    14b2:	41 b3       	in	r20, 0x11	; 17
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	b9 01       	movw	r22, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_InitDCM+0x76>
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	8a 95       	dec	r24
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_InitDCM+0x72>
    14c4:	cb 01       	movw	r24, r22
    14c6:	80 95       	com	r24
    14c8:	84 23       	and	r24, r20
    14ca:	81 bb       	out	0x11, r24	; 17
    14cc:	08 95       	ret
				default:			break;
			}
		}
		else if ( mode == DIO_MODE_OUTPUT)
    14ce:	41 30       	cpi	r20, 0x01	; 1
    14d0:	d9 f5       	brne	.+118    	; 0x1548 <DIO_InitDCM+0xfe>
		{
			switch( port )
    14d2:	61 30       	cpi	r22, 0x01	; 1
    14d4:	99 f0       	breq	.+38     	; 0x14fc <DIO_InitDCM+0xb2>
    14d6:	28 f0       	brcs	.+10     	; 0x14e2 <DIO_InitDCM+0x98>
    14d8:	62 30       	cpi	r22, 0x02	; 2
    14da:	e9 f0       	breq	.+58     	; 0x1516 <DIO_InitDCM+0xcc>
    14dc:	63 30       	cpi	r22, 0x03	; 3
    14de:	41 f1       	breq	.+80     	; 0x1530 <DIO_InitDCM+0xe6>
    14e0:	08 95       	ret
			{
				case DIO_PORTA:	SET_BIT(DIO_PORTA_DDR_REG,pin);	break;
    14e2:	4a b3       	in	r20, 0x1a	; 26
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	b9 01       	movw	r22, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_InitDCM+0xa6>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_InitDCM+0xa2>
    14f4:	cb 01       	movw	r24, r22
    14f6:	84 2b       	or	r24, r20
    14f8:	8a bb       	out	0x1a, r24	; 26
    14fa:	08 95       	ret
				case DIO_PORTB:	SET_BIT(DIO_PORTB_DDR_REG,pin);	break;
    14fc:	47 b3       	in	r20, 0x17	; 23
    14fe:	21 e0       	ldi	r18, 0x01	; 1
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	b9 01       	movw	r22, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_InitDCM+0xc0>
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	8a 95       	dec	r24
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <DIO_InitDCM+0xbc>
    150e:	cb 01       	movw	r24, r22
    1510:	84 2b       	or	r24, r20
    1512:	87 bb       	out	0x17, r24	; 23
    1514:	08 95       	ret
				case DIO_PORTC:	SET_BIT(DIO_PORTC_DDR_REG,pin);	break;
    1516:	44 b3       	in	r20, 0x14	; 20
    1518:	21 e0       	ldi	r18, 0x01	; 1
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	b9 01       	movw	r22, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_InitDCM+0xda>
    1520:	66 0f       	add	r22, r22
    1522:	77 1f       	adc	r23, r23
    1524:	8a 95       	dec	r24
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_InitDCM+0xd6>
    1528:	cb 01       	movw	r24, r22
    152a:	84 2b       	or	r24, r20
    152c:	84 bb       	out	0x14, r24	; 20
    152e:	08 95       	ret
				case DIO_PORTD:	SET_BIT(DIO_PORTD_DDR_REG,pin);	break;
    1530:	41 b3       	in	r20, 0x11	; 17
    1532:	21 e0       	ldi	r18, 0x01	; 1
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	b9 01       	movw	r22, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_InitDCM+0xf4>
    153a:	66 0f       	add	r22, r22
    153c:	77 1f       	adc	r23, r23
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_InitDCM+0xf0>
    1542:	cb 01       	movw	r24, r22
    1544:	84 2b       	or	r24, r20
    1546:	81 bb       	out	0x11, r24	; 17
    1548:	08 95       	ret

0000154a <ICU_getValue>:
}
 
 
void ICU_getValue(Uint32_t *u32_l_ICR_value)
{
	*u32_l_ICR_value = ICU_g_Count;
    154a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <ICU_g_Count>
    154e:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <ICU_g_Count+0x1>
    1552:	fc 01       	movw	r30, r24
    1554:	31 83       	std	Z+1, r19	; 0x01
    1556:	20 83       	st	Z, r18
    1558:	08 95       	ret

0000155a <EXI_enablePIE>:
 */

void EXI_enablePIE( Uchar8_t u8_a_interruptId, Uchar8_t u8_a_senseControl )
{

        SET_BIT(TIMER_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    155a:	8f b7       	in	r24, 0x3f	; 63
    155c:	80 68       	ori	r24, 0x80	; 128
    155e:	8f bf       	out	0x3f, r24	; 63

        SET_BIT( EXI_U8_GICR_REG, EXI_U8_INT2_BIT );
    1560:	8b b7       	in	r24, 0x3b	; 59
    1562:	80 62       	ori	r24, 0x20	; 32
    1564:	8b bf       	out	0x3b, r24	; 59

                /* Check 1.1.1: Required SenseControl */
                switch ( u8_a_senseControl )
    1566:	62 30       	cpi	r22, 0x02	; 2
    1568:	19 f0       	breq	.+6      	; 0x1570 <EXI_enablePIE+0x16>
    156a:	63 30       	cpi	r22, 0x03	; 3
    156c:	29 f0       	breq	.+10     	; 0x1578 <EXI_enablePIE+0x1e>
    156e:	08 95       	ret
                {
                    //case EXI_U8_SENSE_LOW_LEVEL		: CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                   // case EXI_U8_SENSE_LOGICAL_CHANGE: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLEAR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
                    case EXI_U8_SENSE_FALLING_EDGE	: CLEAR_BIT( EXI_U8_MCUCSR_REG, 6 ); break;
    1570:	84 b7       	in	r24, 0x34	; 52
    1572:	8f 7b       	andi	r24, 0xBF	; 191
    1574:	84 bf       	out	0x34, r24	; 52
    1576:	08 95       	ret
                    case EXI_U8_SENSE_RISING_EDGE	: SET_BIT( EXI_U8_MCUCSR_REG, 6 );  break;
    1578:	84 b7       	in	r24, 0x34	; 52
    157a:	80 64       	ori	r24, 0x40	; 64
    157c:	84 bf       	out	0x34, r24	; 52
    157e:	08 95       	ret

00001580 <TIMER_tmr1NormalModeInit>:
 * @return An EN_TMR_ERROR_T value indicating the success or failure of the operation
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1NormalModeInit(EN_TIMER_INTERRPUT_T en_a_interrputEnable)
{
	switch (en_a_interrputEnable)
    1580:	88 23       	and	r24, r24
    1582:	19 f0       	breq	.+6      	; 0x158a <TIMER_tmr1NormalModeInit+0xa>
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	d9 f0       	breq	.+54     	; 0x15be <TIMER_tmr1NormalModeInit+0x3e>
    1588:	2e c0       	rjmp	.+92     	; 0x15e6 <TIMER_tmr1NormalModeInit+0x66>
	{
	case ENABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    158a:	8f b5       	in	r24, 0x2f	; 47
    158c:	8e 7f       	andi	r24, 0xFE	; 254
    158e:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    1590:	8f b5       	in	r24, 0x2f	; 47
    1592:	8d 7f       	andi	r24, 0xFD	; 253
    1594:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    1596:	8e b5       	in	r24, 0x2e	; 46
    1598:	87 7f       	andi	r24, 0xF7	; 247
    159a:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    159c:	8e b5       	in	r24, 0x2e	; 46
    159e:	8f 7e       	andi	r24, 0xEF	; 239
    15a0:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    15a2:	8f b5       	in	r24, 0x2f	; 47
    15a4:	88 60       	ori	r24, 0x08	; 8
    15a6:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    15a8:	8f b5       	in	r24, 0x2f	; 47
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	8f bd       	out	0x2f, r24	; 47
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    15ae:	8f b7       	in	r24, 0x3f	; 63
    15b0:	80 68       	ori	r24, 0x80	; 128
    15b2:	8f bf       	out	0x3f, r24	; 63
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
    15b4:	89 b7       	in	r24, 0x39	; 57
    15b6:	84 60       	ori	r24, 0x04	; 4
    15b8:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15ba:	80 e0       	ldi	r24, 0x00	; 0
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		//*Enable the global interrupt enable bit.*//*
		SET_BIT(TMR_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
		//* Enable the interrupt for timer0 overflow.*//*
		SET_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT);
		break;
    15bc:	08 95       	ret
	case DISABLED:
		//* select the normal mode for the timer, timer is not start yet.*//*
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT);
    15be:	8f b5       	in	r24, 0x2f	; 47
    15c0:	8e 7f       	andi	r24, 0xFE	; 254
    15c2:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT);
    15c4:	8f b5       	in	r24, 0x2f	; 47
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
    15c8:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
    15ca:	8e b5       	in	r24, 0x2e	; 46
    15cc:	87 7f       	andi	r24, 0xF7	; 247
    15ce:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
    15d0:	8e b5       	in	r24, 0x2e	; 46
    15d2:	8f 7e       	andi	r24, 0xEF	; 239
    15d4:	8e bd       	out	0x2e, r24	; 46
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
    15d6:	8f b5       	in	r24, 0x2f	; 47
    15d8:	88 60       	ori	r24, 0x08	; 8
    15da:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
    15dc:	8f b5       	in	r24, 0x2f	; 47
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	8f bd       	out	0x2f, r24	; 47
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT);
		//*must be set for the non_PWM mode*//*
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1A_BIT);
		SET_BIT(TMR_U8_TCCR1A_REG, TMR_U8_FOC1B_BIT);
		break;
    15e4:	08 95       	ret
	default:
		return TIMER_ERROR;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    15e8:	08 95       	ret

000015ea <TIMER_tmr1Start>:
 *         (TMR_OK if the operation succeeded, TMR_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_tmr1Start(Uint16_t u16_a_prescaler)
{
	//select the required prescaler value
	switch(u16_a_prescaler)
    15ea:	80 34       	cpi	r24, 0x40	; 64
    15ec:	91 05       	cpc	r25, r1
    15ee:	29 f1       	breq	.+74     	; 0x163a <TIMER_tmr1Start+0x50>
    15f0:	30 f4       	brcc	.+12     	; 0x15fe <TIMER_tmr1Start+0x14>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	59 f0       	breq	.+22     	; 0x160e <TIMER_tmr1Start+0x24>
    15f8:	08 97       	sbiw	r24, 0x08	; 8
    15fa:	a1 f0       	breq	.+40     	; 0x1624 <TIMER_tmr1Start+0x3a>
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <TIMER_tmr1Start+0x92>
    15fe:	81 15       	cp	r24, r1
    1600:	21 e0       	ldi	r18, 0x01	; 1
    1602:	92 07       	cpc	r25, r18
    1604:	29 f1       	breq	.+74     	; 0x1650 <TIMER_tmr1Start+0x66>
    1606:	81 15       	cp	r24, r1
    1608:	94 40       	sbci	r25, 0x04	; 4
    160a:	69 f1       	breq	.+90     	; 0x1666 <TIMER_tmr1Start+0x7c>
    160c:	37 c0       	rjmp	.+110    	; 0x167c <TIMER_tmr1Start+0x92>
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    160e:	8e b5       	in	r24, 0x2e	; 46
    1610:	8d 7f       	andi	r24, 0xFD	; 253
    1612:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    1614:	8e b5       	in	r24, 0x2e	; 46
    1616:	8b 7f       	andi	r24, 0xFB	; 251
    1618:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    161a:	8e b5       	in	r24, 0x2e	; 46
    161c:	81 60       	ori	r24, 0x01	; 1
    161e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1620:	80 e0       	ldi	r24, 0x00	; 0
	{
	case 1:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    1622:	08 95       	ret
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1624:	8e b5       	in	r24, 0x2e	; 46
    1626:	8e 7f       	andi	r24, 0xFE	; 254
    1628:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    162a:	8e b5       	in	r24, 0x2e	; 46
    162c:	8b 7f       	andi	r24, 0xFB	; 251
    162e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1630:	8e b5       	in	r24, 0x2e	; 46
    1632:	82 60       	ori	r24, 0x02	; 2
    1634:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1636:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 8:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		break;
    1638:	08 95       	ret
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    163a:	8e b5       	in	r24, 0x2e	; 46
    163c:	8b 7f       	andi	r24, 0xFB	; 251
    163e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1640:	8e b5       	in	r24, 0x2e	; 46
    1642:	82 60       	ori	r24, 0x02	; 2
    1644:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1646:	8e b5       	in	r24, 0x2e	; 46
    1648:	81 60       	ori	r24, 0x01	; 1
    164a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    164c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 64:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    164e:	08 95       	ret
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1650:	8e b5       	in	r24, 0x2e	; 46
    1652:	8d 7f       	andi	r24, 0xFD	; 253
    1654:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1656:	8e b5       	in	r24, 0x2e	; 46
    1658:	8e 7f       	andi	r24, 0xFE	; 254
    165a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    165c:	8e b5       	in	r24, 0x2e	; 46
    165e:	84 60       	ori	r24, 0x04	; 4
    1660:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1662:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 256:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		break;
    1664:	08 95       	ret
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1666:	8e b5       	in	r24, 0x2e	; 46
    1668:	8d 7f       	andi	r24, 0xFD	; 253
    166a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    166c:	8e b5       	in	r24, 0x2e	; 46
    166e:	84 60       	ori	r24, 0x04	; 4
    1670:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1672:	8e b5       	in	r24, 0x2e	; 46
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	8e bd       	out	0x2e, r24	; 46
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_OK;
    1678:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case 1024:
		CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
		SET_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
		break;
    167a:	08 95       	ret
	default:
		return TIMER_ERROR;
    167c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
    167e:	08 95       	ret

00001680 <TIMER_tmr1Stop>:

void TIMER_tmr1Stop(void)
{
 //Stop the timer by clearing the prescaler

	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT);
    1680:	8e b5       	in	r24, 0x2e	; 46
    1682:	8e 7f       	andi	r24, 0xFE	; 254
    1684:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT);
    1686:	8e b5       	in	r24, 0x2e	; 46
    1688:	8d 7f       	andi	r24, 0xFD	; 253
    168a:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT);
    168c:	8e b5       	in	r24, 0x2e	; 46
    168e:	8b 7f       	andi	r24, 0xFB	; 251
    1690:	8e bd       	out	0x2e, r24	; 46
    1692:	08 95       	ret

00001694 <ICU_RisingEdgeCapture>:
 * @param[in] void.
 *
 * @return void.
 */
void ICU_RisingEdgeCapture(void)
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
	TIMER_tmr1NormalModeInit(ST_g_softwareICU->timer1_ISR);
    1698:	c1 e7       	ldi	r28, 0x71	; 113
    169a:	d0 e0       	ldi	r29, 0x00	; 0
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <TIMER_tmr1NormalModeInit>
	TIMER_tmr1Stop();
    16a2:	0e 94 40 0b 	call	0x1680	; 0x1680 <TIMER_tmr1Stop>
	
	EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_firstSenseControl);
    16a6:	69 81       	ldd	r22, Y+1	; 0x01
    16a8:	88 81       	ld	r24, Y
    16aa:	0e 94 ad 0a 	call	0x155a	; 0x155a <EXI_enablePIE>
	ICU_g_edgeFlag = RISING;
    16ae:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ICU_g_edgeFlag>
	TIMER_tmr1Start(1);
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TIMER_tmr1Start>
}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <__vector_3>:
	
/**
 * ISR function implementation of INT2
 * */
ISR(EXT_INT_2)
{
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    /* Save the current value of the timer/counter register  */
	TIMER_g_timer1RegValue = TMR_U16_TCNT1_REG;
    16e2:	8c b5       	in	r24, 0x2c	; 44
    16e4:	9d b5       	in	r25, 0x2d	; 45
    16e6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <TIMER_g_timer1RegValue+0x1>
    16ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <TIMER_g_timer1RegValue>
	if(ICU_g_edgeFlag == RISING)
    16ee:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <ICU_g_edgeFlag>
    16f2:	21 11       	cpse	r18, r1
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <__vector_3+0x5e>
	{
		ICU_g_ValueRising = TIMER_g_timer1RegValue;
    16f6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ICU_g_ValueRising+0x1>
    16fa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ICU_g_ValueRising>
		/* Clear Timer counter */
		TMR_U16_TCNT1_REG = 0;
    16fe:	1d bc       	out	0x2d, r1	; 45
    1700:	1c bc       	out	0x2c, r1	; 44
		/* Set the external interrupt event at falling edge.*/
		EXI_enablePIE( ST_g_softwareICU->ICU_exti, ST_g_softwareICU->ICU_secondSenseControl );
    1702:	e1 e7       	ldi	r30, 0x71	; 113
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	62 81       	ldd	r22, Z+2	; 0x02
    1708:	80 81       	ld	r24, Z
    170a:	0e 94 ad 0a 	call	0x155a	; 0x155a <EXI_enablePIE>
		/* Clear Timer overflow count */
		u32_g_timer1Overflow = 0;
    170e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <u32_g_timer1Overflow+0x1>
    1712:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u32_g_timer1Overflow>
		ICU_g_edgeFlag = FALLING;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ICU_g_edgeFlag>
    171c:	13 c0       	rjmp	.+38     	; 0x1744 <__vector_3+0x84>
	}
	else
	{
		ICU_g_ValueFalling = TIMER_g_timer1RegValue;
    171e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ICU_g_ValueFalling+0x1>
    1722:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ICU_g_ValueFalling>
		ICU_g_Count = TIMER_g_timer1RegValue + (65535 * u32_g_timer1Overflow);
    1726:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <u32_g_timer1Overflow>
    172a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <u32_g_timer1Overflow+0x1>
    172e:	82 1b       	sub	r24, r18
    1730:	93 0b       	sbc	r25, r19
    1732:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ICU_g_Count+0x1>
    1736:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ICU_g_Count>
		/* Stop timer1 */
		TIMER_tmr1Stop();
    173a:	0e 94 40 0b 	call	0x1680	; 0x1680 <TIMER_tmr1Stop>
		ICU_g_flag = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ICU_g_flag>
	}

}	
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	bf 91       	pop	r27
    174a:	af 91       	pop	r26
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	7f 91       	pop	r23
    1752:	6f 91       	pop	r22
    1754:	5f 91       	pop	r21
    1756:	4f 91       	pop	r20
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <__vector_9>:
		
ISR(TIM1_OVF_INT)
{
    1766:	1f 92       	push	r1
    1768:	0f 92       	push	r0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	11 24       	eor	r1, r1
    1770:	8f 93       	push	r24
    1772:	9f 93       	push	r25
	u32_g_timer1Overflow++;
    1774:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <u32_g_timer1Overflow>
    1778:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <u32_g_timer1Overflow+0x1>
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <u32_g_timer1Overflow+0x1>
    1782:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <u32_g_timer1Overflow>
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
    1794:	8f b7       	in	r24, 0x3f	; 63
    1796:	80 68       	ori	r24, 0x80	; 128
    1798:	8f bf       	out	0x3f, r24	; 63
    179a:	08 95       	ret

0000179c <TIMER0_PWM_ExecutedFunction>:
Description : this function switches level of cycle based on global on_off_state (this function called from ISR)
Args        : void
return      : void
*/
static void TIMER0_PWM_ExecutedFunction(void)
{
    179c:	cf 93       	push	r28
	Uchar8_t u8_Loc_counter = 0;
	if(u8_g_on_off_state == 0)
    179e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u8_g_on_off_state>
    17a2:	88 23       	and	r24, r24
    17a4:	61 f0       	breq	.+24     	; 0x17be <TIMER0_PWM_ExecutedFunction+0x22>
    17a6:	c0 e0       	ldi	r28, 0x00	; 0
    17a8:	1e c0       	rjmp	.+60     	; 0x17e6 <TIMER0_PWM_ExecutedFunction+0x4a>
	{
		// switch level of cycle to LOW
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,LOW);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,LOW);
    17aa:	ec 2f       	mov	r30, r28
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	e3 50       	subi	r30, 0x03	; 3
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
{
	Uchar8_t u8_Loc_counter = 0;
	if(u8_g_on_off_state == 0)
	{
		// switch level of cycle to LOW
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17ba:	cf 5f       	subi	r28, 0xFF	; 255
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <TIMER0_PWM_ExecutedFunction+0x24>
    17be:	c0 e0       	ldi	r28, 0x00	; 0
    17c0:	c2 30       	cpi	r28, 0x02	; 2
    17c2:	98 f3       	brcs	.-26     	; 0x17aa <TIMER0_PWM_ExecutedFunction+0xe>
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,LOW);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,LOW);
		}
		TCNT0 = REG_SIZE - u8_g_OffTime;
    17c4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <u8_g_OffTime>
    17c8:	81 95       	neg	r24
    17ca:	82 bf       	out	0x32, r24	; 50
		u8_g_on_off_state=1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <u8_g_on_off_state>
    17d2:	11 c0       	rjmp	.+34     	; 0x17f6 <TIMER0_PWM_ExecutedFunction+0x5a>
	{
		// switch level of cycle to HIGH
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,HIGH);
    17d4:	ec 2f       	mov	r30, r28
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	e3 50       	subi	r30, 0x03	; 3
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	80 81       	ld	r24, Z
    17e0:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
		u8_g_on_off_state=1;
	}
	else
	{
		// switch level of cycle to HIGH
		for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    17e4:	cf 5f       	subi	r28, 0xFF	; 255
    17e6:	c2 30       	cpi	r28, 0x02	; 2
    17e8:	a8 f3       	brcs	.-22     	; 0x17d4 <TIMER0_PWM_ExecutedFunction+0x38>
		{
			//DIO_s8SETPinVal(st_pwm_configs[u8_Loc_counter].pwm_pin,HIGH);
			DIO_writepinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,HIGH);
		}
		TCNT0 = REG_SIZE - u8_g_OnTime;
    17ea:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u8_g_OnTime>
    17ee:	81 95       	neg	r24
    17f0:	82 bf       	out	0x32, r24	; 50
		u8_g_on_off_state=0;
    17f2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <u8_g_on_off_state>
	}
}
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <TIMER0_init>:
*/
void TIMER0_init(void)
{
	
	/*Normal Mode Select*/
	CLEAR_BIT(TCCR0,WGM00);
    17fa:	83 b7       	in	r24, 0x33	; 51
	CLEAR_BIT(TCCR0,WGM01);
    17fc:	87 7b       	andi	r24, 0xB7	; 183
    17fe:	83 bf       	out	0x33, r24	; 51
	/*Timer Overflow Interrupt Enable*/
	SET_BIT(TIMSK,TOIE0);
    1800:	89 b7       	in	r24, 0x39	; 57
    1802:	81 60       	ori	r24, 0x01	; 1
    1804:	89 bf       	out	0x39, r24	; 57
	/*TGlobal Interrupt Enable*/
	sei();
    1806:	78 94       	sei
    1808:	08 95       	ret

0000180a <TIMER0_start>:
return      : void
*/
void TIMER0_start(void)
{
	/*Clear Three Clock Select Bits */
	TCCR0 &=0xF8;
    180a:	83 b7       	in	r24, 0x33	; 51
    180c:	88 7f       	andi	r24, 0xF8	; 248
	/*Set Selected Prescaller */
	TCCR0|=TIMER_SET_PRESCALER;
    180e:	85 60       	ori	r24, 0x05	; 5
    1810:	83 bf       	out	0x33, r24	; 51
    1812:	08 95       	ret

00001814 <TIMER0_stop>:
return      : void
*/
void TIMER0_stop(void)
{
	/*Clear Three Clock Select Bits */
	TCCR0 &=0xF8;
    1814:	83 b7       	in	r24, 0x33	; 51
    1816:	88 7f       	andi	r24, 0xF8	; 248
    1818:	83 bf       	out	0x33, r24	; 51
    181a:	08 95       	ret

0000181c <TIMER0_initPWM>:
Description : this function initializes all pwm pins as outputs and set high on them, also calls TIMER0_init ....
Args        : void
return      : void
*/
void TIMER0_initPWM(void)
{
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
	
	Uchar8_t u8_Loc_counter = 0;
	/*Loop over all pwm pins (set direction output and set value as high) */
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    1822:	c0 e0       	ldi	r28, 0x00	; 0
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <TIMER0_initPWM+0x28>
	{
		
		DIO_initpinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,OUTPUT);
    1826:	0c 2f       	mov	r16, r28
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	03 50       	subi	r16, 0x03	; 3
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	f8 01       	movw	r30, r16
    1832:	80 81       	ld	r24, Z
    1834:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_initpinn>
		DIO_writepinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,HIGH);
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	f8 01       	movw	r30, r16
    183c:	80 81       	ld	r24, Z
    183e:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_writepinn>
void TIMER0_initPWM(void)
{
	
	Uchar8_t u8_Loc_counter = 0;
	/*Loop over all pwm pins (set direction output and set value as high) */
	for(u8_Loc_counter = 0 ; u8_Loc_counter < PWM_PINS_NUMBER ; u8_Loc_counter++)
    1842:	cf 5f       	subi	r28, 0xFF	; 255
    1844:	c2 30       	cpi	r28, 0x02	; 2
    1846:	78 f3       	brcs	.-34     	; 0x1826 <TIMER0_initPWM+0xa>
		DIO_initpinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,OUTPUT);
		DIO_writepinn(st_pwm_configs[u8_Loc_counter].en_pwm_pin,HIGH);
		
	}
	/* call timer0 init to select normal mode of timer 0*/
	TIMER0_init();
    1848:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <TIMER0_init>
}
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	08 95       	ret

00001854 <TIMER0_setPwm>:
Description : this function calculates onTime and offTime , also calls TIMER0_start ....
Args        : DutyCycle (0--->100)
return      : void
*/
void TIMER0_setPwm(Uchar8_t u8_a_dutyCycle)
{
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
	
	u8_g_OnTime =  ((u8_a_dutyCycle * REG_SIZE)/100);
    1858:	e8 2f       	mov	r30, r24
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	98 2f       	mov	r25, r24
    185e:	c4 e6       	ldi	r28, 0x64	; 100
    1860:	d0 e0       	ldi	r29, 0x00	; 0
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	be 01       	movw	r22, r28
    1866:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__divmodhi4>
    186a:	26 2f       	mov	r18, r22
    186c:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <u8_g_OnTime>
	u8_g_OffTime = (((100 -u8_a_dutyCycle) * REG_SIZE)/100);
    1870:	ce 01       	movw	r24, r28
    1872:	8e 1b       	sub	r24, r30
    1874:	9f 0b       	sbc	r25, r31
    1876:	98 2f       	mov	r25, r24
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	be 01       	movw	r22, r28
    187c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__divmodhi4>
    1880:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <u8_g_OffTime>
	TCNT0 = REG_SIZE - u8_g_OnTime ;
    1884:	21 95       	neg	r18
    1886:	22 bf       	out	0x32, r18	; 50
	TIMER0_start();
    1888:	0e 94 05 0c 	call	0x180a	; 0x180a <TIMER0_start>
	
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	08 95       	ret

00001892 <__vector_11>:
	}
}


ISR(TIM0_OVF_INT)
{
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
	TIMER0_PWM_ExecutedFunction();
    18b4:	0e 94 ce 0b 	call	0x179c	; 0x179c <TIMER0_PWM_ExecutedFunction>
}
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <TIMER_TMR2NormalModeInit>:
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
        return TIMER_OK;
    } else {
        return TIMER_ERROR;
    }
}
    18da:	88 23       	and	r24, r24
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <TIMER_TMR2NormalModeInit+0xa>
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	79 f0       	breq	.+30     	; 0x1900 <TIMER_TMR2NormalModeInit+0x26>
    18e2:	16 c0       	rjmp	.+44     	; 0x1910 <TIMER_TMR2NormalModeInit+0x36>
    18e4:	85 b5       	in	r24, 0x25	; 37
    18e6:	8f 7b       	andi	r24, 0xBF	; 191
    18e8:	85 bd       	out	0x25, r24	; 37
    18ea:	85 b5       	in	r24, 0x25	; 37
    18ec:	87 7f       	andi	r24, 0xF7	; 247
    18ee:	85 bd       	out	0x25, r24	; 37
    18f0:	8f b7       	in	r24, 0x3f	; 63
    18f2:	80 68       	ori	r24, 0x80	; 128
    18f4:	8f bf       	out	0x3f, r24	; 63
    18f6:	89 b7       	in	r24, 0x39	; 57
    18f8:	80 64       	ori	r24, 0x40	; 64
    18fa:	89 bf       	out	0x39, r24	; 57
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	08 95       	ret
    1900:	85 b5       	in	r24, 0x25	; 37
    1902:	8f 7b       	andi	r24, 0xBF	; 191
    1904:	85 bd       	out	0x25, r24	; 37
    1906:	85 b5       	in	r24, 0x25	; 37
    1908:	87 7f       	andi	r24, 0xF7	; 247
    190a:	85 bd       	out	0x25, r24	; 37
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	08 95       	ret
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	08 95       	ret

00001914 <TIMER_TMR2Start>:
    1914:	80 34       	cpi	r24, 0x40	; 64
    1916:	91 05       	cpc	r25, r1
    1918:	c1 f1       	breq	.+112    	; 0x198a <TIMER_TMR2Start+0x76>
    191a:	50 f4       	brcc	.+20     	; 0x1930 <TIMER_TMR2Start+0x1c>
    191c:	88 30       	cpi	r24, 0x08	; 8
    191e:	91 05       	cpc	r25, r1
    1920:	01 f1       	breq	.+64     	; 0x1962 <TIMER_TMR2Start+0x4e>
    1922:	80 32       	cpi	r24, 0x20	; 32
    1924:	91 05       	cpc	r25, r1
    1926:	41 f1       	breq	.+80     	; 0x1978 <TIMER_TMR2Start+0x64>
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	09 f0       	breq	.+2      	; 0x192e <TIMER_TMR2Start+0x1a>
    192c:	58 c0       	rjmp	.+176    	; 0x19de <TIMER_TMR2Start+0xca>
    192e:	0e c0       	rjmp	.+28     	; 0x194c <TIMER_TMR2Start+0x38>
    1930:	81 15       	cp	r24, r1
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	92 07       	cpc	r25, r18
    1936:	e9 f1       	breq	.+122    	; 0x19b2 <TIMER_TMR2Start+0x9e>
    1938:	81 15       	cp	r24, r1
    193a:	24 e0       	ldi	r18, 0x04	; 4
    193c:	92 07       	cpc	r25, r18
    193e:	09 f4       	brne	.+2      	; 0x1942 <TIMER_TMR2Start+0x2e>
    1940:	43 c0       	rjmp	.+134    	; 0x19c8 <TIMER_TMR2Start+0xb4>
    1942:	80 38       	cpi	r24, 0x80	; 128
    1944:	91 05       	cpc	r25, r1
    1946:	09 f0       	breq	.+2      	; 0x194a <TIMER_TMR2Start+0x36>
    1948:	4a c0       	rjmp	.+148    	; 0x19de <TIMER_TMR2Start+0xca>
    194a:	28 c0       	rjmp	.+80     	; 0x199c <TIMER_TMR2Start+0x88>
    194c:	85 b5       	in	r24, 0x25	; 37
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	85 bd       	out	0x25, r24	; 37
    1952:	85 b5       	in	r24, 0x25	; 37
    1954:	8b 7f       	andi	r24, 0xFB	; 251
    1956:	85 bd       	out	0x25, r24	; 37
    1958:	85 b5       	in	r24, 0x25	; 37
    195a:	81 60       	ori	r24, 0x01	; 1
    195c:	85 bd       	out	0x25, r24	; 37
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	08 95       	ret
    1962:	85 b5       	in	r24, 0x25	; 37
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	85 bd       	out	0x25, r24	; 37
    1968:	85 b5       	in	r24, 0x25	; 37
    196a:	8b 7f       	andi	r24, 0xFB	; 251
    196c:	85 bd       	out	0x25, r24	; 37
    196e:	85 b5       	in	r24, 0x25	; 37
    1970:	82 60       	ori	r24, 0x02	; 2
    1972:	85 bd       	out	0x25, r24	; 37
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	08 95       	ret
    1978:	85 b5       	in	r24, 0x25	; 37
    197a:	8b 7f       	andi	r24, 0xFB	; 251
    197c:	85 bd       	out	0x25, r24	; 37
    197e:	85 b5       	in	r24, 0x25	; 37
    1980:	82 60       	ori	r24, 0x02	; 2
    1982:	85 bd       	out	0x25, r24	; 37
    1984:	85 b5       	in	r24, 0x25	; 37
    1986:	81 60       	ori	r24, 0x01	; 1
    1988:	85 bd       	out	0x25, r24	; 37
    198a:	85 b5       	in	r24, 0x25	; 37
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	85 bd       	out	0x25, r24	; 37
    1990:	85 b5       	in	r24, 0x25	; 37
    1992:	8d 7f       	andi	r24, 0xFD	; 253
    1994:	85 bd       	out	0x25, r24	; 37
    1996:	85 b5       	in	r24, 0x25	; 37
    1998:	8e 7f       	andi	r24, 0xFE	; 254
    199a:	85 bd       	out	0x25, r24	; 37
    199c:	85 b5       	in	r24, 0x25	; 37
    199e:	8b 7f       	andi	r24, 0xFB	; 251
    19a0:	85 bd       	out	0x25, r24	; 37
    19a2:	85 b5       	in	r24, 0x25	; 37
    19a4:	8d 7f       	andi	r24, 0xFD	; 253
    19a6:	85 bd       	out	0x25, r24	; 37
    19a8:	85 b5       	in	r24, 0x25	; 37
    19aa:	81 60       	ori	r24, 0x01	; 1
    19ac:	85 bd       	out	0x25, r24	; 37
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	08 95       	ret
    19b2:	85 b5       	in	r24, 0x25	; 37
    19b4:	82 60       	ori	r24, 0x02	; 2
    19b6:	85 bd       	out	0x25, r24	; 37
    19b8:	85 b5       	in	r24, 0x25	; 37
    19ba:	8e 7f       	andi	r24, 0xFE	; 254
    19bc:	85 bd       	out	0x25, r24	; 37
    19be:	85 b5       	in	r24, 0x25	; 37
    19c0:	84 60       	ori	r24, 0x04	; 4
    19c2:	85 bd       	out	0x25, r24	; 37
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	08 95       	ret
    19c8:	85 b5       	in	r24, 0x25	; 37
    19ca:	82 60       	ori	r24, 0x02	; 2
    19cc:	85 bd       	out	0x25, r24	; 37
    19ce:	85 b5       	in	r24, 0x25	; 37
    19d0:	84 60       	ori	r24, 0x04	; 4
    19d2:	85 bd       	out	0x25, r24	; 37
    19d4:	85 b5       	in	r24, 0x25	; 37
    19d6:	81 60       	ori	r24, 0x01	; 1
    19d8:	85 bd       	out	0x25, r24	; 37
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	08 95       	ret
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	08 95       	ret

000019e2 <TMR_intDelay_ms>:
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	bc 01       	movw	r22, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__floatunsisf>
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	54 e4       	ldi	r21, 0x44	; 68
    19fc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divsf3>
    1a00:	6b 01       	movw	r12, r22
    1a02:	7c 01       	movw	r14, r24
    1a04:	27 e3       	ldi	r18, 0x37	; 55
    1a06:	37 e3       	ldi	r19, 0x37	; 55
    1a08:	46 e8       	ldi	r20, 0x86	; 134
    1a0a:	56 e4       	ldi	r21, 0x46	; 70
    1a0c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__gesf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	0c f4       	brge	.+2      	; 0x1a16 <TMR_intDelay_ms+0x34>
    1a14:	7c c0       	rjmp	.+248    	; 0x1b0e <TMR_intDelay_ms+0x12c>
    1a16:	15 bc       	out	0x25, r1	; 37
    1a18:	2d eb       	ldi	r18, 0xBD	; 189
    1a1a:	37 e3       	ldi	r19, 0x37	; 55
    1a1c:	46 e8       	ldi	r20, 0x86	; 134
    1a1e:	5e e3       	ldi	r21, 0x3E	; 62
    1a20:	c7 01       	movw	r24, r14
    1a22:	b6 01       	movw	r22, r12
    1a24:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__cmpsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	c4 f4       	brge	.+48     	; 0x1a5c <TMR_intDelay_ms+0x7a>
    1a2c:	a7 01       	movw	r20, r14
    1a2e:	96 01       	movw	r18, r12
    1a30:	6d eb       	ldi	r22, 0xBD	; 189
    1a32:	77 e3       	ldi	r23, 0x37	; 55
    1a34:	86 e8       	ldi	r24, 0x86	; 134
    1a36:	9e e3       	ldi	r25, 0x3E	; 62
    1a38:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    1a3c:	2d eb       	ldi	r18, 0xBD	; 189
    1a3e:	37 e3       	ldi	r19, 0x37	; 55
    1a40:	46 e8       	ldi	r20, 0x86	; 134
    1a42:	5a e3       	ldi	r21, 0x3A	; 58
    1a44:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divsf3>
    1a48:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fixunssfsi>
    1a4c:	64 bd       	out	0x24, r22	; 36
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <u16_g_overflow2Numbers+0x1>
    1a56:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u16_g_overflow2Numbers>
    1a5a:	4f c0       	rjmp	.+158    	; 0x1afa <TMR_intDelay_ms+0x118>
    1a5c:	2d eb       	ldi	r18, 0xBD	; 189
    1a5e:	37 e3       	ldi	r19, 0x37	; 55
    1a60:	46 e8       	ldi	r20, 0x86	; 134
    1a62:	5e e3       	ldi	r21, 0x3E	; 62
    1a64:	c7 01       	movw	r24, r14
    1a66:	b6 01       	movw	r22, r12
    1a68:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__cmpsf2>
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	08 c0       	rjmp	.+16     	; 0x1a80 <TMR_intDelay_ms+0x9e>
    1a70:	14 bc       	out	0x24, r1	; 36
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <u16_g_overflow2Numbers+0x1>
    1a7a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u16_g_overflow2Numbers>
    1a7e:	3d c0       	rjmp	.+122    	; 0x1afa <TMR_intDelay_ms+0x118>
    1a80:	2d eb       	ldi	r18, 0xBD	; 189
    1a82:	37 e3       	ldi	r19, 0x37	; 55
    1a84:	46 e8       	ldi	r20, 0x86	; 134
    1a86:	5e e3       	ldi	r21, 0x3E	; 62
    1a88:	c7 01       	movw	r24, r14
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divsf3>
    1a90:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <ceil>
    1a94:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fixunssfsi>
    1a98:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <u16_g_overflow2Numbers+0x1>
    1a9c:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <u16_g_overflow2Numbers>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__floatunsisf>
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    1ab4:	2d eb       	ldi	r18, 0xBD	; 189
    1ab6:	37 e3       	ldi	r19, 0x37	; 55
    1ab8:	46 e8       	ldi	r20, 0x86	; 134
    1aba:	5e e3       	ldi	r21, 0x3E	; 62
    1abc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    1acc:	2d eb       	ldi	r18, 0xBD	; 189
    1ace:	37 e3       	ldi	r19, 0x37	; 55
    1ad0:	46 e8       	ldi	r20, 0x86	; 134
    1ad2:	5a e3       	ldi	r21, 0x3A	; 58
    1ad4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divsf3>
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	80 e8       	ldi	r24, 0x80	; 128
    1ae2:	93 e4       	ldi	r25, 0x43	; 67
    1ae4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    1ae8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fixunssfsi>
    1aec:	64 bd       	out	0x24, r22	; 36
    1aee:	84 b5       	in	r24, 0x24	; 36
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <u16_g_tcnt2InitialVal+0x1>
    1af6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <u16_g_tcnt2InitialVal>
    1afa:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u16_g_overflow2Ticks+0x1>
    1afe:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u16_g_overflow2Ticks>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	94 e0       	ldi	r25, 0x04	; 4
    1b06:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TIMER_TMR2Start>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <TMR_intDelay_ms+0x12e>
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	df 90       	pop	r13
    1b16:	cf 90       	pop	r12
    1b18:	08 95       	ret

00001b1a <TMR_TMR2Stop>:
    1b1a:	85 b5       	in	r24, 0x25	; 37
    1b1c:	8e 7f       	andi	r24, 0xFE	; 254
    1b1e:	85 bd       	out	0x25, r24	; 37
    1b20:	85 b5       	in	r24, 0x25	; 37
    1b22:	8d 7f       	andi	r24, 0xFD	; 253
    1b24:	85 bd       	out	0x25, r24	; 37
    1b26:	85 b5       	in	r24, 0x25	; 37
    1b28:	8b 7f       	andi	r24, 0xFB	; 251
    1b2a:	85 bd       	out	0x25, r24	; 37
    1b2c:	08 95       	ret

00001b2e <__vector_5>:


ISR(TIM2_OVF_INT)
{
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
	u16_g_overflow2Ticks++;
    1b50:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <u16_g_overflow2Ticks>
    1b54:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <u16_g_overflow2Ticks+0x1>
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <u16_g_overflow2Ticks+0x1>
    1b5e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <u16_g_overflow2Ticks>
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers )
    1b62:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <u16_g_overflow2Numbers>
    1b66:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <u16_g_overflow2Numbers+0x1>
    1b6a:	82 17       	cp	r24, r18
    1b6c:	93 07       	cpc	r25, r19
    1b6e:	48 f0       	brcs	.+18     	; 0x1b82 <__vector_5+0x54>
	{
		u16_g_overflow2Ticks = 0;
    1b70:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u16_g_overflow2Ticks+0x1>
    1b74:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u16_g_overflow2Ticks>
		u8_g_timeOut = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <u8_g_timeOut>
		TMR_TMR2Stop();
    1b7e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <TMR_TMR2Stop>
	}
}
    1b82:	ff 91       	pop	r31
    1b84:	ef 91       	pop	r30
    1b86:	bf 91       	pop	r27
    1b88:	af 91       	pop	r26
    1b8a:	9f 91       	pop	r25
    1b8c:	8f 91       	pop	r24
    1b8e:	7f 91       	pop	r23
    1b90:	6f 91       	pop	r22
    1b92:	5f 91       	pop	r21
    1b94:	4f 91       	pop	r20
    1b96:	3f 91       	pop	r19
    1b98:	2f 91       	pop	r18
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <__subsf3>:
    1ba4:	50 58       	subi	r21, 0x80	; 128

00001ba6 <__addsf3>:
    1ba6:	bb 27       	eor	r27, r27
    1ba8:	aa 27       	eor	r26, r26
    1baa:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3x>
    1bae:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__fp_round>
    1bb2:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fp_pscA>
    1bb6:	38 f0       	brcs	.+14     	; 0x1bc6 <__addsf3+0x20>
    1bb8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_pscB>
    1bbc:	20 f0       	brcs	.+8      	; 0x1bc6 <__addsf3+0x20>
    1bbe:	39 f4       	brne	.+14     	; 0x1bce <__addsf3+0x28>
    1bc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc2:	19 f4       	brne	.+6      	; 0x1bca <__addsf3+0x24>
    1bc4:	26 f4       	brtc	.+8      	; 0x1bce <__addsf3+0x28>
    1bc6:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__fp_nan>
    1bca:	0e f4       	brtc	.+2      	; 0x1bce <__addsf3+0x28>
    1bcc:	e0 95       	com	r30
    1bce:	e7 fb       	bst	r30, 7
    1bd0:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_inf>

00001bd4 <__addsf3x>:
    1bd4:	e9 2f       	mov	r30, r25
    1bd6:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__fp_split3>
    1bda:	58 f3       	brcs	.-42     	; 0x1bb2 <__addsf3+0xc>
    1bdc:	ba 17       	cp	r27, r26
    1bde:	62 07       	cpc	r22, r18
    1be0:	73 07       	cpc	r23, r19
    1be2:	84 07       	cpc	r24, r20
    1be4:	95 07       	cpc	r25, r21
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__addsf3x+0x1c>
    1be8:	79 f4       	brne	.+30     	; 0x1c08 <__addsf3x+0x34>
    1bea:	a6 f5       	brtc	.+104    	; 0x1c54 <__addsf3x+0x80>
    1bec:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__fp_zero>
    1bf0:	0e f4       	brtc	.+2      	; 0x1bf4 <__addsf3x+0x20>
    1bf2:	e0 95       	com	r30
    1bf4:	0b 2e       	mov	r0, r27
    1bf6:	ba 2f       	mov	r27, r26
    1bf8:	a0 2d       	mov	r26, r0
    1bfa:	0b 01       	movw	r0, r22
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	90 01       	movw	r18, r0
    1c00:	0c 01       	movw	r0, r24
    1c02:	ca 01       	movw	r24, r20
    1c04:	a0 01       	movw	r20, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	ff 27       	eor	r31, r31
    1c0a:	59 1b       	sub	r21, r25
    1c0c:	99 f0       	breq	.+38     	; 0x1c34 <__addsf3x+0x60>
    1c0e:	59 3f       	cpi	r21, 0xF9	; 249
    1c10:	50 f4       	brcc	.+20     	; 0x1c26 <__addsf3x+0x52>
    1c12:	50 3e       	cpi	r21, 0xE0	; 224
    1c14:	68 f1       	brcs	.+90     	; 0x1c70 <__addsf3x+0x9c>
    1c16:	1a 16       	cp	r1, r26
    1c18:	f0 40       	sbci	r31, 0x00	; 0
    1c1a:	a2 2f       	mov	r26, r18
    1c1c:	23 2f       	mov	r18, r19
    1c1e:	34 2f       	mov	r19, r20
    1c20:	44 27       	eor	r20, r20
    1c22:	58 5f       	subi	r21, 0xF8	; 248
    1c24:	f3 cf       	rjmp	.-26     	; 0x1c0c <__addsf3x+0x38>
    1c26:	46 95       	lsr	r20
    1c28:	37 95       	ror	r19
    1c2a:	27 95       	ror	r18
    1c2c:	a7 95       	ror	r26
    1c2e:	f0 40       	sbci	r31, 0x00	; 0
    1c30:	53 95       	inc	r21
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__addsf3x+0x52>
    1c34:	7e f4       	brtc	.+30     	; 0x1c54 <__addsf3x+0x80>
    1c36:	1f 16       	cp	r1, r31
    1c38:	ba 0b       	sbc	r27, r26
    1c3a:	62 0b       	sbc	r22, r18
    1c3c:	73 0b       	sbc	r23, r19
    1c3e:	84 0b       	sbc	r24, r20
    1c40:	ba f0       	brmi	.+46     	; 0x1c70 <__addsf3x+0x9c>
    1c42:	91 50       	subi	r25, 0x01	; 1
    1c44:	a1 f0       	breq	.+40     	; 0x1c6e <__addsf3x+0x9a>
    1c46:	ff 0f       	add	r31, r31
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	66 1f       	adc	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	c2 f7       	brpl	.-16     	; 0x1c42 <__addsf3x+0x6e>
    1c52:	0e c0       	rjmp	.+28     	; 0x1c70 <__addsf3x+0x9c>
    1c54:	ba 0f       	add	r27, r26
    1c56:	62 1f       	adc	r22, r18
    1c58:	73 1f       	adc	r23, r19
    1c5a:	84 1f       	adc	r24, r20
    1c5c:	48 f4       	brcc	.+18     	; 0x1c70 <__addsf3x+0x9c>
    1c5e:	87 95       	ror	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	b7 95       	ror	r27
    1c66:	f7 95       	ror	r31
    1c68:	9e 3f       	cpi	r25, 0xFE	; 254
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <__addsf3x+0x9a>
    1c6c:	b0 cf       	rjmp	.-160    	; 0x1bce <__addsf3+0x28>
    1c6e:	93 95       	inc	r25
    1c70:	88 0f       	add	r24, r24
    1c72:	08 f0       	brcs	.+2      	; 0x1c76 <__addsf3x+0xa2>
    1c74:	99 27       	eor	r25, r25
    1c76:	ee 0f       	add	r30, r30
    1c78:	97 95       	ror	r25
    1c7a:	87 95       	ror	r24
    1c7c:	08 95       	ret

00001c7e <ceil>:
    1c7e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__fp_trunc>
    1c82:	90 f0       	brcs	.+36     	; 0x1ca8 <ceil+0x2a>
    1c84:	9f 37       	cpi	r25, 0x7F	; 127
    1c86:	48 f4       	brcc	.+18     	; 0x1c9a <ceil+0x1c>
    1c88:	91 11       	cpse	r25, r1
    1c8a:	16 f4       	brtc	.+4      	; 0x1c90 <ceil+0x12>
    1c8c:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_szero>
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	80 e8       	ldi	r24, 0x80	; 128
    1c96:	9f e3       	ldi	r25, 0x3F	; 63
    1c98:	08 95       	ret
    1c9a:	26 f0       	brts	.+8      	; 0x1ca4 <ceil+0x26>
    1c9c:	1b 16       	cp	r1, r27
    1c9e:	61 1d       	adc	r22, r1
    1ca0:	71 1d       	adc	r23, r1
    1ca2:	81 1d       	adc	r24, r1
    1ca4:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_mintl>
    1ca8:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_mpack>

00001cac <__cmpsf2>:
    1cac:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fp_cmp>
    1cb0:	08 f4       	brcc	.+2      	; 0x1cb4 <__cmpsf2+0x8>
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	08 95       	ret

00001cb6 <__divsf3>:
    1cb6:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3x>
    1cba:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__fp_round>
    1cbe:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_pscB>
    1cc2:	58 f0       	brcs	.+22     	; 0x1cda <__divsf3+0x24>
    1cc4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fp_pscA>
    1cc8:	40 f0       	brcs	.+16     	; 0x1cda <__divsf3+0x24>
    1cca:	29 f4       	brne	.+10     	; 0x1cd6 <__divsf3+0x20>
    1ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cce:	29 f0       	breq	.+10     	; 0x1cda <__divsf3+0x24>
    1cd0:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_inf>
    1cd4:	51 11       	cpse	r21, r1
    1cd6:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_szero>
    1cda:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__fp_nan>

00001cde <__divsf3x>:
    1cde:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__fp_split3>
    1ce2:	68 f3       	brcs	.-38     	; 0x1cbe <__divsf3+0x8>

00001ce4 <__divsf3_pse>:
    1ce4:	99 23       	and	r25, r25
    1ce6:	b1 f3       	breq	.-20     	; 0x1cd4 <__divsf3+0x1e>
    1ce8:	55 23       	and	r21, r21
    1cea:	91 f3       	breq	.-28     	; 0x1cd0 <__divsf3+0x1a>
    1cec:	95 1b       	sub	r25, r21
    1cee:	55 0b       	sbc	r21, r21
    1cf0:	bb 27       	eor	r27, r27
    1cf2:	aa 27       	eor	r26, r26
    1cf4:	62 17       	cp	r22, r18
    1cf6:	73 07       	cpc	r23, r19
    1cf8:	84 07       	cpc	r24, r20
    1cfa:	38 f0       	brcs	.+14     	; 0x1d0a <__divsf3_pse+0x26>
    1cfc:	9f 5f       	subi	r25, 0xFF	; 255
    1cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	44 1f       	adc	r20, r20
    1d06:	aa 1f       	adc	r26, r26
    1d08:	a9 f3       	breq	.-22     	; 0x1cf4 <__divsf3_pse+0x10>
    1d0a:	35 d0       	rcall	.+106    	; 0x1d76 <__divsf3_pse+0x92>
    1d0c:	0e 2e       	mov	r0, r30
    1d0e:	3a f0       	brmi	.+14     	; 0x1d1e <__divsf3_pse+0x3a>
    1d10:	e0 e8       	ldi	r30, 0x80	; 128
    1d12:	32 d0       	rcall	.+100    	; 0x1d78 <__divsf3_pse+0x94>
    1d14:	91 50       	subi	r25, 0x01	; 1
    1d16:	50 40       	sbci	r21, 0x00	; 0
    1d18:	e6 95       	lsr	r30
    1d1a:	00 1c       	adc	r0, r0
    1d1c:	ca f7       	brpl	.-14     	; 0x1d10 <__divsf3_pse+0x2c>
    1d1e:	2b d0       	rcall	.+86     	; 0x1d76 <__divsf3_pse+0x92>
    1d20:	fe 2f       	mov	r31, r30
    1d22:	29 d0       	rcall	.+82     	; 0x1d76 <__divsf3_pse+0x92>
    1d24:	66 0f       	add	r22, r22
    1d26:	77 1f       	adc	r23, r23
    1d28:	88 1f       	adc	r24, r24
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	26 17       	cp	r18, r22
    1d2e:	37 07       	cpc	r19, r23
    1d30:	48 07       	cpc	r20, r24
    1d32:	ab 07       	cpc	r26, r27
    1d34:	b0 e8       	ldi	r27, 0x80	; 128
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <__divsf3_pse+0x56>
    1d38:	bb 0b       	sbc	r27, r27
    1d3a:	80 2d       	mov	r24, r0
    1d3c:	bf 01       	movw	r22, r30
    1d3e:	ff 27       	eor	r31, r31
    1d40:	93 58       	subi	r25, 0x83	; 131
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	3a f0       	brmi	.+14     	; 0x1d54 <__divsf3_pse+0x70>
    1d46:	9e 3f       	cpi	r25, 0xFE	; 254
    1d48:	51 05       	cpc	r21, r1
    1d4a:	78 f0       	brcs	.+30     	; 0x1d6a <__divsf3_pse+0x86>
    1d4c:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_inf>
    1d50:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_szero>
    1d54:	5f 3f       	cpi	r21, 0xFF	; 255
    1d56:	e4 f3       	brlt	.-8      	; 0x1d50 <__divsf3_pse+0x6c>
    1d58:	98 3e       	cpi	r25, 0xE8	; 232
    1d5a:	d4 f3       	brlt	.-12     	; 0x1d50 <__divsf3_pse+0x6c>
    1d5c:	86 95       	lsr	r24
    1d5e:	77 95       	ror	r23
    1d60:	67 95       	ror	r22
    1d62:	b7 95       	ror	r27
    1d64:	f7 95       	ror	r31
    1d66:	9f 5f       	subi	r25, 0xFF	; 255
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <__divsf3_pse+0x78>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	91 1d       	adc	r25, r1
    1d6e:	96 95       	lsr	r25
    1d70:	87 95       	ror	r24
    1d72:	97 f9       	bld	r25, 7
    1d74:	08 95       	ret
    1d76:	e1 e0       	ldi	r30, 0x01	; 1
    1d78:	66 0f       	add	r22, r22
    1d7a:	77 1f       	adc	r23, r23
    1d7c:	88 1f       	adc	r24, r24
    1d7e:	bb 1f       	adc	r27, r27
    1d80:	62 17       	cp	r22, r18
    1d82:	73 07       	cpc	r23, r19
    1d84:	84 07       	cpc	r24, r20
    1d86:	ba 07       	cpc	r27, r26
    1d88:	20 f0       	brcs	.+8      	; 0x1d92 <__divsf3_pse+0xae>
    1d8a:	62 1b       	sub	r22, r18
    1d8c:	73 0b       	sbc	r23, r19
    1d8e:	84 0b       	sbc	r24, r20
    1d90:	ba 0b       	sbc	r27, r26
    1d92:	ee 1f       	adc	r30, r30
    1d94:	88 f7       	brcc	.-30     	; 0x1d78 <__divsf3_pse+0x94>
    1d96:	e0 95       	com	r30
    1d98:	08 95       	ret

00001d9a <__fixsfsi>:
    1d9a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fixunssfsi>
    1d9e:	68 94       	set
    1da0:	b1 11       	cpse	r27, r1
    1da2:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_szero>
    1da6:	08 95       	ret

00001da8 <__fixunssfsi>:
    1da8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fp_splitA>
    1dac:	88 f0       	brcs	.+34     	; 0x1dd0 <__fixunssfsi+0x28>
    1dae:	9f 57       	subi	r25, 0x7F	; 127
    1db0:	98 f0       	brcs	.+38     	; 0x1dd8 <__fixunssfsi+0x30>
    1db2:	b9 2f       	mov	r27, r25
    1db4:	99 27       	eor	r25, r25
    1db6:	b7 51       	subi	r27, 0x17	; 23
    1db8:	b0 f0       	brcs	.+44     	; 0x1de6 <__fixunssfsi+0x3e>
    1dba:	e1 f0       	breq	.+56     	; 0x1df4 <__fixunssfsi+0x4c>
    1dbc:	66 0f       	add	r22, r22
    1dbe:	77 1f       	adc	r23, r23
    1dc0:	88 1f       	adc	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	1a f0       	brmi	.+6      	; 0x1dcc <__fixunssfsi+0x24>
    1dc6:	ba 95       	dec	r27
    1dc8:	c9 f7       	brne	.-14     	; 0x1dbc <__fixunssfsi+0x14>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <__fixunssfsi+0x4c>
    1dcc:	b1 30       	cpi	r27, 0x01	; 1
    1dce:	91 f0       	breq	.+36     	; 0x1df4 <__fixunssfsi+0x4c>
    1dd0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__fp_zero>
    1dd4:	b1 e0       	ldi	r27, 0x01	; 1
    1dd6:	08 95       	ret
    1dd8:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__fp_zero>
    1ddc:	67 2f       	mov	r22, r23
    1dde:	78 2f       	mov	r23, r24
    1de0:	88 27       	eor	r24, r24
    1de2:	b8 5f       	subi	r27, 0xF8	; 248
    1de4:	39 f0       	breq	.+14     	; 0x1df4 <__fixunssfsi+0x4c>
    1de6:	b9 3f       	cpi	r27, 0xF9	; 249
    1de8:	cc f3       	brlt	.-14     	; 0x1ddc <__fixunssfsi+0x34>
    1dea:	86 95       	lsr	r24
    1dec:	77 95       	ror	r23
    1dee:	67 95       	ror	r22
    1df0:	b3 95       	inc	r27
    1df2:	d9 f7       	brne	.-10     	; 0x1dea <__fixunssfsi+0x42>
    1df4:	3e f4       	brtc	.+14     	; 0x1e04 <__fixunssfsi+0x5c>
    1df6:	90 95       	com	r25
    1df8:	80 95       	com	r24
    1dfa:	70 95       	com	r23
    1dfc:	61 95       	neg	r22
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	8f 4f       	sbci	r24, 0xFF	; 255
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	08 95       	ret

00001e06 <__floatunsisf>:
    1e06:	e8 94       	clt
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <__floatsisf+0x12>

00001e0a <__floatsisf>:
    1e0a:	97 fb       	bst	r25, 7
    1e0c:	3e f4       	brtc	.+14     	; 0x1e1c <__floatsisf+0x12>
    1e0e:	90 95       	com	r25
    1e10:	80 95       	com	r24
    1e12:	70 95       	com	r23
    1e14:	61 95       	neg	r22
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	99 23       	and	r25, r25
    1e1e:	a9 f0       	breq	.+42     	; 0x1e4a <__floatsisf+0x40>
    1e20:	f9 2f       	mov	r31, r25
    1e22:	96 e9       	ldi	r25, 0x96	; 150
    1e24:	bb 27       	eor	r27, r27
    1e26:	93 95       	inc	r25
    1e28:	f6 95       	lsr	r31
    1e2a:	87 95       	ror	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	f1 11       	cpse	r31, r1
    1e34:	f8 cf       	rjmp	.-16     	; 0x1e26 <__floatsisf+0x1c>
    1e36:	fa f4       	brpl	.+62     	; 0x1e76 <__floatsisf+0x6c>
    1e38:	bb 0f       	add	r27, r27
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <__floatsisf+0x36>
    1e3c:	60 ff       	sbrs	r22, 0
    1e3e:	1b c0       	rjmp	.+54     	; 0x1e76 <__floatsisf+0x6c>
    1e40:	6f 5f       	subi	r22, 0xFF	; 255
    1e42:	7f 4f       	sbci	r23, 0xFF	; 255
    1e44:	8f 4f       	sbci	r24, 0xFF	; 255
    1e46:	9f 4f       	sbci	r25, 0xFF	; 255
    1e48:	16 c0       	rjmp	.+44     	; 0x1e76 <__floatsisf+0x6c>
    1e4a:	88 23       	and	r24, r24
    1e4c:	11 f0       	breq	.+4      	; 0x1e52 <__floatsisf+0x48>
    1e4e:	96 e9       	ldi	r25, 0x96	; 150
    1e50:	11 c0       	rjmp	.+34     	; 0x1e74 <__floatsisf+0x6a>
    1e52:	77 23       	and	r23, r23
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <__floatsisf+0x54>
    1e56:	9e e8       	ldi	r25, 0x8E	; 142
    1e58:	87 2f       	mov	r24, r23
    1e5a:	76 2f       	mov	r23, r22
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <__floatsisf+0x5e>
    1e5e:	66 23       	and	r22, r22
    1e60:	71 f0       	breq	.+28     	; 0x1e7e <__floatsisf+0x74>
    1e62:	96 e8       	ldi	r25, 0x86	; 134
    1e64:	86 2f       	mov	r24, r22
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	2a f0       	brmi	.+10     	; 0x1e76 <__floatsisf+0x6c>
    1e6c:	9a 95       	dec	r25
    1e6e:	66 0f       	add	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	88 1f       	adc	r24, r24
    1e74:	da f7       	brpl	.-10     	; 0x1e6c <__floatsisf+0x62>
    1e76:	88 0f       	add	r24, r24
    1e78:	96 95       	lsr	r25
    1e7a:	87 95       	ror	r24
    1e7c:	97 f9       	bld	r25, 7
    1e7e:	08 95       	ret

00001e80 <__fp_cmp>:
    1e80:	99 0f       	add	r25, r25
    1e82:	00 08       	sbc	r0, r0
    1e84:	55 0f       	add	r21, r21
    1e86:	aa 0b       	sbc	r26, r26
    1e88:	e0 e8       	ldi	r30, 0x80	; 128
    1e8a:	fe ef       	ldi	r31, 0xFE	; 254
    1e8c:	16 16       	cp	r1, r22
    1e8e:	17 06       	cpc	r1, r23
    1e90:	e8 07       	cpc	r30, r24
    1e92:	f9 07       	cpc	r31, r25
    1e94:	c0 f0       	brcs	.+48     	; 0x1ec6 <__fp_cmp+0x46>
    1e96:	12 16       	cp	r1, r18
    1e98:	13 06       	cpc	r1, r19
    1e9a:	e4 07       	cpc	r30, r20
    1e9c:	f5 07       	cpc	r31, r21
    1e9e:	98 f0       	brcs	.+38     	; 0x1ec6 <__fp_cmp+0x46>
    1ea0:	62 1b       	sub	r22, r18
    1ea2:	73 0b       	sbc	r23, r19
    1ea4:	84 0b       	sbc	r24, r20
    1ea6:	95 0b       	sbc	r25, r21
    1ea8:	39 f4       	brne	.+14     	; 0x1eb8 <__fp_cmp+0x38>
    1eaa:	0a 26       	eor	r0, r26
    1eac:	61 f0       	breq	.+24     	; 0x1ec6 <__fp_cmp+0x46>
    1eae:	23 2b       	or	r18, r19
    1eb0:	24 2b       	or	r18, r20
    1eb2:	25 2b       	or	r18, r21
    1eb4:	21 f4       	brne	.+8      	; 0x1ebe <__fp_cmp+0x3e>
    1eb6:	08 95       	ret
    1eb8:	0a 26       	eor	r0, r26
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <__fp_cmp+0x3e>
    1ebc:	a1 40       	sbci	r26, 0x01	; 1
    1ebe:	a6 95       	lsr	r26
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	81 1d       	adc	r24, r1
    1ec4:	81 1d       	adc	r24, r1
    1ec6:	08 95       	ret

00001ec8 <__fp_inf>:
    1ec8:	97 f9       	bld	r25, 7
    1eca:	9f 67       	ori	r25, 0x7F	; 127
    1ecc:	80 e8       	ldi	r24, 0x80	; 128
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	08 95       	ret

00001ed4 <__fp_mintl>:
    1ed4:	88 23       	and	r24, r24
    1ed6:	71 f4       	brne	.+28     	; 0x1ef4 <__fp_mintl+0x20>
    1ed8:	77 23       	and	r23, r23
    1eda:	21 f0       	breq	.+8      	; 0x1ee4 <__fp_mintl+0x10>
    1edc:	98 50       	subi	r25, 0x08	; 8
    1ede:	87 2b       	or	r24, r23
    1ee0:	76 2f       	mov	r23, r22
    1ee2:	07 c0       	rjmp	.+14     	; 0x1ef2 <__fp_mintl+0x1e>
    1ee4:	66 23       	and	r22, r22
    1ee6:	11 f4       	brne	.+4      	; 0x1eec <__fp_mintl+0x18>
    1ee8:	99 27       	eor	r25, r25
    1eea:	0d c0       	rjmp	.+26     	; 0x1f06 <__fp_mintl+0x32>
    1eec:	90 51       	subi	r25, 0x10	; 16
    1eee:	86 2b       	or	r24, r22
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	2a f0       	brmi	.+10     	; 0x1f00 <__fp_mintl+0x2c>
    1ef6:	9a 95       	dec	r25
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	88 1f       	adc	r24, r24
    1efe:	da f7       	brpl	.-10     	; 0x1ef6 <__fp_mintl+0x22>
    1f00:	88 0f       	add	r24, r24
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	97 f9       	bld	r25, 7
    1f08:	08 95       	ret

00001f0a <__fp_mpack>:
    1f0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f0c:	31 f0       	breq	.+12     	; 0x1f1a <__fp_mpack_finite+0xc>

00001f0e <__fp_mpack_finite>:
    1f0e:	91 50       	subi	r25, 0x01	; 1
    1f10:	20 f4       	brcc	.+8      	; 0x1f1a <__fp_mpack_finite+0xc>
    1f12:	87 95       	ror	r24
    1f14:	77 95       	ror	r23
    1f16:	67 95       	ror	r22
    1f18:	b7 95       	ror	r27
    1f1a:	88 0f       	add	r24, r24
    1f1c:	91 1d       	adc	r25, r1
    1f1e:	96 95       	lsr	r25
    1f20:	87 95       	ror	r24
    1f22:	97 f9       	bld	r25, 7
    1f24:	08 95       	ret

00001f26 <__fp_nan>:
    1f26:	9f ef       	ldi	r25, 0xFF	; 255
    1f28:	80 ec       	ldi	r24, 0xC0	; 192
    1f2a:	08 95       	ret

00001f2c <__fp_pscA>:
    1f2c:	00 24       	eor	r0, r0
    1f2e:	0a 94       	dec	r0
    1f30:	16 16       	cp	r1, r22
    1f32:	17 06       	cpc	r1, r23
    1f34:	18 06       	cpc	r1, r24
    1f36:	09 06       	cpc	r0, r25
    1f38:	08 95       	ret

00001f3a <__fp_pscB>:
    1f3a:	00 24       	eor	r0, r0
    1f3c:	0a 94       	dec	r0
    1f3e:	12 16       	cp	r1, r18
    1f40:	13 06       	cpc	r1, r19
    1f42:	14 06       	cpc	r1, r20
    1f44:	05 06       	cpc	r0, r21
    1f46:	08 95       	ret

00001f48 <__fp_round>:
    1f48:	09 2e       	mov	r0, r25
    1f4a:	03 94       	inc	r0
    1f4c:	00 0c       	add	r0, r0
    1f4e:	11 f4       	brne	.+4      	; 0x1f54 <__fp_round+0xc>
    1f50:	88 23       	and	r24, r24
    1f52:	52 f0       	brmi	.+20     	; 0x1f68 <__fp_round+0x20>
    1f54:	bb 0f       	add	r27, r27
    1f56:	40 f4       	brcc	.+16     	; 0x1f68 <__fp_round+0x20>
    1f58:	bf 2b       	or	r27, r31
    1f5a:	11 f4       	brne	.+4      	; 0x1f60 <__fp_round+0x18>
    1f5c:	60 ff       	sbrs	r22, 0
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <__fp_round+0x20>
    1f60:	6f 5f       	subi	r22, 0xFF	; 255
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	8f 4f       	sbci	r24, 0xFF	; 255
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	08 95       	ret

00001f6a <__fp_split3>:
    1f6a:	57 fd       	sbrc	r21, 7
    1f6c:	90 58       	subi	r25, 0x80	; 128
    1f6e:	44 0f       	add	r20, r20
    1f70:	55 1f       	adc	r21, r21
    1f72:	59 f0       	breq	.+22     	; 0x1f8a <__fp_splitA+0x10>
    1f74:	5f 3f       	cpi	r21, 0xFF	; 255
    1f76:	71 f0       	breq	.+28     	; 0x1f94 <__fp_splitA+0x1a>
    1f78:	47 95       	ror	r20

00001f7a <__fp_splitA>:
    1f7a:	88 0f       	add	r24, r24
    1f7c:	97 fb       	bst	r25, 7
    1f7e:	99 1f       	adc	r25, r25
    1f80:	61 f0       	breq	.+24     	; 0x1f9a <__fp_splitA+0x20>
    1f82:	9f 3f       	cpi	r25, 0xFF	; 255
    1f84:	79 f0       	breq	.+30     	; 0x1fa4 <__fp_splitA+0x2a>
    1f86:	87 95       	ror	r24
    1f88:	08 95       	ret
    1f8a:	12 16       	cp	r1, r18
    1f8c:	13 06       	cpc	r1, r19
    1f8e:	14 06       	cpc	r1, r20
    1f90:	55 1f       	adc	r21, r21
    1f92:	f2 cf       	rjmp	.-28     	; 0x1f78 <__fp_split3+0xe>
    1f94:	46 95       	lsr	r20
    1f96:	f1 df       	rcall	.-30     	; 0x1f7a <__fp_splitA>
    1f98:	08 c0       	rjmp	.+16     	; 0x1faa <__fp_splitA+0x30>
    1f9a:	16 16       	cp	r1, r22
    1f9c:	17 06       	cpc	r1, r23
    1f9e:	18 06       	cpc	r1, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	f1 cf       	rjmp	.-30     	; 0x1f86 <__fp_splitA+0xc>
    1fa4:	86 95       	lsr	r24
    1fa6:	71 05       	cpc	r23, r1
    1fa8:	61 05       	cpc	r22, r1
    1faa:	08 94       	sec
    1fac:	08 95       	ret

00001fae <__fp_trunc>:
    1fae:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fp_splitA>
    1fb2:	a0 f0       	brcs	.+40     	; 0x1fdc <__fp_trunc+0x2e>
    1fb4:	be e7       	ldi	r27, 0x7E	; 126
    1fb6:	b9 17       	cp	r27, r25
    1fb8:	88 f4       	brcc	.+34     	; 0x1fdc <__fp_trunc+0x2e>
    1fba:	bb 27       	eor	r27, r27
    1fbc:	9f 38       	cpi	r25, 0x8F	; 143
    1fbe:	60 f4       	brcc	.+24     	; 0x1fd8 <__fp_trunc+0x2a>
    1fc0:	16 16       	cp	r1, r22
    1fc2:	b1 1d       	adc	r27, r1
    1fc4:	67 2f       	mov	r22, r23
    1fc6:	78 2f       	mov	r23, r24
    1fc8:	88 27       	eor	r24, r24
    1fca:	98 5f       	subi	r25, 0xF8	; 248
    1fcc:	f7 cf       	rjmp	.-18     	; 0x1fbc <__fp_trunc+0xe>
    1fce:	86 95       	lsr	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	b1 1d       	adc	r27, r1
    1fd6:	93 95       	inc	r25
    1fd8:	96 39       	cpi	r25, 0x96	; 150
    1fda:	c8 f3       	brcs	.-14     	; 0x1fce <__fp_trunc+0x20>
    1fdc:	08 95       	ret

00001fde <__fp_zero>:
    1fde:	e8 94       	clt

00001fe0 <__fp_szero>:
    1fe0:	bb 27       	eor	r27, r27
    1fe2:	66 27       	eor	r22, r22
    1fe4:	77 27       	eor	r23, r23
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	97 f9       	bld	r25, 7
    1fea:	08 95       	ret

00001fec <__gesf2>:
    1fec:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fp_cmp>
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <__gesf2+0x8>
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	08 95       	ret

00001ff6 <__mulsf3>:
    1ff6:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulsf3x>
    1ffa:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__fp_round>
    1ffe:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fp_pscA>
    2002:	38 f0       	brcs	.+14     	; 0x2012 <__mulsf3+0x1c>
    2004:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_pscB>
    2008:	20 f0       	brcs	.+8      	; 0x2012 <__mulsf3+0x1c>
    200a:	95 23       	and	r25, r21
    200c:	11 f0       	breq	.+4      	; 0x2012 <__mulsf3+0x1c>
    200e:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_inf>
    2012:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__fp_nan>
    2016:	11 24       	eor	r1, r1
    2018:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_szero>

0000201c <__mulsf3x>:
    201c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__fp_split3>
    2020:	70 f3       	brcs	.-36     	; 0x1ffe <__mulsf3+0x8>

00002022 <__mulsf3_pse>:
    2022:	95 9f       	mul	r25, r21
    2024:	c1 f3       	breq	.-16     	; 0x2016 <__mulsf3+0x20>
    2026:	95 0f       	add	r25, r21
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	55 1f       	adc	r21, r21
    202c:	62 9f       	mul	r22, r18
    202e:	f0 01       	movw	r30, r0
    2030:	72 9f       	mul	r23, r18
    2032:	bb 27       	eor	r27, r27
    2034:	f0 0d       	add	r31, r0
    2036:	b1 1d       	adc	r27, r1
    2038:	63 9f       	mul	r22, r19
    203a:	aa 27       	eor	r26, r26
    203c:	f0 0d       	add	r31, r0
    203e:	b1 1d       	adc	r27, r1
    2040:	aa 1f       	adc	r26, r26
    2042:	64 9f       	mul	r22, r20
    2044:	66 27       	eor	r22, r22
    2046:	b0 0d       	add	r27, r0
    2048:	a1 1d       	adc	r26, r1
    204a:	66 1f       	adc	r22, r22
    204c:	82 9f       	mul	r24, r18
    204e:	22 27       	eor	r18, r18
    2050:	b0 0d       	add	r27, r0
    2052:	a1 1d       	adc	r26, r1
    2054:	62 1f       	adc	r22, r18
    2056:	73 9f       	mul	r23, r19
    2058:	b0 0d       	add	r27, r0
    205a:	a1 1d       	adc	r26, r1
    205c:	62 1f       	adc	r22, r18
    205e:	83 9f       	mul	r24, r19
    2060:	a0 0d       	add	r26, r0
    2062:	61 1d       	adc	r22, r1
    2064:	22 1f       	adc	r18, r18
    2066:	74 9f       	mul	r23, r20
    2068:	33 27       	eor	r19, r19
    206a:	a0 0d       	add	r26, r0
    206c:	61 1d       	adc	r22, r1
    206e:	23 1f       	adc	r18, r19
    2070:	84 9f       	mul	r24, r20
    2072:	60 0d       	add	r22, r0
    2074:	21 1d       	adc	r18, r1
    2076:	82 2f       	mov	r24, r18
    2078:	76 2f       	mov	r23, r22
    207a:	6a 2f       	mov	r22, r26
    207c:	11 24       	eor	r1, r1
    207e:	9f 57       	subi	r25, 0x7F	; 127
    2080:	50 40       	sbci	r21, 0x00	; 0
    2082:	9a f0       	brmi	.+38     	; 0x20aa <__mulsf3_pse+0x88>
    2084:	f1 f0       	breq	.+60     	; 0x20c2 <__mulsf3_pse+0xa0>
    2086:	88 23       	and	r24, r24
    2088:	4a f0       	brmi	.+18     	; 0x209c <__mulsf3_pse+0x7a>
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	bb 1f       	adc	r27, r27
    2090:	66 1f       	adc	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	88 1f       	adc	r24, r24
    2096:	91 50       	subi	r25, 0x01	; 1
    2098:	50 40       	sbci	r21, 0x00	; 0
    209a:	a9 f7       	brne	.-22     	; 0x2086 <__mulsf3_pse+0x64>
    209c:	9e 3f       	cpi	r25, 0xFE	; 254
    209e:	51 05       	cpc	r21, r1
    20a0:	80 f0       	brcs	.+32     	; 0x20c2 <__mulsf3_pse+0xa0>
    20a2:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_inf>
    20a6:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_szero>
    20aa:	5f 3f       	cpi	r21, 0xFF	; 255
    20ac:	e4 f3       	brlt	.-8      	; 0x20a6 <__mulsf3_pse+0x84>
    20ae:	98 3e       	cpi	r25, 0xE8	; 232
    20b0:	d4 f3       	brlt	.-12     	; 0x20a6 <__mulsf3_pse+0x84>
    20b2:	86 95       	lsr	r24
    20b4:	77 95       	ror	r23
    20b6:	67 95       	ror	r22
    20b8:	b7 95       	ror	r27
    20ba:	f7 95       	ror	r31
    20bc:	e7 95       	ror	r30
    20be:	9f 5f       	subi	r25, 0xFF	; 255
    20c0:	c1 f7       	brne	.-16     	; 0x20b2 <__mulsf3_pse+0x90>
    20c2:	fe 2b       	or	r31, r30
    20c4:	88 0f       	add	r24, r24
    20c6:	91 1d       	adc	r25, r1
    20c8:	96 95       	lsr	r25
    20ca:	87 95       	ror	r24
    20cc:	97 f9       	bld	r25, 7
    20ce:	08 95       	ret

000020d0 <__divmodhi4>:
    20d0:	97 fb       	bst	r25, 7
    20d2:	07 2e       	mov	r0, r23
    20d4:	16 f4       	brtc	.+4      	; 0x20da <__divmodhi4+0xa>
    20d6:	00 94       	com	r0
    20d8:	07 d0       	rcall	.+14     	; 0x20e8 <__divmodhi4_neg1>
    20da:	77 fd       	sbrc	r23, 7
    20dc:	09 d0       	rcall	.+18     	; 0x20f0 <__divmodhi4_neg2>
    20de:	0e 94 82 10 	call	0x2104	; 0x2104 <__udivmodhi4>
    20e2:	07 fc       	sbrc	r0, 7
    20e4:	05 d0       	rcall	.+10     	; 0x20f0 <__divmodhi4_neg2>
    20e6:	3e f4       	brtc	.+14     	; 0x20f6 <__divmodhi4_exit>

000020e8 <__divmodhi4_neg1>:
    20e8:	90 95       	com	r25
    20ea:	81 95       	neg	r24
    20ec:	9f 4f       	sbci	r25, 0xFF	; 255
    20ee:	08 95       	ret

000020f0 <__divmodhi4_neg2>:
    20f0:	70 95       	com	r23
    20f2:	61 95       	neg	r22
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255

000020f6 <__divmodhi4_exit>:
    20f6:	08 95       	ret

000020f8 <__tablejump2__>:
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	05 90       	lpm	r0, Z+
    20fe:	f4 91       	lpm	r31, Z
    2100:	e0 2d       	mov	r30, r0
    2102:	09 94       	ijmp

00002104 <__udivmodhi4>:
    2104:	aa 1b       	sub	r26, r26
    2106:	bb 1b       	sub	r27, r27
    2108:	51 e1       	ldi	r21, 0x11	; 17
    210a:	07 c0       	rjmp	.+14     	; 0x211a <__udivmodhi4_ep>

0000210c <__udivmodhi4_loop>:
    210c:	aa 1f       	adc	r26, r26
    210e:	bb 1f       	adc	r27, r27
    2110:	a6 17       	cp	r26, r22
    2112:	b7 07       	cpc	r27, r23
    2114:	10 f0       	brcs	.+4      	; 0x211a <__udivmodhi4_ep>
    2116:	a6 1b       	sub	r26, r22
    2118:	b7 0b       	sbc	r27, r23

0000211a <__udivmodhi4_ep>:
    211a:	88 1f       	adc	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	5a 95       	dec	r21
    2120:	a9 f7       	brne	.-22     	; 0x210c <__udivmodhi4_loop>
    2122:	80 95       	com	r24
    2124:	90 95       	com	r25
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	08 95       	ret

0000212c <_exit>:
    212c:	f8 94       	cli

0000212e <__stop_program>:
    212e:	ff cf       	rjmp	.-2      	; 0x212e <__stop_program>
